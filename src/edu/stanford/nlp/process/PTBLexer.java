/* The following code was generated by JFlex 1.5.1 */

package edu.stanford.nlp.process;

import java.io.IOException;

// Stanford English Tokenizer -- a deterministic, fast high-quality tokenizer

// Copyright (c) 2002-2009 The Board of Trustees of
// The Leland Stanford Junior University. All Rights Reserved.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
//
// For more information, bug reports, fixes, contact:
//    Christopher Manning
//    Dept of Computer Science, Gates 1A
//    Stanford CA 94305-9010
//    USA
//    java-nlp-support@lists.stanford.edu
//    http://nlp.stanford.edu/software/

import java.io.Reader;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.regex.Pattern;

import com.util.Utility;

import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.ling.CoreAnnotations;
import edu.stanford.nlp.util.StringUtils;
import edu.stanford.nlp.util.logging.Redwood;

/**
 * Provides a tokenizer or lexer that does a pretty good job at
 * deterministically tokenizing English according to Penn Treebank conventions.
 * The class is a scanner generated by <a href="http://www.jflex.de/">JFlex</a>
 * from the specification file <code>PTBLexer.flex</code>. As well as copying
 * what is in the Treebank, it now contains some extensions to deal with modern
 * text and encoding issues, such as recognizing URLs and common Unicode
 * characters, and a variety of options for doing or suppressing certain
 * normalizations. Although they shouldn't really be there, it also interprets
 * certain of the characters between U+0080 and U+009F as Windows CP1252
 * characters.
 * <p>
 * <i>Fine points:</i> Output normalized tokens should not contain spaces,
 * providing the normalizeSpace option is true. The space will be turned into a
 * non-breaking space (U+00A0). Otherwise, they can appear in a couple of token
 * classes (phone numbers, fractions). The original PTB tokenization (messy)
 * standard also escapes certain other characters, such as * and /, and
 * normalizes things like " to `` or ''. By default, this tokenizer does all of
 * those things. However, you can turn them off by using the ptb3Escaping=false
 * option, or, parts of it on or off, or unicode character alternatives on with
 * different options. You can also build an invertible tokenizer, with which you
 * can still access the original character sequence and the non-token whitespace
 * around it in a CoreLabel. And you can ask for newlines to be tokenized.
 * <p>
 * <i>Character entities:</i> For legacy reasons, this file will parse and
 * interpret some simple SGML/XML/HTML tags and character entities. For modern
 * formats like XML, you are better off doing XML parsing, and then running the
 * tokenizer on CDATA elements. But, we and others frequently work with simple
 * SGML text corpora that are not XML (like LDC text collections). In practice,
 * they only include very simple markup and a few simple entities, and the
 * combination of the -parseInside option and the minimal character entity
 * support in this file is enough to handle them. So we leave this functionality
 * in, even though it could conceivably mess with a correct XML file if the
 * output of decoding had things that look like character entities. In general,
 * handled symbols are changed to ASCII/Unicode forms, but handled accented
 * letters are just left as character entities in words.
 * <p>
 * <i>Character support:</i> PTBLexer works works for a large subset of Unicode
 * Base Multilingual Plane characters (only). It recognizes all characters that
 * match the JFlex/Java [:letter:] and [:digit] character class (but,
 * unfortunately, JFlex does not support most other Unicode character classes
 * available in Java regular expressions). It also matches all defined
 * characters in the Unicode ranges U+0000-U+07FF excluding control characters
 * except the ones very standardly found in plain text documents. Finally select
 * other characters commonly found in English unicode text are included.
 * <p>
 * <i>Implementation note:</i> The scanner is caseless, but note, if adding or
 * changing regexps, that caseless does not expand inside character classes.
 * From the manual: "The %caseless option does not change the matched text and
 * does not effect character classes. So [a] still only matches the character a
 * and not A, too." Note that some character classes still deliberately don't
 * have both cases, so the scanner's operation isn't completely
 * case-independent, though it mostly is.
 * <p>
 * <i>Implementation note:</i> This Java class is automatically generated from
 * PTBLexer.flex using jflex. DO NOT EDIT THE JAVA SOURCE. This file has now
 * been updated for JFlex 1.4.2+. (This required code changes: this version only
 * works right with JFlex 1.4.2+; the previous version only works right with
 * JFlex 1.4.1.)
 *
 * @author Tim Grow
 * @author Christopher Manning
 * @author Jenny Finkel
 */

class PTBLexer {

	/** This character denotes the end of file */
	public static final int YYEOF = -1;

	/** initial size of the lookahead buffer */
	private static final int ZZ_BUFFERSIZE = 16384;

	/** lexical states */
	public static final int YYINITIAL = 0;
	public static final int YyTokenizePerLine = 2;
	public static final int YyNotTokenizePerLine = 4;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the
	 * beginning of a line l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = { 0, 0, 1, 1, 2, 2 };

	/**
	 * Translates characters to character classes
	 */
	private static final Stringu014d\113\1\0\4\113\2\0\7\113\1\0\1\113\1\0\4\113" + "\2\0\51\113\1\0\4\113\2\0\41\113\1\0\4\113\2\0\7\113" + "\1\0\1\113\1\0\4\113\2\0\17\113\1\0\71\113\1\0\4\113" + "\2\0\103\113\45\0\20\113\20\0\125\113\14\0\u026c\113\2\0\21\113" + "\1\0\32\113\5\0\113\113\25\0\15\113\1\0\4\113\16\0\22\113" + "\16\0\22\113\16\0\15\113\1\0\3\113\17\0\64\113\43\0\1\113" + "\4\0\1\113\3\0\12\76\46\0\12\76\6\0\130\113\10\0\51\113" + "\1\0\1\113\5\0\106\113\12\0\35\113\51\0\12\76\36\113\2\0" + "\5\113\13\0\54\113\25\0\7\113\10\0\12\76\46\0\27\113\11\0" + "\65\113\53\0\12\76\6\0\12\76\15\0\1\113\135\0\57\113\21\0" + "\7\113\4\0\12\76\51\0\36\113\15\0\2\113\12\76\54\113\32\0" + "\44\113\34\0\12\76\3\0\3\113\12\76\44\113\153\0\4\113\1\0" + "\4\113\3\0\2\113\11\0\300\113\100\0\1\114\1\113\1\114\1\113" + "\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113" + "\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113" + "\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113" + "\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113" + "\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113" + "\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113" + "\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113" + "\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113" + "\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113" + "\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113" + "\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113" + "\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113" + "\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113" + "\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113" + "\1\114\1\113\1\114\1\113\1\114\11\113\1\114\1\113\1\114\1\113" + "\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113" + "\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113" + "\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113" + "\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113" + "\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113" + "\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113" + "\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113" + "\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113" + "\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113\1\114\1\113" + "\1\114\1\113\1\114\11\113\10\114\6\113\2\0\6\114\2\0\10\113" + "\10\114\10\113\10\114\6\113\2\0\6\114\2\0\10\113\1\0\1\114" + "\1\0\1\114\1\0\1\114\1\0\1\114\10\113\10\114\16\113\2\0" + "\65\113\1\0\2\113\4\114\1\113\1\177\1\113\3\0\3\113\1\0" + "\2\113\4\114\1\113\3\0\4\113\2\0\2\113\4\114\4\0\10\113" + "\5\114\5\0\3\113\1\0\2\113\4\114\1\113\3\0\13\45\1\204" + "\2\0\2\204\2\164\1\0\3\26\2\177\1\144\1\143\1\170\1\144" + "\4\170\4\177\2\0\1\165\1\0\1\47\1\47\6\0\11\177\2\170" + "\1\177\2\0\6\177\1\107\53\0\1\103\1\113\2\0\6\103\2\102" + "\3\177\1\113\12\104\2\102\3\177\1\0\15\113\3\0\1\112\3\0" + "\1\112\7\0\1\112\123\0\2\177\1\114\4\177\1\114\2\177\1\113" + "\3\114\2\113\3\114\1\113\1\177\1\114\3\177\5\114\6\177\1\114" + "\1\177\1\114\1\177\1\114\1\177\1\146\3\114\1\177\1\113\4\114" + "\6\113\2\177\2\113\2\114\5\177\1\114\4\113\4\177\1\113\1\177" + "\3\0\14\110\1\0\20\52\23\0\1\114\1\113\13\0\u0326\177\32\200" + "\uu01d0\0" + "\1\45\1\167\1\177\2\177\2\113\1\0\31\177\20\0\5\113\5\0" + "\2\113\4\0\126\113\6\0\3\113\1\0\132\113\1\177\4\113\5\0" + "\51\113\3\0\136\113\21\0\33\113\65\0\20\113\u0200\0\u19b6\113\112\0" + "\u51cd\113\63\0\u048d\113\103\0\56\113\2\0\u010du2ba4\113\14\0\27\113\4\0" + "\61\113\u2104\0\u016e\113\2\0\152\113\46\0\7\113\14\0\5\113\5\0" + "\1\113\1\0\12\113\1\0\15\113\1\0\5\113\1\0\1\113\1\0" + "\2\113\1\0\2\113\1\0\154\113\41\0\u016b\113\22\0\100\113\2\0" + "\66\113\50\0\14\113\164\0\5\113\1\0\207\113\2\0\1\204\1\0" + "\2\177\1\160\14\177\12\76\6\177\1\157\32\114\6\177\32\113\13\177" + "\131\113\3\0\6\113\2\0\6\113\2\0\6\113\2\0\3\113\3\0" + "\2\112\3\0\2\112\31\0";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 = "\32\0\1\1\1\2\1\3\1\4\1\5\1\6\1\3" + "\1\7\1\3\2\10\1\11\1\12\1\3\7\6\1\3" + "\1\13\10\6\1\3\1\14\4\6\1\7\2\5\1\15" + "\23\6\1\14\1\1\7\3\1\16\1\3\1\17\3\6" + "\1\3\17\6\2\10\1\3\1\6\1\20\1\3\1\10" + "\4\3\1\21\1\22\1\23\1\24\1\25\1\3\1\26" + "\1\27\1\30\1\31\1\7\1\2\1\6\1\3\17\6" + "\1\14\4\6\1\15\23\6\1\14\3\6\1\3\20\6" + "\1\2\1\6\1\3\17\6\1\14\4\6\1\15\23\6" + "\1\14\3\6\1\3\20\6\133\0\1\4\1\0\1\14" + "\4\0\1\32\1\6\1\0\1\33\3\0\6\6\1\33" + "\2\32\6\6\1\33\1\0\2\6\1\3\2\6\5\0" + "\1\3\2\0\3\10\7\0\1\34\31\0\31\6\1\10" + "\1\0\6\6\1\10\3\0\25\6\1\3\5\0\31\6" + "\1\0\3\6\5\0\27\6\2\0\11\6\3\0\50\6" + "\1\3\4\6\2\0\5\6\1\3\7\6\1\0\4\6" + "\2\0\1\6\2\0\7\6\2\0\1\6\3\0\1\3" + "\2\0\1\10\2\0\1\10\2\14\5\0\2\6\1\0" + "\21\6\1\3\7\6\2\0\1\6\1\33\1\32\6\6" + "\1\0\1\3\2\6\1\3\1\6\1\0\21\6\1\0" + "\20\6\1\3\1\0\14\6\1\0\34\6\1\3\10\6" + "\1\0\2\6\1\0\7\6\1\0\21\6\1\0\1\10" + "\1\0\1\10\1\14\1\10\1\14\7\0\2\14\2\0" + "\1\23\3\0\7\6\2\0\26\6\1\0\1\3\6\6" + "\1\0\3\6\1\0\1\10\1\0\10\6\2\10\1\0" + "\4\6\2\0\2\6\2\0\23\6\2\10\5\0\2\10" + "\5\0\1\10\6\6\3\3\10\0\1\6\3\0\16\6" + "\1\3\2\6\10\0\31\6\1\0\6\6\1\0\25\6" + "\1\3\4\0\31\6\1\0\3\6\1\0\27\6\1\0" + "\61\6\1\3\4\6\1\0\20\6\1\0\1\6\1\0" + "\12\6\1\0\1\10\2\0\1\10\2\14\3\0\32\6" + "\2\0\11\6\1\3\22\6\1\0\20\6\1\3\1\0" + "\14\6\1\0\34\6\1\3\12\6\1\0\10\6\1\0" + "\21\6\1\0\1\10\2\0\1\10\1\14\1\10\1\14" + "\5\0\7\6\2\0\26\6\1\0\1\3\16\6\1\0" + "\10\6\1\0\4\6\1\0\2\6\1\0\31\6\4\0" + "\1\6\3\0\16\6\1\3\2\6\10\0\31\6\1\0" + "\6\6\1\0\25\6\1\3\4\0\31\6\1\0\3\6" + "\1\0\27\6\1\0\61\6\1\3\4\6\1\0\20\6" + "\1\0\1\6\1\0\12\6\1\0\1\10\2\0\1\10" + "\2\14\3\0\32\6\2\0\11\6\1\3\22\6\1\0" + "\20\6\1\3\1\0\14\6\1\0\34\6\1\3\12\6" + "\1\0\10\6\1\0\21\6\1\0\1\10\2\0\1\10" + "\1\14\1\10\1\14\5\0\7\6\2\0\26\6\1\0" + "\1\3\16\6\1\0\10\6\1\0\4\6\1\0\2\6" + "\1\0\31\6\211\0\1\35\4\0\4\36\1\10\14\36" + "\1\10\3\36\1\10\1\0\1\10\1\37\2\0\1\40" + "\6\0\2\6\3\0\2\6\3\0\2\6\3\0\2\6" + "\1\0\1\6\4\0\3\6\1\0\1\6\1\41\11\6" + "\2\41\2\42\1\37\2\0\1\3\2\10\1\43\1\44" + "\1\45\5\44\36\0\4\6\1\3\2\6\1\3\17\6" + "\1\3\7\6\1\0\1\37\4\0\4\6\1\0\1\37" + "\2\0\4\46\1\10\17\46\1\10\22\6\1\0\3\36" + "\1\10\6\36\1\10\2\36\2\10\2\37\17\0\4\6" + "\2\0\4\6\1\3\4\6\1\42\2\6\2\0\10\6" + "\2\0\1\3\1\42\1\0\1\6\1\41\7\6\2\41" + "\4\6\1\37\2\0\1\10\1\37\7\0\14\6\1\0" + "\6\6\1\0\1\37\1\10\4\0\10\6\1\0\1\37" + "\1\10\2\0\6\6\1\3\15\6\1\3\10\6\1\0" + "\4\6\1\0\2\6\1\0\13\6\1\37\3\0\20\6" + "\2\42\2\6\1\0\1\36\2\10\2\0\2\6\1\0" + "\1\10\2\6\1\3\1\0\1\3\3\0\1\36\1\10" + "\2\0\2\47\3\0\2\14\4\0\1\14\1\0\1\47" + "\1\14\2\45\6\6\2\0\2\6\3\0\14\6\1\0" + "\3\50\2\0\1\6\1\0\4\6\1\3\15\6\1\0" + "\1\50\10\6\1\0\3\50\10\6\1\0\1\50\35\6" + "\1\0\1\50\1\0\1\6\1\0\1\50\7\6\1\36" + "\1\10\2\0\1\47\1\0\2\14\4\0\1\14\2\0" + "\2\47\1\14\11\0\2\45\1\14\4\0\2\36\1\0" + "\6\36\1\0\4\6\1\0\1\6\2\0\1\15\10\6" + "\1\0\13\6\2\35\5\0\6\6\1\0\1\50\3\6" + "\2\33\2\0\2\6\2\33\1\0\1\50\14\6\1\45" + "\6\0\4\6\7\0\1\51\1\0\4\36\1\10\14\36" + "\1\10\3\36\1\10\1\0\1\10\1\40\5\0\2\6" + "\1\0\2\6\2\0\4\6\1\0\1\6\4\0\3\6" + "\2\0\13\6\1\0\2\6\1\0\15\6\2\0\13\6" + "\1\0\2\6\2\42\7\0\4\6\1\3\2\6\1\3" + "\17\6\1\3\7\6\2\0\4\6\4\46\1\10\17\46" + "\1\10\23\6\1\36\1\0\2\36\1\10\6\36\1\10" + "\1\0\2\36\2\10\5\0\4\6\1\0\4\6\1\3" + "\4\6\1\42\2\6\2\0\1\6\1\0\12\6\1\0" + "\1\3\1\42\2\0\13\6\1\0\30\6\1\0\6\6" + "\2\0\4\6\1\0\12\6\1\0\6\6\2\0\11\6" + "\1\0\1\6\1\0\6\6\1\3\2\6\1\0\13\6" + "\1\3\1\0\16\6\1\0\13\6\2\0\20\6\2\42" + "\2\6\1\36\1\10\3\0\2\6\1\0\2\6\1\36" + "\1\10\1\0\2\47\3\0\2\14\5\0\2\14\21\0" + "\1\14\1\0\6\6\1\0\2\6\2\0\14\6\3\0" + "\2\50\2\0\1\6\1\0\2\6\1\0\3\6\1\0" + "\2\6\1\3\15\6\1\0\1\50\11\6\1\0\1\50" + "\11\6\1\0\1\50\35\6\1\0\1\50\1\0\1\6" + "\1\0\1\50\7\6\1\36\1\10\2\0\1\47\3\0" + "\2\14\4\0\1\14\3\0\2\14\44\0\1\14\4\0" + "\2\36\1\0\6\36\1\0\4\6\1\0\1\6\2\0" + "\1\15\10\6\1\0\13\6\1\35\2\6\2\0\6\6" + "\1\0\1\50\3\6\2\0\2\6\1\0\1\50\20\6" + "\3\0\1\52\1\0\4\36\1\10\14\36\1\10\3\36" + "\1\10\1\0\1\10\1\40\5\0\2\6\1\0\2\6" + "\2\0\4\6\1\0\1\6\4\0\2\6\1\0\1\6" + "\1\0\13\6\1\0\2\6\1\0\15\6\2\0\13\6" + "\1\0\2\6\2\42\7\0\4\6\1\3\2\6\1\3" + "\17\6\1\3\7\6\2\0\4\6\4\46\1\10\17\46" + "\1\10\23\6\1\36\1\0\2\36\1\10\6\36\1\10" + "\1\0\2\36\2\10\5\0\4\6\1\0\4\6\1\3" + "\4\6\1\42\2\6\2\0\1\6\1\0\12\6\1\0" + "\1\3\1\42\2\0\13\6\1\0\30\6\1\0\6\6" + "\2\0\4\6\1\0\12\6\1\0\6\6\2\0\11\6" + "\1\0\1\6\1\0\6\6\1\3\2\6\1\0\13\6" + "\1\3\1\0\16\6\1\0\13\6\2\0\20\6\2\42" + "\2\6\1\36\1\10\3\0\2\6\1\0\2\6\1\36" + "\1\10\1\0\2\47\3\0\2\14\5\0\2\14\21\0" + "\1\14\1\0\6\6\1\0\2\6\2\0\14\6\3\0" + "\2\50\2\0\1\6\1\0\2\6\1\0\3\6\1\0" + "\2\6\1\3\15\6\1\0\1\50\11\6\1\0\1\50" + "\11\6\1\0\1\50\35\6\1\0\1\50\1\0\1\6" + "\1\0\1\50\7\6\1\36\1\10\2\0\1\47\3\0" + "\2\14\4\0\1\14\3\0\2\14\44\0\1\14\4\0" + "\2\36\1\0\6\36\1\0\4\6\1\0\1\6\2\0" + "\1\15\10\6\1\0\13\6\1\35\2\6\2\0\6\6" + "\1\0\1\50\3\6\2\0\2\6\1\0\1\50\20\6" + "\235\0\2\36\1\0\1\36\1\0\1\10\3\36\1\0" + "\2\36\3\0\1\36\1\10\3\36\1\0\1\10\3\36" + "\2\10\10\6\13\0\3\10\2\0\1\10\10\6\1\53" + "\2\0\1\53\2\6\3\36\1\0\12\36\1\0\3\36" + "\1\0\10\6\3\0\1\54\1\10\2\0\2\55\1\0" + "\1\13\15\0\1\2\2\0\1\12\2\36\10\6\1\37" + "\2\0\1\42\6\6\1\42\1\37\1\0\2\46\1\0" + "\1\46\1\10\3\46\1\0\2\46\2\0\4\46\1\0" + "\3\46\1\10\10\6\2\0\1\36\3\0\1\10\1\0" + "\2\36\1\0\1\36\1\0\2\36\1\10\14\0\2\50" + "\1\10\1\37\2\10\2\0\1\10\10\6\2\50\2\6" + "\1\0\24\6\2\42\6\0\4\50\6\6\1\45\2\0" + "\34\56\2\0\2\45\6\6\1\0\1\50\1\6\1\10" + "\6\6\2\36\1\0\2\3\2\6\4\0\4\6\3\0" + "\3\6\1\0\11\6\5\0\1\36\1\10\2\0\2\6" + "\12\0\1\36\1\10\4\0\2\47\1\0\1\36\2\0" + "\2\14\1\0\2\47\1\10\1\36\1\0\6\6\4\0" + "\5\50\1\0\1\50\1\0\1\50\6\6\1\50\4\6" + "\2\0\1\50\2\6\1\50\2\56\3\6\1\0\2\6" + "\1\0\4\6\1\50\1\0\2\50\2\6\2\0\1\36" + "\1\10\2\0\1\47\1\0\2\14\2\0\1\14\1\0" + "\2\47\11\0\1\14\1\0\1\23\1\36\1\0\5\36" + "\7\0\1\6\2\0\2\6\11\46\3\6\1\0\2\50" + "\2\0\4\6\1\0\1\50\2\6\2\0\2\6\1\50" + "\1\6\3\0\1\10\1\0\2\6\5\0\2\36\1\0" + "\1\36\1\0\1\10\3\36\1\0\2\36\3\0\1\36" + "\1\10\3\36\1\0\1\10\3\36\2\10\44\6\12\0" + "\40\6\1\0\2\6\2\0\4\6\3\36\1\0\12\36" + "\1\0\3\36\20\0\14\6\2\33\2\6\1\33\32\6" + "\16\0\2\6\2\0\10\6\1\0\2\6\4\0\1\6" + "\2\0\7\6\1\41\4\6\1\0\2\6\1\0\15\6" + "\2\0\1\6\1\0\12\6\1\0\2\6\1\41\1\0" + "\1\41\1\0\3\6\2\0\1\6\6\0\2\36\10\6" + "\1\42\6\6\1\42\1\0\2\46\1\0\1\46\1\10" + "\3\46\1\0\2\46\2\0\4\46\1\0\3\46\1\10" + "\10\6\1\0\1\36\2\0\1\10\1\0\2\36\1\0" + "\1\36\1\0\1\36\1\0\1\36\1\10\11\0\41\6" + "\1\0\4\6\3\0\1\6\1\0\7\6\1\41\4\6" + "\1\0\17\6\1\0\1\6\1\0\12\6\1\0\2\6" + "\2\41\2\6\3\0\15\6\1\0\3\6\2\0\3\6" + "\1\0\15\6\2\33\2\6\2\33\25\6\1\0\5\6" + "\1\33\12\6\1\0\4\6\2\42\2\6\2\0\4\6" + "\17\56\4\0\1\57\3\0\1\57\1\0\1\57\3\0" + "\1\57\6\6\2\0\1\50\7\6\2\36\1\0\2\3" + "\6\6\1\0\3\6\1\0\11\6\4\0\1\36\1\10" + "\2\0\2\6\2\0\1\36\1\10\3\0\2\47\23\0" + "\1\36\2\0\2\14\2\0\1\14\11\0\1\33\16\0" + "\1\36\6\6\2\60\3\50\2\6\1\0\1\50\1\0" + "\1\50\12\6\1\0\2\6\1\56\3\6\1\0\2\6" + "\1\0\4\6\1\0\1\50\2\6\2\0\1\36\1\10" + "\2\0\1\47\53\0\2\14\3\0\1\14\2\0\2\14" + "\20\0\1\33\31\0\1\33\14\0\1\36\1\0\5\36" + "\3\0\1\6\2\0\1\15\4\6\11\46\15\6\2\0" + "\2\6\3\0\2\36\1\0\1\36\1\0\1\10\3\36" + "\1\0\2\36\3\0\1\36\1\10\3\36\1\0\1\10" + "\3\36\2\10\44\6\12\0\40\6\1\0\2\6\2\0" + "\4\6\3\36\1\0\12\36\1\0\3\36\20\0\14\6" + "\3\61\2\6\1\61\32\6\16\0\2\6\2\0\10\6" + "\1\0\2\6\5\0\1\6\1\0\7\6\1\41\4\6" + "\1\0\2\6\2\0\15\6\2\0\1\6\1\0\12\6" + "\1\0\2\6\1\41\1\0\1\41\1\0\3\6\2\0" + "\1\6\6\0\2\36\10\6\1\42\6\6\1\42\1\0" + "\2\46\1\0\1\46\1\10\3\46\1\0\2\46\2\0" + "\4\46\1\0\3\46\1\10\10\6\1\0\1\36\2\0" + "\1\10\1\0\2\36\1\0\1\36\1\0\1\36\1\0" + "\1\36\1\10\11\0\41\6\1\0\4\6\3\0\1\6" + "\1\0\7\6\1\41\4\6\1\0\17\6\1\0\1\6" + "\1\0\12\6\1\0\2\6\2\41\2\6\3\0\15\6" + "\1\0\3\6\2\0\3\6\1\0\15\6\2\61\1\6" + "\2\61\1\6\2\61\25\6\1\0\5\6\1\61\12\6" + "\1\0\4\6\2\42\2\6\2\0\4\6\17\56\3\0" + "\1\62\2\0\1\62\1\0\1\62\2\0\1\62\6\6" + "\5\0\1\50\1\0\7\6\2\36\1\0\2\3\6\6" + "\1\0\3\6\1\0\11\6\4\0\1\36\1\10\1\0" + "\2\6\2\0\1\36\1\10\3\0\2\47\23\0\1\36" + "\2\0\2\14\2\0\1\14\10\0\1\61\1\0\1\61" + "\16\0\1\36\6\6\2\63\3\50\2\6\1\0\1\50" + "\1\0\1\50\12\6\1\0\2\6\1\56\3\6\1\0" + "\2\6\1\0\4\6\1\0\1\50\2\6\2\0\1\36" + "\1\10\2\0\1\47\53\0\2\14\3\0\1\14\2\0" + "\2\14\20\0\1\61\31\0\1\61\14\0\1\36\1\0" + "\5\36\3\0\1\6\2\0\1\15\4\6\11\46\15\6" + "\2\0\2\6\154\0\2\64\11\0\12\36\1\0\1\65" + "\1\10\1\36\1\0\1\10\1\36\1\10\1\36\2\0" + "\14\36\1\10\2\36\1\0\3\36\2\10\2\40\12\0" + "\10\6\2\0\2\36\1\0\5\36\1\0\1\36\1\0" + "\3\36\1\0\3\36\2\0\2\6\2\0\1\66\17\0" + "\1\46\4\6\2\0\3\6\2\66\3\6\12\46\1\0" + "\1\46\1\10\2\46\2\0\5\46\1\0\2\46\1\0" + "\6\46\1\0\2\46\1\10\1\50\2\6\1\36\1\0" + "\1\65\2\0\1\10\1\36\2\0\1\36\1\0\1\36" + "\1\10\16\0\10\6\2\0\3\46\1\10\10\46\1\10" + "\2\6\1\0\2\3\2\6\11\0\2\6\1\0\3\6" + "\1\0\1\6\2\0\1\46\1\0\2\54\1\36\4\0" + "\4\6\7\0\1\46\16\0\1\36\1\10\1\47\1\36" + "\1\10\2\0\1\40\2\47\1\36\1\0\1\36\1\10" + "\1\0\2\14\1\47\1\0\2\54\3\0\1\50\1\67" + "\7\50\1\6\1\50\1\6\1\66\1\0\1\50\2\6" + "\1\50\1\54\2\6\1\0\4\50\1\36\1\10\1\47" + "\1\36\1\10\1\0\1\47\1\36\1\10\3\14\1\0" + "\1\47\2\64\1\0\1\14\3\0\1\36\1\0\2\36" + "\1\0\1\36\1\0\1\53\2\0\1\53\1\15\2\6" + "\6\46\1\6\7\0\4\6\1\0\1\50\2\6\2\0" + "\2\6\1\50\1\6\2\0\1\6\1\0\2\6\1\41" + "\2\6\1\0\1\6\4\0\2\6\4\0\12\36\21\0" + "\1\10\1\36\1\0\1\10\1\36\1\10\1\36\2\0" + "\14\36\1\10\2\36\1\0\3\36\2\10\2\33\2\40" + "\6\0\12\6\1\33\22\6\1\33\10\6\2\36\1\0" + "\5\36\1\0\1\36\1\0\3\36\1\0\3\36\12\0" + "\1\70\25\0\10\6\5\0\1\70\54\0\2\6\43\71" + "\1\72\7\71\3\72\12\71\6\0\1\46\44\6\1\0" + "\5\6\2\66\5\6\12\46\21\0\1\46\1\10\2\46" + "\2\0\5\46\1\0\2\46\1\0\6\46\1\0\2\46" + "\1\10\1\50\2\6\1\36\22\0\1\10\2\0\1\36" + "\2\0\1\36\1\0\1\36\1\10\6\0\14\6\1\33" + "\22\6\1\33\10\6\3\46\1\10\10\46\1\10\41\71" + "\2\6\7\0\1\3\1\0\3\57\1\3\1\0\1\57" + "\2\71\12\6\1\0\40\6\1\0\6\6\7\0\4\6" + "\1\57\1\46\4\57\2\54\1\36\2\0\4\6\2\0" + "\1\71\1\72\1\71\1\72\2\71\1\46\2\0\1\36" + "\1\10\1\47\1\36\1\10\1\0\1\40\2\47\10\0" + "\1\33\11\0\2\36\1\10\2\47\1\0\2\14\5\0" + "\2\54\3\50\2\6\1\66\2\6\1\54\2\6\1\0" + "\1\50\1\36\1\10\1\47\1\36\1\10\1\0\1\47" + "\20\0\1\33\22\0\1\33\10\0\1\36\1\10\1\47" + "\2\14\1\0\1\14\4\0\2\64\4\0\1\36\1\0" + "\2\36\1\0\1\36\3\0\1\15\2\6\2\42\6\46" + "\13\6\1\0\13\6\1\0\2\6\1\0\6\6\1\0" + "\5\6\2\0\12\36\21\0\1\10\1\36\1\0\1\10" + "\1\36\1\10\1\36\2\0\14\36\1\10\2\36\1\0" + "\3\36\2\10\3\61\2\40\6\0\12\6\1\61\22\6" + "\1\61\10\6\2\36\1\0\5\36\1\0\1\36\1\0" + "\3\36\1\0\3\36\12\0\1\73\3\0\1\73\22\0" + "\10\6\5\0\1\73\54\0\2\6\1\71\2\74\14\71" + "\4\74\10\71\6\0\1\46\44\6\1\0\5\6\2\66" + "\5\6\12\46\21\0\1\46\1\10\2\46\2\0\5\46" + "\1\0\2\46\1\0\6\46\1\0\2\46\1\10\1\50" + "\2\6\1\36\22\0\1\10\2\0\1\36\2\0\1\36" + "\1\0\1\36\1\10\6\0\14\6\1\61\22\6\1\61" + "\10\6\3\46\1\10\10\46\1\10\21\71\2\6\1\0" + "\1\3\1\0\3\62\1\3\1\0\1\62\2\71\12\6" + "\1\0\40\6\1\0\6\6\1\0\4\6\1\62\1\46" + "\4\62\2\54\1\36\2\0\4\6\2\0\2\74\1\46" + "\1\36\1\10\1\47\1\36\1\10\1\0\1\40\2\47" + "\10\0\1\61\11\0\2\36\1\10\2\47\1\0\2\14" + "\5\0\2\54\3\50\2\6\1\66\2\6\1\54\2\6" + "\1\0\1\50\1\36\1\10\1\47\1\36\1\10\1\0" + "\1\47\20\0\1\61\22\0\1\61\10\0\1\36\1\10" + "\1\47\2\14\1\0\1\14\4\0\2\64\4\0\1\36" + "\1\0\2\36\1\0\1\36\3\0\1\15\2\6\2\42" + "\6\46\13\6\1\0\13\6\1\0\2\6\1\0\6\6" + "\1\0\5\6\70\0\2\64\10\36\1\0\1\10\1\0" + "\12\36\1\10\14\0\2\6\2\0\1\36\1\0\1\36" + "\1\0\1\36\1\0\4\36\1\0\2\36\1\0\2\36" + "\11\0\1\10\1\7\2\46\1\36\2\0\4\6\11\46" + "\1\10\1\0\5\46\1\0\5\46\1\0\1\10\1\36" + "\1\0\1\10\1\0\3\36\1\10\15\0\2\6\1\46" + "\1\0\1\10\2\46\1\0\1\46\1\0\1\46\1\0" + "\1\46\1\10\2\6\1\36\1\10\4\0\1\10\6\0" + "\1\36\2\0\2\66\2\0\1\37\10\0\1\10\16\0" + "\3\75\1\36\1\10\1\0\1\75\2\47\1\0\1\36" + "\1\0\1\36\1\10\1\36\3\0\7\50\1\6\1\0" + "\1\50\1\66\4\50\3\75\1\36\1\10\1\47\1\36" + "\1\10\1\0\1\47\3\0\1\23\1\0\2\36\3\0" + "\3\46\1\0\1\46\5\0\2\6\1\0\1\50\1\6" + "\2\0\1\50\1\0\3\36\1\0\13\36\1\0\3\36" + "\6\0\3\6\1\0\1\6\1\0\1\3\1\0\2\6" + "\4\0\10\36\1\33\1\10\1\0\12\36\1\10\10\0" + "\12\6\1\36\1\0\1\36\1\0\1\36\1\0\4\36" + "\1\0\2\36\1\0\2\36\25\0\4\6\27\0\1\33" + "\31\0\2\46\1\36\1\71\4\6\10\46\1\33\1\46" + "\1\10\1\0\5\46\1\0\5\46\1\0\1\10\1\36" + "\1\33\1\10\1\0\3\36\1\10\6\0\12\6\1\46" + "\1\0\1\10\2\46\1\0\1\46\1\0\1\46\1\0" + "\1\46\1\10\2\6\6\0\1\36\1\57\1\0\4\6" + "\1\10\1\71\6\0\1\10\2\0\1\36\2\66\1\10" + "\2\0\3\75\1\36\1\10\1\75\2\47\10\0\2\36" + "\1\10\2\47\1\36\4\0\3\50\1\6\1\66\3\75" + "\1\36\1\10\1\47\12\0\2\64\4\0\1\36\1\10" + "\1\47\5\0\2\36\4\0\1\57\3\0\1\57\1\0" + "\1\57\2\0\1\57\3\46\1\0\1\46\3\6\5\0" + "\6\6\1\0\1\33\1\6\3\33\13\6\2\0\3\6" + "\1\0\4\6\1\0\3\6\3\0\10\36\1\61\1\10" + "\1\0\12\36\1\10\10\0\12\6\1\36\1\0\1\36" + "\1\0\1\36\1\0\4\36\1\0\2\36\1\0\2\36" + "\25\0\4\6\27\0\1\61\32\0\2\46\1\36\1\71" + "\4\6\10\46\1\61\1\46\1\10\1\0\5\46\1\0" + "\5\46\1\0\1\10\1\36\1\61\1\10\1\0\3\36" + "\1\10\6\0\12\6\1\46\1\0\1\10\2\46\1\0" + "\1\46\1\0\1\46\1\0\1\46\1\10\2\6\1\36" + "\1\62\1\0\4\6\1\10\1\71\1\10\2\0\1\36" + "\2\66\1\10\3\75\1\36\1\10\1\75\2\47\10\0" + "\2\36\1\10\2\47\1\36\4\0\3\50\1\6\1\66" + "\3\75\1\36\1\10\1\47\12\0\2\64\4\0\1\36" + "\1\10\1\47\5\0\2\36\4\0\1\62\2\0\1\62" + "\1\0\1\62\1\0\1\62\3\46\1\0\1\46\3\6" + "\5\0\6\6\1\0\1\61\1\6\3\61\13\6\2\0" + "\3\6\1\0\4\6\1\0\3\6\43\0\3\36\1\0" + "\1\36\4\0\6\36\1\0\1\10\2\40\6\0\2\46" + "\1\0\3\36\5\0\1\10\1\0\1\10\1\0\5\46" + "\3\0\2\46\1\0\1\46\1\0\2\46\1\0\1\46" + "\1\0\1\10\4\0\1\36\1\0\1\10\4\0\1\46" + "\1\0\1\10\1\46\2\0\1\46\1\0\2\46\1\0" + "\6\46\1\0\1\46\1\10\4\6\15\0\4\76\10\0" + "\4\75\1\36\2\0\1\36\2\0\1\36\2\3\3\50" + "\1\0\2\50\3\75\3\0\1\36\3\0\2\46\1\0" + "\3\6\2\0\1\36\1\0\1\36\1\0\3\36\1\0" + "\2\36\2\0\1\36\1\0\3\36\1\0\3\36\2\0" + "\1\37\3\0\1\6\3\0\2\6\6\0\3\36\1\0" + "\1\36\1\0\6\36\1\0\1\10\2\40\2\0\2\46" + "\1\0\3\36\23\0\2\64\10\0\5\46\1\0\2\46" + "\1\0\1\46\1\0\2\46\1\0\1\46\1\0\1\10" + "\1\0\1\36\1\0\1\10\2\0\1\46\21\0\1\10" + "\1\46\2\0\1\46\1\0\2\46\1\0\6\46\1\0" + "\1\46\1\10\4\6\2\0\1\77\2\0\1\77\10\0" + "\2\77\7\0\4\75\1\0\1\36\1\0\1\36\1\0" + "\1\36\2\3\1\50\1\0\3\75\3\0\1\36\1\0" + "\1\15\1\0\2\46\3\6\3\36\1\0\13\36\1\0" + "\3\36\2\0\21\6\3\0\21\6\1\0\3\6\1\33" + "\1\6\44\0\1\6\2\0\3\36\1\0\1\36\1\0" + "\6\36\1\0\1\10\2\40\2\0\2\46\1\0\3\36" + "\23\0\2\64\10\0\5\46\1\0\2\46\1\0\1\46" + "\1\0\2\46\1\0\1\46\1\0\1\10\1\0\1\36" + "\1\0\1\10\2\0\1\46\21\0\1\10\1\46\2\0" + "\1\46\1\0\2\46\1\0\6\46\1\0\1\46\1\10" + "\4\6\11\0\4\75\1\0\1\36\1\0\1\36\1\0" + "\1\36\2\3\1\50\1\0\3\75\3\0\1\36\1\0" + "\1\15\1\0\1\74\2\46\3\6\3\36\1\0\13\36" + "\1\0\3\36\2\0\21\6\3\0\21\6\1\0\3\6" + "\1\61\1\6\44\0\1\6\27\0\1\64\1\0\2\36" + "\1\0\1\10\1\0\2\36\1\10\1\36\2\0\1\46" + "\1\0\1\46\1\36\1\0\2\36\1\0\3\64\1\3" + "\3\0\1\46\1\10\1\0\2\46\2\0\2\46\2\0" + "\1\10\1\0\1\36\1\0\1\46\1\10\1\0\4\46" + "\1\0\5\46\1\0\1\10\4\6\10\0\2\3\11\0" + "\5\75\1\36\1\0\1\36\1\0\1\36\2\0\2\50" + "\3\75\6\0\1\46\1\3\1\64\2\36\1\0\1\65" + "\1\0\1\36\1\0\1\36\1\0\1\36\2\0\3\36" + "\1\0\2\36\1\0\2\36\3\0\1\6\3\0\1\6" + "\2\64\1\3\2\0\2\36\1\10\1\36\1\10\1\36" + "\2\0\1\46\1\0\1\46\1\36\1\0\2\36\7\0" + "\3\64\1\0\1\64\12\0\1\46\1\10\1\46\2\0" + "\2\46\1\0\1\10\1\0\1\46\1\33\1\10\1\0" + "\4\46\1\0\5\46\1\0\1\10\4\6\7\0\3\64" + "\1\0\1\64\6\0\2\3\7\0\5\75\3\36\2\0" + "\1\50\3\75\4\0\1\46\1\0\1\36\1\0\1\36" + "\1\0\3\36\1\0\2\36\2\0\1\36\1\0\3\36" + "\1\0\3\36\2\0\23\6\3\0\22\6\1\0\3\6" + "\3\0\6\64\1\0\1\64\1\33\1\64\1\0\7\64" + "\1\0\13\64\1\33\14\64\2\36\1\10\1\36\1\10" + "\1\36\2\0\1\46\1\0\1\46\1\36\1\0\2\36" + "\7\0\3\64\1\0\1\64\12\0\1\46\1\10\1\46" + "\2\0\2\46\1\0\1\10\1\0\1\46\1\61\1\10" + "\1\0\4\46\1\0\5\46\1\0\1\10\4\6\3\0" + "\3\64\1\0\1\64\2\0\2\3\5\0\5\75\3\36" + "\2\0\1\50\3\75\4\0\1\46\1\0\1\36\1\0" + "\1\36\1\0\3\36\1\0\2\36\2\0\1\36\1\0" + "\3\36\1\0\3\36\2\0\23\6\3\0\22\6\1\0" + "\3\6\3\0\6\64\1\0\1\64\1\61\1\64\1\0" + "\7\64\1\0\13\64\1\61\14\64\14\0\1\36\3\0" + "\1\36\1\10\2\36\1\40\1\0\1\36\3\0\1\46" + "\3\0\2\46\1\0\1\46\4\0\1\36\3\0\1\46" + "\1\0\1\46\1\0\2\46\1\0\1\46\1\0\2\10" + "\1\0\1\10\1\0\2\3\4\64\1\3\1\0\1\3" + "\1\0\1\36\1\75\1\36\1\0\2\100\2\36\1\50" + "\3\0\1\3\1\64\1\36\2\46\2\0\4\36\2\0" + "\1\6\3\0\1\6\3\64\1\0\1\36\1\0\1\36" + "\1\10\2\36\1\40\1\0\1\36\4\0\24\64\4\0" + "\1\46\1\0\2\46\1\0\1\46\2\0\1\36\1\0" + "\1\46\1\0\1\46\1\0\2\46\1\0\1\46\1\0" + "\1\10\2\0\2\3\24\64\3\3\1\0\1\3\1\0" + "\1\36\2\0\1\75\1\36\1\100\2\36\1\0\1\101" + "\2\36\22\0\1\36\1\0\1\36\1\0\1\36\2\0" + "\3\36\1\0\2\36\1\0\2\36\2\0\7\6\3\0" + "\7\6\3\0\16\64\1\36\1\0\1\36\1\10\2\36" + "\1\40\1\0\1\36\4\0\24\64\4\0\1\46\1\0" + "\2\46\1\0\1\46\2\0\1\36\1\0\1\46\1\0" + "\1\46\1\0\2\46\1\0\1\46\1\0\1\10\2\0" + "\2\3\24\64\3\3\1\0\1\3\1\0\1\36\1\75" + "\1\36\1\100\2\36\1\0\1\102\2\36\22\0\1\36" + "\1\0\1\36\1\0\1\36\2\0\3\36\1\0\2\36" + "\1\0\2\36\2\0\7\6\3\0\7\6\3\0\16\64" + "\16\0\1\46\1\0\1\36\7\0\1\46\5\0\1\10" + "\1\0\1\46\2\0\2\46\6\0\1\75\4\100\2\36" + "\1\50\1\0\1\64\1\46\2\0\1\46\1\36\3\0" + "\2\36\4\0\1\6\3\64\1\3\2\0\1\46\1\0" + "\1\36\3\0\5\64\1\33\1\64\1\33\17\64\4\0" + "\1\46\2\0\1\10\2\0\2\46\3\0\5\64\1\33" + "\1\64\1\33\17\64\5\0\1\75\2\100\3\36\1\33" + "\2\46\2\0\4\36\1\0\2\6\1\0\3\6\3\0" + "\2\64\1\0\4\64\1\0\1\46\1\0\1\36\3\0" + "\5\64\1\61\1\64\1\61\17\64\4\0\1\46\2\0" + "\1\10\2\0\2\46\3\0\5\64\1\61\1\64\1\61" + "\17\64\3\0\1\75\2\100\3\36\1\61\2\46\2\0" + "\4\36\1\0\2\6\1\0\3\6\3\0\2\64\1\0" + "\4\64\6\0\1\36\2\0\1\36\1\46\1\36\2\0" + "\1\46\2\0\2\46\1\0\1\36\2\0\1\36\3\0" + "\1\46\1\0\1\46\4\0\2\36\4\100\2\36\1\50" + "\3\0\2\36\2\0\1\64\1\36\1\46\1\36\1\0" + "\7\64\2\0\2\46\1\0\1\36\1\0\1\46\1\0" + "\1\46\1\0\7\64\1\0\1\36\2\0\1\36\2\100" + "\2\36\1\46\2\0\1\46\1\36\1\0\2\36\3\0" + "\1\36\1\46\1\36\1\0\7\64\2\0\2\46\1\0" + "\1\36\1\0\1\46\1\0\1\46\1\0\7\64\1\0" + "\2\36\2\100\2\36\1\46\2\0\1\46\1\36\1\0" + "\2\36\20\0\1\36\4\100\1\36\4\0\1\36\1\0" + "\1\36\1\0\2\64\3\0\2\64\1\36\2\100\1\36" + "\1\0\1\36\3\0\2\64\3\0\2\64\1\36\2\100" + "\1\36\1\0\1\36\5\0\1\46\2\0\1\46\3\0" + "\1\36\10\0\1\46\1\0\1\36\1\0\1\36\1\0" + "\1\36\2\0\1\46\1\0\1\36\1\0\1\36\1\0" + "\1\36\2\0\1\36\2\0\1\36\10\0\2\36\4\0" + "\1\3";

	private static int[] zzUnpackAction() {
		int[] result = new int[12131];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\205\0\u010a\0\u018f\0\u0214\0\u0299\0\u031e\0\u03a3" + "\0\u0428\0\u04ad\0\u0532\0\u05b7\0\u063c\0\u06c1\0\u0746\0\u07cb" + "\0\u0850\0\u08d5\0\u095a\0\u09df\0\u0a64\0\u0ae9\0\u0b6e\0\u0bf3" + "\0\u0c78\0\u0cfd\0\u0d82\0\u0e07\0\u0e8c\0\u0f11\0\u0f96\0\u101b" + "\0\u10a0\0\u1125\0\u11aa\0\u122f\0\u12b4\0\u0f96\0\u1339\0\u13be" + "\0\u1443\0\u14c8\0\u154d\0\u15d2\0\u1657\0\u16dc\0\u1761\0\u17e6" + "\0\u0d82\0\u186b\0\u18f0\0\u1975\0\u19fa\0\u1a7f\0\u1b04\0\u1b89" + "\0\u1c0e\0\u1c93\0\u1d18\0\u1d9d\0\u1e22\0\u1ea7\0\u1f2c\0\u1fb1" + "\0\u2036\0\u0d82\0\u0d82\0\u20bb\0\u2140\0\u21c5\0\u224a\0\u22cf" + "\0\u2354\0\u23d9\0\u245e\0\u24e3\0\u2568\0\u25ed\0\u2672\0\u26f7" + "\0\u277c\0\u2801\0\u2886\0\u290b\0\u2990\0\u2a15\0\u2a9a\0\u2b1f" + "\0\u2ba4\0\u2c29\0\u2cae\0\u2d33\0\u2db8\0\u2e3d\0\u0d82\0\u0d82" + "\0\u0f96\0\u0d82\0\u2ec2\0\u2f47\0\u2fcc\0\u3051\0\u30d6\0\u315b" + "\0\u31e0\0\u3265\0\u32ea\0\u336f\0\u33f4\0\u3479\0\u34fe\0\u3583" + "\0\u3608\0\u368d\0\u3712\0\u3797\0\u381c\0\u38a1\0\u3926\0\u39ab" + "\0\u3a30\0\u0f96\0\u3ab5\0\u3b3a\0\u3bbf\0\u3c44\0\u3cc9\0\u3d4e" + "\0\u3dd3\0\u0f96\0\u3e58\0\u0f96\0\u0f96\0\u3edd\0\u0f96\0\u0d82" + "\0\u0d82\0\u0d82\0\u0d82\0\u3f62\0\u3fe7\0\u406c\0\u40f1\0\u4176" + "\0\u41fb\0\u4280\0\u4305\0\u438a\0\u440f\0\u4494\0\u4519\0\u459e" + "\0\u4623\0\u46a8\0\u472d\0\u47b2\0\u4837\0\u48bc\0\u4941\0\u49c6" + "\0\u4a4b\0\u4ad0\0\u4b55\0\u4bda\0\u4c5f\0\u4ce4\0\u4d69\0\u4dee" + "\0\u4e73\0\u4ef8\0\u4f7d\0\u5002\0\u5087\0\u510c\0\u5191\0\u5216" + "\0\u529b\0\u5320\0\u53a5\0\u542a\0\u54af\0\u5534\0\u55b9\0\u563e" + "\0\u56c3\0\u5748\0\u57cd\0\u5852\0\u58d7\0\u595c\0\u59e1\0\u5a66" + "\0\u5aeb\0\u5b70\0\u5bf5\0\u5c7a\0\u5cff\0\u5d84\0\u5e09\0\u5e8e" + "\0\u5f13\0\u5f98\0\u601d\0\u60a2\0\u6127\0\u61ac\0\u6231\0\u62b6" + "\0\u633b\0\u63c0\0\u6445\0\u64ca\0\u654f\0\u65d4\0\u6659\0\u66de" + "\0\u6763\0\u67e8\0\u686d\0\u68f2\0\u6977\0\u69fc\0\u6a81\0\u6b06" + "\0\u6b8b\0\u6c10\0\u6c95\0\u6d1a\0\u6d9f\0\u6e24\0\u6ea9\0\u6f2e" + "\0\u6fb3\0\u7038\0\u70bd\0\u7142\0\u71c7\0\u724c\0\u72d1\0\u7356" + "\0\u73db\0\u7460\0\u74e5\0\u756a\0\u75ef\0\u7674\0\u76f9\0\u777e" + "\0\u7803\0\u7888\0\u790d\0\u7992\0\u7a17\0\u7a9c\0\u7b21\0\u7ba6" + "\0\u7c2b\0\u7cb0\0\u7d35\0\u7dba\0\u7e3f\0\u7ec4\0\u7f49\0\u7fce" + "\0\u8053\0\u80d8\0\u815d\0\u81e2\0\u8267\0\u82ec\0\u8371\0\u83f6" + "\0\u847b\0\u8500\0\u8585\0\u860a\0\u868f\0\u8714\0\u8799\0\u881e" + "\0\u88a3\0\u8928\0\u89ad\0\u8a32\0\u8ab7\0\u8b3c\0\u8bc1\0\u8c46" + "\0\u8ccb\0\u8d50\0\u8dd5\0\u8e5a\0\u8edf\0\u8f64\0\u8fe9\0\u0850" + "\0\u906e\0\u90f3\0\u9178\0\u91fd\0\u9282\0\u9307\0\u938c\0\u9411" + "\0\u9496\0\u951b\0\u95a0\0\u9625\0\u96aa\0\u972f\0\u97b4\0\u9839" + "\0\u98be\0\u9943\0\u99c8\0\u9a4d\0\u9ad2\0\u9b57\0\u9bdc\0\u9c61" + "\0\u9ce6\0\u9d6b\0\u9df0\0\u9e75\0\u9efa\0\u9f7f\0\ua004\0\ua089" + "\0\ua10e\0\ua193\0\ua218\0\ua29d\0\ua322\0\ua3a7\0\ua42c\0\ua4b1" + "\0\ua536\0\ua5bb\0\ua640\0\ua6c5\0\u0f96\0\ua74a\0\ua7cf\0\ua854" + "\0\ua8d9\0\u0f96\0\ua95e\0\ua9e3\0\uaa68\0\uaaed\0\uab72\0\uabf7" + "\0\u0d82\0\uac7c\0\uad01\0\uad86\0\u17e6\0\uae0b\0\uae90\0\uaf15" + "\0\uaf9a\0\u39ab\0\ub01f\0\ub0a4\0\ub129\0\u0f96\0\ub1ae\0\ub233" + "\0\u0f96\0\ub2b8\0\ub33d\0\ub3c2\0\ub447\0\ub4cc\0\ub551\0\ub5d6" + "\0\ub65b\0\ub6e0\0\ub01f\0\ub765\0\ub01f\0\ub7ea\0\ub86f\0\ub8f4" + "\0\ub979\0\ub9fe\0\uba83\0\u0d82\0\ubb08\0\ubb8d\0\ubc12\0\ubc97" + "\0\ubd1c\0\ubda1\0\ube26\0\ubeab\0\ubf30\0\ubfb5\0\uc03a\0\uc0bf" + "\0\uc144\0\uc1c9\0\u0f96\0\uc24e\0\uc2d3\0\uc358\0\uc3dd\0\uc462" + "\0\uc4e7\0\uc56c\0\uc5f1\0\uc676\0\u0f96\0\uc6fb\0\uc780\0\uc805" + "\0\uc88a\0\uc90f\0\uc994\0\uca19\0\uca9e\0\ucb23\0\ucba8\0\ucc2d" + "\0\uccb2\0\ucd37\0\ucdbc\0\uce41\0\ucec6\0\ucf4b\0\ucfd0\0\ud055" + "\0\ud0da\0\ud15f\0\ud1e4\0\ud269\0\ud2ee\0\ud373\0\ud3f8\0\ud47d" + "\0\ud502\0\ud587\0\ud60c\0\ud691\0\ud716\0\ud79b\0\ud820\0\ud8a5" + "\0\ud92a\0\ud9af\0\uda34\0\udab9\0\udb3e\0\udbc3\0\udc48\0\udccd" + "\0\udd52\0\uddd7\0\ude5c\0\udee1\0\udf66\0\udfeb\0\ue070\0\ue0f5" + "\0\ue17a\0\ue1ff\0\ue284\0\ue309\0\ue38e\0\ue413\0\ue498\0\ue51d" + "\0\ue5a2\0\ue627\0\ue6ac\0\ue731\0\ue7b6\0\ue83b\0\ue8c0\0\ue945" + "\0\ue9ca\0\uea4f\0\uead4\0\ueb59\0\uebde\0\uec63\0\uece8\0\ued6d" + "\0\uedf2\0\uee77\0\ueefc\0\uef81\0\uf006\0\uf08b\0\uf110\0\uf195" + "\0\uf21a\0\uf29f\0\uf324\0\uf3a9\0\uf42e\0\uf4b3\0\uf538\0\uf5bd" + "\0\uf642\0\uf6c7\0\uf74c\0\uf7d1\0\uf856\0\uf8db\0\uf960\0\uf9e5" + "\0\ufa6a\0\ufaef\0\ufb74\0\ufbf9\0\ufc7e\0\ufd03\0\ufd88\0\ufe0d" + "\0\ufe92\0\uff17\0\uff9c\1\41\1\246\1\u012b\1\u01b0\1\u0235" + "\1\u02ba\1\u033f\1\u03c4\1\u0449\1\u04ce\1\u0553\1\u05d8\1\u065d" + "\1\u06e2\1\u0767\1\u07ec\1\u0871\1\u08f6\1\u097b\1\u0a00\1\u0a85" + "\1\u0b0a\1\u0b8f\1\u0c14\1\u0c99\1\u0d1e\1\u0da3\1\u0e28\1\u0ead" + "\1\u0f32\1\u0fb7\1\u103c\1\u10c1\1\u1146\1\u11cb\1\u1250\1\u12d5" + "\1\u135a\1\u13df\1\u1464\1\u14e9\1\u156e\1\u15f3\1\u1678\1\u16fd" + "\1\u1782\1\u1807\1\u188c\1\u1911\1\u1996\1\u1a1b\1\u1aa0\1\u1b25" + "\1\u1baa\1\u1c2f\1\u1cb4\1\u1d39\1\u1dbe\1\u1e43\1\u1ec8\1\u1f4d" + "\1\u1fd2\1\u2057\1\u20dc\1\u2161\1\u21e6\1\u226b\1\u22f0\1\u2375" + "\1\u23fa\1\u247f\1\u2504\1\u2589\1\u260e\1\u2693\1\u2718\1\u279d" + "\1\u2822\1\u28a7\1\u292c\1\u29b1\1\u2a36\1\u2abb\1\u2b40\1\u2bc5" + "\1\u2c4a\1\u2ccf\1\u2d54\1\u2dd9\1\u2e5e\1\u2ee3\1\u2f68\1\u2fed" + "\1\u3072\1\u30f7\1\u317c\1\u3201\1\u3286\1\u330b\1\u3390\1\u3415" + "\1\u349a\0\ub01f\1\u351f\1\u35a4\1\u3629\1\u36ae\1\u3733\1\u37b8" + "\1\u383d\1\u38c2\1\u3947\1\u39cc\1\u3a51\1\u3ad6\1\u3b5b\1\u3be0" + "\1\u3c65\1\u3cea\1\u3d6f\1\u3df4\1\u3e79\1\u3efe\1\u3f83\1\u4008" + "\1\u408d\1\u4112\1\u4197\1\u421c\1\u42a1\1\u4326\1\u43ab\1\u4430" + "\1\u44b5\1\u453a\1\u45bf\1\u4644\1\u46c9\1\u474e\1\u47d3\1\u4858" + "\1\u48dd\1\u4962\1\u49e7\1\u4a6c\1\u4af1\1\u4b76\1\u4bfb\1\u4c80" + "\1\u4d05\1\u4d8a\1\u4e0f\1\u4e94\1\u4f19\1\u4f9e\1\u5023\1\u50a8" + "\1\u512d\1\u51b2\1\u5237\1\u52bc\1\u5341\1\u53c6\1\u544b\1\u54d0" + "\1\u5555\1\u55da\0\ub0a4\1\u565f\1\u56e4\1\u5769\1\u57ee\1\u5873" + "\1\u58f8\1\u597d\1\u5a02\1\u5a87\1\u5b0c\0\uad01\0\uad01\1\u5b91" + "\1\u5c16\1\u5c9b\1\u5d20\1\u5da5\1\u5e2a\1\u5eaf\0\uad01\1\u5f34" + "\1\u5fb9\1\u603e\1\u60c3\1\u6148\1\u61cd\1\u6252\1\u62d7\1\u635c" + "\1\u63e1\1\u6466\1\u64eb\1\u6570\1\u65f5\1\u667a\1\u66ff\1\u6784" + "\1\u6809\1\u688e\1\u6913\1\u6998\1\u6a1d\1\u6aa2\1\u6b27\1\u6bac" + "\1\u6c31\1\u6cb6\1\u6d3b\1\u6dc0\1\u6e45\1\u6eca\1\u6f4f\1\u6fd4" + "\1\u7059\1\u70de\1\u7163\1\u71e8\1\u726d\1\u72f2\1\u7377\1\u73fc" + "\1\u7481\1\u7506\1\u758b\1\u7610\1\u7695\1\u771a\1\u779f\1\u7824" + "\1\u78a9\1\u792e\1\u79b3\1\u7a38\1\u7abd\1\u7b42\1\u7bc7\1\u7c4c" + "\1\u7cd1\1\u7d56\1\u7ddb\1\u7e60\1\u7ee5\1\u7f6a\1\u7fef\1\u8074" + "\1\u80f9\1\u817e\1\u8203\1\u8288\1\u830d\1\u8392\1\u8417\1\u849c" + "\1\u8521\1\u85a6\1\u862b\1\u86b0\1\u8735\1\u87ba\1\u883f\1\u88c4" + "\1\u8949\1\u89ce\1\u8a53\1\u8ad8\1\u8b5d\1\u8be2\1\u8c67\1\u8cec" + "\1\u8d71\1\u8df6\1\u8e7b\1\u8f00\1\u8f85\1\u900a\1\u908f\1\u9114" + "\1\u9199\1\u921e\1\u92a3\1\u9328\1\u93ad\1\u9432\1\u94b7\1\u953c" + "\1\u95c1\1\u9646\1\u96cb\1\u9750\1\u97d5\1\u985a\1\u98df\1\u9964" + "\1\u99e9\1\u9a6e\1\u9af3\1\u9b78\1\u9bfd\1\u9c82\1\u9d07\1\u9d8c" + "\1\u9e11\1\u9e96\1\u9f1b\1\u9fa0\1\ua025\1\ua0aa\0\u2b1f\1\ua12f" + "\1\ua1b4\1\ua239\1\ua2be\1\ua343\1\ua3c8\1\ua44d\1\ua4d2\1\ua557" + "\1\ua5dc\1\ua661\1\ua6e6\1\ua76b\1\ua7f0\1\ua875\1\ua8fa\1\ua97f" + "\1\uaa04\1\uaa89\1\uab0e\1\uab93\1\uac18\1\uac9d\1\uad22\1\uada7" + "\1\uae2c\1\uaeb1\1\uaf36\1\uafbb\1\ub040\1\ub0c5\1\ub14a\1\ub1cf" + "\1\ub254\1\ub2d9\1\ub35e\1\ub3e3\1\ub468\1\ub4ed\1\ub572\1\ub5f7" + "\1\ub67c\1\ub701\1\ub786\1\ub80b\1\ub890\1\ub915\1\ub99a\1\uba1f" + "\1\ubaa4\1\ubb29\1\ubbae\1\ubc33\1\ubcb8\1\ubd3d\1\ubdc2\1\ube47" + "\1\ubecc\0\ub2b8\1\ubf51\1\ubfd6\1\uc05b\1\uc0e0\1\uc165\1\uc1ea" + "\1\uc26f\1\uc2f4\1\uc379\0\ube26\1\u5a02\1\uc3fe\1\uc483\1\uc508" + "\1\uc58d\1\uc612\1\uc697\1\uc71c\1\uc7a1\1\uc826\1\uc8ab\1\uc930" + "\1\uc9b5\1\uca3a\1\ucabf\1\ucb44\1\ucbc9\1\ucc4e\1\uccd3\1\ucd58" + "\1\ucddd\1\uce62\1\ucee7\1\ucf6c\1\ucff1\1\ud076\1\ud0fb\1\ud180" + "\1\ud205\1\ud28a\1\ud30f\1\ud394\1\ud419\1\ud49e\1\ud523\1\ud5a8" + "\1\ud62d\1\ud6b2\1\ud737\1\ud7bc\1\ud841\1\ud8c6\1\ud94b\1\ud9d0" + "\1\uda55\0\u0d82\1\udada\1\udb5f\1\udbe4\1\udc69\1\udcee\1\udd73" + "\1\uddf8\1\ude7d\1\udf02\1\udf87\1\ue00c\1\ue091\1\ue116\1\ue19b" + "\1\ue220\1\ue2a5\1\ue32a\1\ue3af\1\ue434\1\ue4b9\1\ue53e\1\ue5c3" + "\1\ue648\1\ue6cd\1\ue752\1\ue7d7\1\ue85c\1\ue8e1\1\ue966\1\ue9eb" + "\1\uea70\1\ueaf5\1\ueb7a\1\uebff\1\uec84\1\ued09\1\ued8e\1\uee13" + "\1\uee98\1\uef1d\1\uefa2\1\uf027\1\uf0ac\1\uf131\1\uf1b6\1\uf23b" + "\1\uf2c0\1\uf345\1\uf3ca\1\uf44f\1\uf4d4\1\uf559\1\uf5de\1\uf663" + "\1\uf6e8\1\uf76d\1\uf7f2\1\uf877\1\uf8fc\1\uf981\1\ufa06\1\ufa8b" + "\1\ufb10\1\ufb95\1\ufc1a\1\ufc9f\1\ufd24\1\ufda9\1\ufe2e\1\ufeb3" + "\1\uff38\1\uffbd\2\102\2\307\2\u014c\2\u01d1\2\u0256\2\u02db" + "\2\u0360\2\u03e5\2\u046a\2\u04ef\2\u0574\2\u05f9\2\u067e\2\u0703" + "\2\u0788\2\u080d\2\u0892\2\u0917\2\u099c\2\u0a21\2\u0aa6\2\u0b2b" + "\2\u0bb0\2\u0c35\2\u0cba\2\u0d3f\2\u0dc4\2\u0e49\2\u0ece\2\u0f53" + "\2\u0fd8\2\u105d\2\u10e2\2\u1167\2\u11ec\2\u1271\2\u12f6\2\u137b" + "\2\u1400\2\u1485\2\u150a\2\u158f\2\u1614\2\u1699\2\u171e\2\u17a3" + "\2\u1828\2\u18ad\2\u1932\2\u19b7\2\u1a3c\2\u1ac1\2\u1b46\2\u1bcb" + "\2\u1c50\2\u1cd5\2\u1d5a\2\u1ddf\2\u1e64\2\u1ee9\2\u1f6e\2\u1ff3" + "\2\u2078\2\u20fd\2\u2182\2\u2207\2\u228c\2\u2311\2\u2396\2\u241b" + "\2\u24a0\2\u2525\2\u25aa\2\u262f\2\u26b4\2\u2739\2\u27be\2\u2843" + "\2\u28c8\2\u294d\2\u29d2\2\u2a57\2\u2adc\2\u2b61\2\u2be6\2\u2c6b" + "\2\u2cf0\2\u2d75\2\u2dfa\2\u2e7f\2\u2f04\2\u2f89\2\u300e\2\u3093" + "\2\u3118\2\u319d\2\u3222\2\u32a7\2\u332c\2\u33b1\2\u3436\2\u34bb" + "\2\u3540\2\u35c5\2\u364a\2\u36cf\2\u3754\2\u37d9\2\u385e\2\u38e3" + "\2\u3968\2\u39ed\2\u3a72\2\u3af7\2\u3b7c\2\u3c01\2\u3c86\2\u3d0b" + "\2\u3d90\2\u3e15\2\u3e9a\2\u3f1f\2\u3fa4\2\u4029\2\u40ae\2\u4133" + "\2\u41b8\2\u423d\2\u42c2\2\u4347\2\u43cc\2\u4451\2\u44d6\2\u455b" + "\2\u45e0\2\u4665\2\u46ea\2\u476f\2\u47f4\2\u4879\2\u48fe\2\u4983" + "\2\u4a08\2\u4a8d\2\u4b12\2\u4b97\2\u4c1c\2\u4ca1\2\u4d26\2\u4dab" + "\2\u4e30\2\u4eb5\2\u4f3a\2\u4fbf\2\u5044\2\u50c9\2\u514e\2\u51d3" + "\2\u5258\2\u52dd\2\u5362\2\u53e7\2\u546c\2\u54f1\2\u5576\2\u55fb" + "\2\u5680\2\u5705\2\u578a\2\u580f\2\u5894\2\u5919\2\u599e\2\u5a23" + "\2\u5aa8\2\u5b2d\2\u5bb2\2\u5c37\2\u5cbc\2\u5d41\2\u5dc6\2\u5e4b" + "\2\u5ed0\2\u5f55\2\u5fda\2\u605f\2\u60e4\2\u6169\2\u61ee\2\u6273" + "\2\u62f8\2\u637d\2\u6402\2\u6487\2\u650c\2\u6591\2\u6616\2\u669b" + "\2\u6720\2\u67a5\2\u682a\2\u68af\2\u6934\2\u69b9\2\u6a3e\2\u6ac3" + "\2\u6b48\2\u6bcd\2\u6c52\2\u6cd7\2\u6d5c\2\u6de1\2\u6e66\2\u6eeb" + "\2\u6f70\2\u6ff5\2\u707a\2\u70ff\2\u7184\2\u7209\2\u728e\2\u7313" + "\2\u7398\2\u741d\2\u74a2\2\u7527\2\u75ac\2\u7631\2\u76b6\2\u773b" + "\2\u77c0\2\u7845\2\u78ca\2\u794f\2\u79d4\2\u7a59\2\u7ade\2\u7b63" + "\2\u7be8\2\u7c6d\2\u7cf2\2\u7d77\2\u7dfc\2\u7e81\2\u7f06\2\u7f8b" + "\2\u8010\2\u8095\2\u811a\2\u819f\2\u8224\2\u82a9\2\u832e\2\u83b3" + "\2\u8438\2\u84bd\2\u8542\2\u85c7\2\u864c\2\u86d1\2\u8756\2\u87db" + "\2\u8860\2\u88e5\2\u896a\2\u89ef\2\u8a74\2\u8af9\2\u8b7e\2\u8c03" + "\2\u8c88\2\u8d0d\2\u8d92\2\u8e17\2\u8e9c\2\u8f21\2\u8fa6\2\u902b" + "\2\u90b0\2\u9135\2\u91ba\2\u923f\2\u92c4\2\u9349\2\u93ce\2\u9453" + "\2\u94d8\2\u955d\2\u95e2\2\u9667\2\u96ec\2\u9771\2\u97f6\2\u987b" + "\2\u9900\2\u9985\2\u9a0a\2\u9a8f\2\u9b14\2\u9b99\2\u9c1e\2\u9ca3" + "\2\u9d28\2\u9dad\2\u9e32\2\u9eb7\2\u9f3c\2\u9fc1\2\ua046\2\ua0cb" + "\2\ua150\2\ua1d5\2\ua25a\2\ua2df\2\ua364\2\ua3e9\2\ua46e\2\ua4f3" + "\2\ua578\2\ua5fd\2\ua682\2\ua707\2\ua78c\2\ua811\2\ua896\2\ua91b" + "\2\ua9a0\2\uaa25\2\uaaaa\2\uab2f\2\uabb4\2\uac39\2\uacbe\2\uad43" + "\2\uadc8\2\uae4d\2\uaed2\2\uaf57\2\uafdc\2\ub061\2\ub0e6\2\ub16b" + "\2\ub1f0\2\ub275\2\ub2fa\2\ub37f\2\ub404\2\ub489\2\ub50e\2\ub593" + "\2\ub618\2\ub69d\2\ub722\2\ub7a7\2\ub82c\2\ub8b1\2\ub936\2\ub9bb" + "\2\uba40\2\ubac5\2\ubb4a\2\ubbcf\2\ubc54\2\ubcd9\2\ubd5e\2\ubde3" + "\2\ube68\2\ubeed\2\ubf72\2\ubff7\2\uc07c\2\uc101\2\uc186\2\uc20b" + "\2\uc290\2\uc315\2\uc39a\2\uc41f\2\uc4a4\2\uc529\2\uc5ae\2\uc633" + "\2\uc6b8\2\uc73d\2\uc7c2\2\uc847\2\uc8cc\2\uc951\2\uc9d6\2\uca5b" + "\2\ucae0\2\ucb65\2\ucbea\2\ucc6f\2\uccf4\2\ucd79\2\ucdfe\2\uce83" + "\2\ucf08\2\ucf8d\2\ud012\2\ud097\2\ud11c\2\ud1a1\2\ud226\2\ud2ab" + "\2\ud330\2\ud3b5\2\ud43a\2\ud4bf\2\ud544\2\ud5c9\2\ud64e\2\ud6d3" + "\2\ud758\2\ud7dd\2\ud862\2\ud8e7\2\ud96c\2\ud9f1\2\uda76\2\udafb" + "\2\udb80\2\udc05\2\udc8a\2\udd0f\2\udd94\2\ude19\2\ude9e\2\udf23" + "\2\udfa8\2\ue02d\2\ue0b2\2\ue137\2\ue1bc\2\ue241\2\ue2c6\2\ue34b" + "\2\ue3d0\2\ue455\2\ue4da\2\ue55f\2\ue5e4\2\ue669\2\ue6ee\2\ue773" + "\2\ue7f8\2\ue87d\2\ue902\2\ue987\2\uea0c\2\uea91\2\ueb16\2\ueb9b" + "\2\uec20\2\ueca5\2\ued2a\2\uedaf\2\uee34\2\ueeb9\2\uef3e\2\uefc3" + "\2\uf048\2\uf0cd\2\uf152\2\uf1d7\2\uf25c\2\uf2e1\2\uf366\2\uf3eb" + "\2\uf470\2\uf4f5\2\uf57a\2\uf5ff\2\uf684\2\uf709\2\uf78e\2\uf813" + "\2\uf898\2\uf91d\2\uf9a2\2\ufa27\2\ufaac\2\ufb31\2\ufbb6\2\ufc3b" + "\2\ufcc0\2\ufd45\2\ufdca\2\ufe4f\2\ufed4\2\uff59\2\uffde\3\143" + "\3\350\3\u016d\3\u01f2\3\u0277\3\u02fc\3\u0381\3\u0406\3\u048b" + "\3\u0510\3\u0595\3\u061a\3\u069f\3\u0724\3\u07a9\3\u082e\3\u08b3" + "\3\u0938\3\u09bd\3\u0a42\3\u0ac7\3\u0b4c\3\u0bd1\3\u0c56\3\u0cdb" + "\3\u0d60\3\u0de5\3\u0e6a\3\u0eef\3\u0f74\3\u0ff9\3\u107e\3\u1103" + "\3\u1188\3\u120d\3\u1292\3\u1317\3\u139c\3\u1421\3\u14a6\3\u152b" + "\3\u15b0\3\u1635\3\u16ba\3\u173f\3\u17c4\3\u1849\3\u18ce\3\u1953" + "\3\u19d8\3\u1a5d\3\u1ae2\3\u1b67\3\u1bec\3\u1c71\3\u1cf6\3\u1d7b" + "\3\u1e00\3\u1e85\3\u1f0a\3\u1f8f\3\u2014\3\u2099\3\u211e\3\u21a3" + "\3\u2228\3\u22ad\3\u2332\3\u23b7\3\u243c\3\u24c1\3\u2546\3\u25cb" + "\3\u2650\3\u26d5\3\u275a\3\u27df\3\u2864\3\u28e9\3\u296e\3\u29f3" + "\3\u2a78\3\u2afd\3\u2b82\3\u2c07\3\u2c8c\3\u2d11\3\u2d96\3\u2e1b" + "\3\u2ea0\3\u2f25\3\u2faa\3\u302f\3\u30b4\3\u3139\3\u31be\3\u3243" + "\3\u32c8\3\u334d\3\u33d2\3\u3457\3\u34dc\3\u3561\3\u35e6\3\u366b" + "\3\u36f0\3\u3775\3\u37fa\3\u387f\3\u3904\3\u3989\3\u3a0e\3\u3a93" + "\3\u3b18\3\u3b9d\3\u3c22\3\u3ca7\3\u3d2c\3\u3db1\3\u3e36\3\u3ebb" + "\3\u3f40\3\u3fc5\3\u404a\3\u40cf\3\u4154\3\u41d9\3\u425e\3\u42e3" + "\3\u4368\3\u43ed\3\u4472\3\u44f7\3\u457c\3\u4601\3\u4686\3\u470b" + "\3\u4790\3\u4815\3\u489a\3\u491f\3\u49a4\3\u4a29\3\u4aae\3\u4b33" + "\3\u4bb8\3\u4c3d\3\u4cc2\3\u4d47\3\u4dcc\3\u4e51\3\u4ed6\3\u4f5b" + "\3\u4fe0\3\u5065\3\u50ea\3\u516f\3\u51f4\3\u5279\3\u52fe\3\u5383" + "\3\u5408\3\u548d\3\u5512\3\u5597\3\u561c\3\u56a1\3\u5726\3\u57ab" + "\3\u5830\3\u58b5\3\u593a\3\u59bf\3\u5a44\3\u5ac9\3\u5b4e\3\u5bd3" + "\3\u5c58\3\u5cdd\3\u5d62\3\u5de7\3\u5e6c\3\u5ef1\3\u5f76\3\u5ffb" + "\3\u6080\3\u6105\3\u618a\3\u620f\3\u6294\3\u6319\3\u639e\3\u6423" + "\3\u64a8\3\u652d\3\u65b2\3\u6637\3\u66bc\3\u6741\3\u67c6\3\u684b" + "\3\u68d0\3\u6955\3\u69da\3\u6a5f\3\u6ae4\3\u6b69\3\u6bee\3\u6c73" + "\3\u6cf8\3\u6d7d\3\u6e02\3\u6e87\3\u6f0c\3\u6f91\3\u7016\3\u709b" + "\3\u7120\3\u71a5\3\u722a\3\u72af\3\u7334\3\u73b9\3\u743e\3\u74c3" + "\3\u7548\3\u75cd\3\u7652\3\u76d7\3\u775c\3\u77e1\3\u7866\3\u78eb" + "\3\u7970\3\u79f5\3\u7a7a\3\u7aff\3\u7b84\3\u7c09\3\u7c8e\3\u7d13" + "\3\u7d98\3\u7e1d\3\u7ea2\3\u7f27\3\u7fac\3\u8031\3\u80b6\3\u813b" + "\3\u81c0\3\u8245\3\u82ca\3\u834f\3\u83d4\3\u8459\3\u84de\3\u8563" + "\3\u85e8\3\u866d\3\u86f2\3\u8777\3\u87fc\3\u8881\3\u8906\3\u898b" + "\3\u8a10\3\u8a95\3\u8b1a\3\u8b9f\3\u8c24\3\u8ca9\3\u8d2e\3\u8db3" + "\3\u8e38\3\u8ebd\3\u8f42\3\u8fc7\3\u904c\3\u90d1\3\u9156\3\u91db" + "\3\u9260\3\u92e5\3\u936a\3\u93ef\3\u9474\3\u94f9\3\u957e\3\u9603" + "\3\u9688\3\u970d\3\u9792\3\u9817\3\u989c\3\u9921\3\u99a6\3\u9a2b" + "\3\u9ab0\3\u9b35\3\u9bba\3\u9c3f\3\u9cc4\3\u9d49\3\u9dce\3\u9e53" + "\3\u9ed8\3\u9f5d\3\u9fe2\3\ua067\3\ua0ec\3\ua171\3\ua1f6\3\ua27b" + "\3\ua300\3\ua385\3\ua40a\3\ua48f\3\ua514\3\ua599\3\ua61e\3\ua6a3" + "\3\ua728\3\ua7ad\3\ua832\3\ua8b7\3\ua93c\3\ua9c1\3\uaa46\3\uaacb" + "\3\uab50\3\uabd5\3\uac5a\3\uacdf\3\uad64\3\uade9\3\uae6e\3\uaef3" + "\3\uaf78\3\uaffd\3\ub082\3\ub107\3\ub18c\3\ub211\3\ub296\3\ub31b" + "\3\ub3a0\3\ub425\3\ub4aa\3\ub52f\3\ub5b4\3\ub639\3\ub6be\3\ub743" + "\3\ub7c8\3\ub84d\3\ub8d2\3\ub957\3\ub9dc\3\uba61\3\ubae6\3\ubb6b" + "\3\ubbf0\3\ubc75\3\ubcfa\3\ubd7f\3\ube04\3\ube89\3\ubf0e\3\ubf93" + "\3\uc018\3\uc09d\3\uc122\3\uc1a7\3\uc22c\3\uc2b1\3\uc336\3\uc3bb" + "\3\uc440\3\uc4c5\3\uc54a\3\uc5cf\3\uc654\3\uc6d9\3\uc75e\3\uc7e3" + "\3\uc868\3\uc8ed\3\uc972\3\uc9f7\3\uca7c\3\ucb01\3\ucb86\3\ucc0b" + "\3\ucc90\3\ucd15\3\ucd9a\3\uce1f\3\ucea4\3\ucf29\3\ucfae\3\ud033" + "\3\ud0b8\3\ud13d\3\ud1c2\3\ud247\3\ud2cc\3\ud351\3\ud3d6\3\ud45b" + "\3\ud4e0\3\ud565\3\ud5ea\3\ud66f\3\ud6f4\3\ud779\3\ud7fe\3\ud883" + "\3\ud908\3\ud98d\3\uda12\3\uda97\3\udb1c\3\udba1\3\udc26\3\udcab" + "\3\udd30\3\uddb5\3\ude3a\3\udebf\3\udf44\3\udfc9\3\ue04e\3\ue0d3" + "\3\ue158\3\ue1dd\3\ue262\3\ue2e7\3\ue36c\3\ue3f1\3\ue476\3\ue4fb" + "\3\ue580\3\ue605\3\ue68a\3\ue70f\3\ue794\3\ue819\3\ue89e\3\ue923" + "\3\ue9a8\3\uea2d\3\ueab2\3\ueb37\3\uebbc\3\uec41\3\uecc6\3\ued4b" + "\3\uedd0\3\uee55\3\ueeda\3\uef5f\3\uefe4\3\uf069\3\uf0ee\3\uf173" + "\3\uf1f8\3\uf27d\3\uf302\3\uf387\3\uf40c\3\uf491\3\uf516\3\uf59b" + "\3\uf620\3\uf6a5\3\uf72a\3\uf7af\3\uf834\3\uf8b9\3\uf93e\3\uf9c3" + "\3\ufa48\3\ufacd\3\ufb52\3\ufbd7\3\ufc5c\3\ufce1\3\ufd66\3\ufdeb" + "\3\ufe70\3\ufef5\3\uff7a\3\uffff\4\204\4\u0109\4\u018e\4\u0213" + "\4\u0298\4\u031d\4\u03a2\4\u0427\4\u04ac\4\u0531\4\u05b6\4\u063b" + "\4\u06c0\4\u0745\4\u07ca\4\u084f\4\u08d4\4\u0959\4\u09de\4\u0a63" + "\4\u0ae8\4\u0b6d\4\u0bf2\4\u0c77\4\u0cfc\4\u0d81\4\u0e06\4\u0e8b" + "\4\u0f10\4\u0f95\4\u101a\4\u109f\4\u1124\4\u11a9\4\u122e\4\u12b3" + "\4\u1338\4\u13bd\4\u1442\4\u14c7\4\u154c\4\u15d1\4\u1656\4\u16db" + "\4\u1760\4\u17e5\4\u186a\4\u18ef\4\u1974\4\u19f9\4\u1a7e\4\u1b03" + "\4\u1b88\4\u1c0d\4\u1c92\4\u1d17\4\u1d9c\4\u1e21\4\u1ea6\4\u1f2b" + "\4\u1fb0\4\u2035\4\u20ba\4\u213f\4\u21c4\4\u2249\4\u22ce\4\u2353" + "\4\u23d8\4\u245d\4\u24e2\4\u2567\4\u25ec\4\u2671\4\u26f6\4\u277b" + "\4\u2800\4\u2885\4\u290a\4\u298f\4\u2a14\4\u2a99\4\u2b1e\4\u2ba3" + "\4\u2c28\4\u2cad\0\u0f96\4\u2d32\4\u2db7\4\u2e3c\4\u2ec1\4\u2f46" + "\4\u2fcb\4\u3050\4\u30d5\4\u315a\4\u31df\4\u3264\4\u32e9\4\u336e" + "\4\u33f3\4\u3478\4\u34fd\4\u3582\4\u3607\4\u368c\4\u3711\4\u3796" + "\4\u381b\4\u38a0\4\u3925\4\u39aa\4\u3a2f\4\u3ab4\4\u3b39\0\uad01" + "\4\u3bbe\4\u3c43\4\u3cc8\4\u3d4d\4\u3dd2\4\u3e57\4\u3edc\4\u3f61" + "\4\u3fe6\4\u406b\4\u40f0\4\u4175\4\u41fa\4\u427f\4\u4304\4\u4389" + "\4\u440e\4\u4493\4\u4518\4\u459d\4\u4622\4\u46a7\4\u472c\4\u47b1" + "\4\u4836\4\u48bb\4\u4940\4\u49c5\4\u4a4a\4\u4acf\4\u4b54\4\u4bd9" + "\4\u4c5e\4\u4ce3\4\u4d68\4\u4ded\4\u4e72\0\uad01\4\u4ef7\4\u4f7c" + "\4\u5001\4\u5086\4\u510b\4\u5190\4\u5215\4\u529a\4\u531f\0\ubeab" + "\0\ub01f\4\u3ab4\4\u4a4a\0\ub01f\4\u53a4\4\u5429\4\u54ae\4\u5533" + "\4\u55b8\0\u0f96\0\u0f96\0\u0f96\4\u563d\4\u56c2\4\u5747\1\ud737" + "\4\u57cc\4\u5851\4\u58d6\4\u595b\4\u59e0\4\u5a65\4\u5aea\4\u5b6f" + "\4\u5bf4\4\u5c79\4\u5cfe\4\u5d83\4\u5e08\4\u5e8d\4\u5f12\4\u5f97" + "\4\u601c\4\u60a1\4\u6126\4\u61ab\4\u6230\4\u62b5\4\u633a\4\u63bf" + "\4\u6444\4\u64c9\4\u654e\4\u65d3\4\u6658\4\u66dd\4\u6762\4\u67e7" + "\4\u686c\4\u68f1\4\u6976\4\u440e\4\u69fb\4\u6a80\4\u3ab4\4\u6b05" + "\4\u6b8a\4\u6c0f\4\u6c94\4\u6d19\4\u6d9e\4\u6e23\4\u6ea8\4\u6f2d" + "\4\u6fb2\4\u7037\4\u70bc\4\u7141\4\u71c6\4\u724b\4\u4a4a\4\u72d0" + "\4\u7355\4\u73da\4\u745f\4\u74e4\4\u7569\4\u75ee\4\u7673\4\u7673" + "\4\u76f8\4\u777d\4\u7802\4\u7887\4\u790c\4\u7991\4\u7a16\4\u7a9b" + "\4\u7b20\4\u7b20\4\u7ba5\4\u7c2a\4\u7caf\4\u7d34\4\u7db9\4\u7e3e" + "\4\u7ec3\4\u7f48\4\u7fcd\4\u8052\4\u80d7\4\u815c\4\u81e1\4\u8266" + "\4\u82eb\4\u8370\4\u83f5\4\u847a\4\u84ff\4\u8584\4\u8609\4\u868e" + "\4\u8713\4\u8798\4\u881d\4\u88a2\4\u8927\4\u89ac\4\u8a31\4\u8ab6" + "\4\u8b3b\4\u8bc0\4\u8c45\4\u8cca\4\u8d4f\4\u8dd4\4\u8e59\4\u8ede" + "\4\u8f63\4\u8fe8\4\u906d\4\u90f2\4\u9177\4\u91fc\4\u9281\4\u9306" + "\4\u938b\4\u9410\4\u9495\4\u951a\4\u959f\4\u9624\4\u96a9\4\u972e" + "\4\u97b3\4\u9838\4\u98bd\4\u9942\0\u0f96\4\u99c7\4\u9a4c\4\u9ad1" + "\4\u9b56\4\u9bdb\4\u9c60\4\u9ce5\4\u9d6a\4\u9def\4\u9e74\4\u9ef9" + "\4\u9f7e\4\ua003\4\ua088\4\ua10d\4\ua192\4\ua217\4\ua29c\4\ua321" + "\4\ua3a6\4\ua42b\4\ua4b0\4\ua535\4\ua5ba\4\ua63f\1\u0235\4\ua6c4" + "\4\ua749\4\ua7ce\4\ua853\1\u0235\4\ua8d8\4\ua95d\4\ua9e2\4\uaa67" + "\4\uaaec\4\uab71\4\uabf6\4\uac7b\4\uad00\4\uad85\4\uae0a\4\uae8f" + "\4\uaf14\4\uaf99\4\uaa67\4\uaa67\4\ub01e\4\ub0a3\0\u0f96\4\ub128" + "\4\ub1ad\4\ub232\4\ub2b7\4\ub33c\4\ub3c1\4\ub446\1\u04ce\0\u0d82" + "\4\ub4cb\4\ub550\4\ub5d5\4\ub65a\0\u0d82\4\ub6df\4\ub764\4\ub7e9" + "\4\ub86e\4\ub8f3\4\ub978\4\ub9fd\4\uba82\4\ubb07\4\ubb8c\4\ubc11" + "\4\ubc96\4\ubd1b\4\ubda0\4\ube25\4\ubeaa\4\ubf2f\4\ubfb4\4\uc039" + "\4\uc0be\4\uc143\4\uc1c8\4\uc24d\4\uc2d2\4\uc357\4\uc3dc\4\uc461" + "\4\uc4e6\4\uc56b\4\uc5f0\4\uc675\4\uc675\4\uc6fa\4\uc77f\4\uc804" + "\4\uc889\4\uc90e\4\uc993\4\uca18\4\uca9d\4\ucb22\4\ucba7\4\ucc2c" + "\4\uccb1\4\ucd36\4\ucdbb\4\ucdbb\4\uce40\4\ucec5\4\ucf4a\4\ucfcf" + "\4\ud054\4\ud0d9\4\ud15e\4\ud1e3\4\ud268\4\ud2ed\4\ud372\4\ud3f7" + "\4\ud47c\4\ud501\4\ud586\4\ud60b\4\ud690\4\ud715\4\ud79a\4\ud81f" + "\4\ud8a4\4\ud929\4\ud9ae\4\uda33\4\udab8\4\udb3d\4\udbc2\4\udc47" + "\4\udccc\4\udd51\4\uddd6\4\ude5b\4\udee0\4\udf65\4\udfea\4\ue06f" + "\4\ue0f4\4\ue179\4\ue1fe\4\ue283\4\ue308\4\ue38d\4\ue412\4\ue497" + "\4\ue51c\4\ue5a1\4\ue626\4\ue6ab\4\ue730\4\ue7b5\4\ue83a\4\ue8bf" + "\4\ue944\4\ue9c9\4\uea4e\4\uead3\4\ueb58\4\uebdd\4\uec62\4\uece7" + "\4\ued6c\4\uedf1\4\uee76\4\ueefb\4\uef80\4\uf005\4\uf08a\4\uf10f" + "\4\uf194\4\uf219\4\uf29e\4\uf323\4\uf3a8\4\uf42d\4\uf4b2\4\uf537" + "\4\uf5bc\4\uf641\4\uf6c6\4\u7673\4\uf74b\4\uf7d0\4\uf855\4\uf8da" + "\4\uf95f\4\u7b20\4\uf9e4\4\ufa69\1\u43ab\4\ufaee\1\u453a\4\ufb73" + "\4\ufbf8\4\ufc7d\4\ufd02\4\ufd87\4\ufe0c\4\ufe91\4\uff16\4\uff9b" + "\5\40\5\245\5\u012a\5\u01af\5\u0234\5\u02b9\5\u033e\5\u03c3" + "\5\u0448\5\u04cd\5\u0552\5\u05d7\5\u065c\0\uad01\0\ubeab\5\u06e1" + "\5\u0766\5\u07eb\5\u0870\5\u08f5\5\u097a\5\u09ff\4\ud2ed\5\u0a84" + "\5\u0b09\5\u0b8e\5\u0c13\4\uda33\5\u0c98\5\u0d1d\5\u0da2\5\u0e27" + "\5\u0eac\5\u0f31\5\u0fb6\5\u103b\5\u10c0\5\u1145\5\u11ca\5\u124f" + "\5\u12d4\5\u1359\5\u13de\5\u1463\5\u14e8\5\u156d\5\u15f2\5\u1677" + "\5\u16fc\5\u1781\5\u1806\5\u188b\5\u14e8\5\u1910\5\u1995\5\u1a1a" + "\5\u1a9f\5\u1b24\5\u1ba9\5\u1c2e\5\u1cb3\5\u1d38\5\u1dbd\5\u1e42" + "\5\u1ec7\5\u1f4c\5\u1fd1\5\u2056\5\u20db\5\u2160\5\u21e5\5\u226a" + "\5\u22ef\5\u2374\5\u23f9\5\u247e\5\u2503\5\u2588\5\u260d\5\u2692" + "\5\u2717\5\u279c\5\u2821\5\u28a6\5\u292b\5\u29b0\5\u2a35\5\u2aba" + "\5\u2b3f\5\u2bc4\5\u2c49\5\u2cce\5\u2d53\5\u2dd8\5\u2e5d\5\u2ee2" + "\5\u2f67\5\u2fec\5\u3071\5\u30f6\5\u317b\5\u3200\5\u3285\5\u330a" + "\5\u338f\5\u3414\5\u3499\5\u351e\5\u35a3\5\u3628\5\u36ad\5\u3732" + "\5\u37b7\5\u383c\5\u38c1\5\u3946\5\u39cb\5\u3a50\5\u3ad5\5\u3b5a" + "\5\u3bdf\5\u3c64\5\u3ce9\5\u3d6e\5\u3df3\5\u3e78\5\u3efd\5\u3f82" + "\5\u4007\5\u408c\5\u4111\5\u4196\5\u421b\5\u42a0\5\u4325\5\u43aa" + "\5\u442f\5\u44b4\5\u4539\5\u45be\5\u4643\5\u46c8\5\u474d\5\u47d2" + "\5\u4857\5\u48dc\5\u4961\5\u49e6\5\u4a6b\5\u4af0\5\u4b75\5\u4bfa" + "\5\u4c7f\5\u4d04\5\u4d89\5\u4e0e\5\u4e93\5\u4f18\5\u4f9d\1\u04ce" + "\0\u0d82\5\u5022\5\u50a7\5\u512c\5\u51b1\5\u5236\5\u52bb\5\u5340" + "\5\u53c5\5\u544a\5\u54cf\5\u5554\5\u55d9\5\u565e\5\u56e3\5\u5768" + "\5\u57ed\5\u5872\5\u58f7\5\u597c\5\u5a01\5\u5a86\5\u5b0b\5\u5b90" + "\1\uac9d\5\u5c15\5\u5c9a\5\u5d1f\5\u5da4\5\u5e29\5\u5eae\5\u5f33" + "\5\u5fb8\5\u603d\5\u60c2\5\u6147\5\u61cc\5\u6251\5\u62d6\5\u635b" + "\5\u63e0\5\u6465\5\u64ea\5\u656f\5\u65f4\0\uad01\1\u47d3\5\u6679" + "\5\u66fe\5\u6783\5\u6808\5\u688d\5\u6912\5\u6997\5\u6a1c\5\u6aa1" + "\5\u6b26\5\u6bab\5\u6c30\5\u6cb5\5\u6d3a\5\u6dbf\5\u6e44\4\u3bbe" + "\4\u3c43\5\u6ec9\5\u6f4e\5\u6fd3\5\u7058\4\u53a4\4\u5429\5\u70dd" + "\5\u7162\5\u71e7\5\u726c\5\u72f1\5\u7376\5\u73fb\5\u7480\5\u7505" + "\5\u758a\5\u760f\5\u7694\5\u7719\5\u779e\0\uac7c\5\u7823\5\u78a8" + "\5\u792d\5\u79b2\4\u57cc\4\u563d\5\u7a37\5\u7abc\5\u7b41\5\u7bc6" + "\5\u7c4b\5\u7cd0\5\u7d55\5\u7dda\5\u7e5f\5\u7ee4\5\u7f69\0\u0f96" + "\5\u7fee\5\u8073\5\u80f8\5\u817d\5\u8202\5\u8287\5\u830c\5\u8391" + "\5\u8416\5\u849b\5\u8520\5\u85a5\5\u862a\5\u86af\5\u8734\5\u87b9" + "\5\u883e\5\u88c3\5\u8948\5\u89cd\5\u8a52\5\u8ad7\5\u8b5c\5\u8be1" + "\5\u8c66\5\u8ceb\5\u8d70\5\u8df5\5\u8e7a\5\u8eff\5\u8f84\5\u9009" + "\5\u908e\5\u9113\5\u9198\5\u921d\5\u92a2\5\u9327\5\u93ac\5\u9431" + "\5\u94b6\5\u953b\5\u95c0\5\u9645\5\u96ca\5\u974f\5\u97d4\5\u9859" + "\5\u98de\5\u9963\5\u99e8\5\u9a6d\5\u9af2\5\u9b77\5\u9bfc\5\u9c81" + "\5\u9d06\5\u9d8b\5\u9e10\5\u9e95\5\u9f1a\5\u9f9f\5\ua024\5\ua0a9" + "\5\ua12e\5\ua1b3\5\ua238\5\ua2bd\5\ua342\5\ua3c7\5\ua44c\5\ua4d1" + "\5\ua556\5\ua5db\5\ua660\5\ua6e5\5\ua76a\5\ua7ef\5\ua874\5\ua8f9" + "\5\ua97e\5\uaa03\5\uaa88\5\uab0d\5\uab92\5\uac17\5\uac9c\5\uad21" + "\5\uada6\5\uae2b\5\uaeb0\5\uaf35\5\uafba\5\ub03f\5\ub0c4\5\ub149" + "\5\ub1ce\5\ub253\5\ub2d8\5\ub35d\5\ub3e2\5\ub467\5\ub4ec\5\ub571" + "\5\ub5f6\5\ub67b\5\ub700\5\ub785\5\ub80a\5\ub88f\5\u92a2\5\ub914" + "\5\ub999\5\u8be1\5\uba1e\5\ubaa3\5\ubb28\5\ubbad\5\ubc32\5\ubcb7" + "\5\ubd3c\5\ubdc1\5\ube46\5\ubecb\5\ubf50\5\ubfd5\5\uc05a\5\uc0df" + "\5\uc164\5\u96ca\5\uc1e9\5\uc26e\5\uc2f3\5\uc378\5\uc3fd\5\uc482" + "\5\uc507\5\uc58c\5\uc611\5\uc696\5\uc71b\5\uc7a0\5\uc825\5\uc8aa" + "\5\uc92f\5\uc9b4\5\uca39\5\ucabe\5\ucb43\5\ucbc8\5\ucc4d\5\uccd2" + "\5\ucd57\5\ucddc\5\uce61\5\ucee6\5\ucf6b\5\ucff0\5\ud075\5\ud0fa" + "\5\ud17f\5\ud204\5\ud289\5\ud30e\5\ud393\5\ud418\5\ud49d\5\ud522" + "\5\ud5a7\5\ud62c\5\ud6b1\5\ud736\5\ud7bb\5\ud840\5\ud8c5\5\ud94a" + "\5\ud9cf\5\uda54\5\udad9\5\udb5e\5\udbe3\5\udc68\5\udced\5\udd72" + "\5\uddf7\5\ude7c\5\udf01\5\udf86\5\ue00b\5\ue090\5\ue115\5\ue19a" + "\5\ue21f\5\ue2a4\5\ue329\5\ue3ae\5\ue433\5\ue4b8\5\ue53d\5\ue5c2" + "\5\ue647\5\ue6cc\5\ue751\5\ue7d6\5\ue85b\5\ue8e0\5\ue965\5\ue9ea" + "\5\uea6f\5\ueaf4\5\ueb79\5\uebfe\5\uec83\5\ued08\2\u1e64\5\ued8d" + "\5\uee12\5\uee97\5\uef1c\5\uefa1\5\uf026\5\uf0ab\5\uf130\5\uf1b5" + "\5\uf23a\5\uf2bf\5\uf344\5\uf3c9\5\uf44e\5\uf4d3\5\uf558\5\uf5dd" + "\5\uf662\5\uf6e7\5\uf76c\5\uf7f1\5\uf876\5\uf2bf\5\uf8fb\5\uf980" + "\5\ufa05\5\ufa8a\5\ufb0f\5\ufb94\5\ufc19\5\ufc9e\5\ufd23\5\ufda8" + "\5\ufe2d\5\ufeb2\5\uff37\5\uffbc\6\101\6\306\6\u014b\6\u01d0" + "\6\u0255\6\u02da\6\u035f\6\u03e4\6\u0469\6\u04ee\6\u0573\6\u05f8" + "\6\u067d\6\u0702\6\u0787\6\u080c\6\u0891\6\u0916\6\u099b\6\u0a20" + "\6\u0aa5\6\u0b2a\6\u0baf\6\u0c34\6\u0cb9\6\u0d3e\6\u0dc3\6\u0e48" + "\6\u0ecd\6\u0f52\6\u0fd7\6\u105c\6\u10e1\6\u1166\6\u11eb\6\u1270" + "\6\u12f5\6\u137a\6\u13ff\6\u1484\6\u1509\6\u158e\6\u1613\6\u1698" + "\6\u171d\6\u17a2\6\u1827\6\u18ac\6\u1931\6\u19b6\6\u1a3b\6\u1ac0" + "\6\u1b45\6\u1bca\6\u1c4f\6\u1cd4\6\u1d59\6\u1dde\6\u1e63\6\u1ee8" + "\6\u1f6d\6\u1ff2\6\u2077\6\u20fc\6\u2181\6\u2206\6\u228b\6\u2310" + "\6\u2395\6\u241a\6\u249f\6\u2524\6\u25a9\6\u262e\6\u26b3\6\u2738" + "\6\u27bd\6\u2842\6\u28c7\6\u294c\6\u29d1\6\u2a56\6\u2adb\6\u2b60" + "\6\u2be5\6\u2c6a\6\u2cef\6\u2d74\6\u2df9\6\u2e7e\6\u2f03\6\u2f88" + "\6\u300d\6\u3092\6\u3117\6\u319c\6\u3221\6\u32a6\6\u332b\6\u33b0" + "\6\u3435\6\u34ba\6\u353f\6\u35c4\6\u3649\6\u36ce\6\u3753\6\u37d8" + "\6\u385d\6\u38e2\6\u3967\6\u39ec\6\u3a71\6\u3af6\6\u3b7b\6\u3c00" + "\6\u3c85\6\u3d0a\6\u3d8f\6\u3e14\6\u3e99\6\u3f1e\6\u3fa3\6\u4028" + "\6\u40ad\6\u4132\6\u41b7\6\u423c\6\u42c1\6\u4346\6\u43cb\6\u4450" + "\6\u44d5\6\u455a\6\u45df\6\u4664\6\u46e9\6\u476e\6\u47f3\6\u4878" + "\6\u48fd\6\u4982\6\u4a07\6\u4a8c\6\u4b11\6\u4b96\6\u4c1b\6\u4ca0" + "\6\u4d25\6\u4daa\6\u4e2f\6\u4eb4\6\u4f39\6\u4fbe\6\u5043\6\u50c8" + "\6\u514d\6\u51d2\6\u5257\6\u52dc\6\u5361\6\u53e6\6\u546b\6\u54f0" + "\6\u5575\6\u55fa\6\u567f\6\u5704\6\u5789\6\u580e\6\u5893\6\u5918" + "\6\u599d\6\u5a22\6\u5aa7\6\u5b2c\6\u5bb1\6\u5c36\6\u5cbb\6\u5d40" + "\6\u5dc5\6\u5e4a\6\u5ecf\6\u5f54\6\u5fd9\6\u605e\6\u60e3\6\u6168" + "\6\u61ed\6\u6272\6\u62f7\6\u637c\6\u6401\6\u27bd\6\u6486\6\u650b" + "\6\u6590\6\u2f88\6\u6615\6\u669a\6\u671f\6\u67a4\6\u6829\6\u68ae" + "\6\u6933\6\u69b8\6\u6a3d\6\u6ac2\6\u6b47\6\u6bcc\6\u6c51\6\u6cd6" + "\6\u6d5b\6\u6de0\6\u6e65\6\u6eea\6\u6f6f\6\u6ff4\6\u7079\6\u70fe" + "\6\u7183\6\u7208\6\u728d\6\u7312\6\u7397\6\u741c\6\u74a1\6\u7526" + "\6\u6eea\6\u75ab\6\u7630\6\u76b5\6\u773a\6\u77bf\6\u7844\6\u78c9" + "\6\u794e\6\u79d3\6\u7a58\6\u7add\6\u7b62\6\u7be7\6\u7c6c\6\u7cf1" + "\6\u7d76\6\u7dfb\6\u7e80\6\u7f05\6\u7f8a\6\u800f\6\u8094\6\u8119" + "\6\u819e\6\u8223\6\u82a8\6\u832d\6\u83b2\6\u8437\6\u84bc\6\u8541" + "\6\u85c6\6\u864b\6\u86d0\6\u8755\6\u87da\6\u885f\6\u88e4\6\u8969" + "\6\u89ee\6\u8a73\6\u8af8\6\u8b7d\6\u8c02\6\u8c87\6\u8d0c\6\u8d91" + "\6\u8e16\6\u8e9b\6\u8f20\6\u8fa5\6\u902a\6\u90af\6\u9134\6\u91b9" + "\6\u923e\6\u92c3\6\u9348\6\u93cd\6\u9452\6\u94d7\6\u955c\6\u95e1" + "\6\u9666\6\u96eb\6\u9770\6\u97f5\6\u987a\6\u98ff\6\u9984\6\u9a09" + "\6\u9a8e\6\u9b13\6\u9b98\6\u9c1d\6\u9ca2\6\u9d27\6\u9dac\6\u9e31" + "\6\u9eb6\6\u9f3b\6\u9fc0\6\ua045\6\ua0ca\6\ua14f\6\ua1d4\6\ua259" + "\6\ua2de\6\ua363\6\ua3e8\6\ua46d\6\ua4f2\6\ua577\6\ua5fc\6\ua681" + "\6\ua706\6\ua78b\6\ua810\6\ua895\6\ua91a\6\ua99f\6\uaa24\6\uaaa9" + "\6\uab2e\6\uabb3\6\uac38\6\uacbd\6\uad42\6\uadc7\6\uae4c\6\uaed1" + "\6\uaf56\6\uafdb\6\ub060\6\ub0e5\6\ub16a\6\ub1ef\6\ub274\6\ub2f9" + "\6\ub37e\6\ub403\6\ub488\6\ub50d\6\ub592\6\ub617\6\ub69c\6\ub721" + "\6\ub7a6\6\ub82b\6\ub8b0\6\ub935\6\ub9ba\6\uba3f\6\ubac4\6\ubb49" + "\6\ubbce\6\ubc53\6\ubcd8\6\ubd5d\6\ubde2\6\ube67\6\ubeec\6\ubf71" + "\6\ubff6\6\uc07b\6\uc100\6\uc185\6\uc20a\6\uc28f\6\uc314\6\uc399" + "\6\uc41e\6\uc4a3\6\uc528\6\uc5ad\6\uc632\6\uc6b7\6\uc73c\6\uc7c1" + "\6\uc846\6\uc8cb\6\uc950\6\uc9d5\6\uca5a\6\ucadf\6\ucb64\6\ucbe9" + "\6\ucc6e\6\uccf3\6\ucd78\6\ucdfd\6\uce82\6\ucf07\6\ucf8c\6\ud011" + "\6\ud096\6\ud11b\6\ud1a0\6\ud225\2\u5b2d\6\ud2aa\6\ud32f\6\ud3b4" + "\6\ud439\6\ud4be\6\ud543\6\ud5c8\6\ud64d\6\ud6d2\6\ud757\6\ud7dc" + "\6\ud861\6\ud8e6\6\ud96b\6\ud9f0\6\uda75\6\udafa\6\udb7f\6\udc04" + "\6\udc89\6\udd0e\6\udd93\6\ude18\6\ude9d\6\udf22\6\udfa7\6\ue02c" + "\6\ue0b1\6\ue136\6\ue1bb\6\ue240\6\ue2c5\6\ue34a\6\ue3cf\6\ue454" + "\6\ue4d9\6\ue55e\6\ue5e3\6\ue668\6\ue6ed\0\u0f96\6\ue772\6\ue7f7" + "\6\ue87c\6\ue901\6\ue986\6\uea0b\6\uea90\6\ueb15\6\ueb9a\6\uec1f" + "\6\ueca4\6\ued29\6\uedae\6\uee33\6\ueeb8\6\uef3d\6\uefc2\6\uf047" + "\6\uf0cc\6\uf151\6\uf1d6\6\uf25b\6\uf2e0\6\uf365\6\uf3ea\6\uf46f" + "\6\uf4f4\6\uf579\6\uf5fe\6\uf683\6\uf708\6\uf78d\6\uf812\6\uf897" + "\6\uf91c\6\uf9a1\6\ufa26\6\ufaab\6\ufb30\6\ufbb5\6\ufc3a\6\ufcbf" + "\6\ufd44\6\ufdc9\6\ufe4e\6\ufed3\6\uff58\6\uffdd\7\142\7\347" + "\7\u016c\7\u01f1\7\u0276\7\u02fb\7\u0380\7\u0405\7\u048a\7\u050f" + "\7\u0594\7\u0619\7\u069e\7\u0723\7\u07a8\7\u082d\7\u08b2\7\u0937" + "\7\u09bc\7\u0a41\7\u0ac6\7\u0b4b\7\u0bd0\7\u0c55\7\u0cda\7\u0d5f" + "\7\u0de4\7\u0e69\7\u0eee\7\u0f73\7\u0ff8\7\u107d\7\u1102\7\u1187" + "\7\u120c\7\u1291\7\u1316\7\u139b\7\u1420\7\u14a5\7\u152a\7\u15af" + "\7\u1634\7\u16b9\7\u173e\7\u17c3\7\u1848\7\u18cd\7\u1952\7\u19d7" + "\7\u1a5c\7\u1ae1\7\u1b66\7\u1beb\7\u1c70\7\u1cf5\7\u1d7a\7\u1dff" + "\7\u1e84\7\u1f09\7\u1f8e\7\u2013\6\ufa26\7\u2098\7\u211d\6\uf365" + "\7\u21a2\7\u2227\7\u22ac\7\u2331\7\u23b6\7\u243b\7\u24c0\7\u2545" + "\7\u25ca\7\u264f\7\u26d4\7\u2759\7\u27de\7\u2863\7\u28e8\6\ufe4e" + "\7\u296d\7\u29f2\7\u2a77\7\u2afc\7\u2b81\7\u2c06\7\u2c8b\7\u2d10" + "\7\u2d95\7\u2e1a\7\u2e9f\7\u2f24\7\u2fa9\7\u302e\7\u30b3\7\u3138" + "\7\u31bd\7\u3242\7\u32c7\7\u334c\7\u33d1\7\u3456\7\u34db\7\u3560" + "\7\u35e5\7\u366a\7\u36ef\7\u3774\7\u37f9\7\u387e\7\u3903\7\u3988" + "\7\u3a0d\7\u3a92\7\u3b17\7\u3b9c\7\u3c21\7\u3ca6\7\u3d2b\7\u3db0" + "\7\u3e35\7\u3eba\7\u3f3f\7\u3fc4\7\u4049\7\u40ce\7\u4153\7\u41d8" + "\7\u425d\7\u42e2\7\u4367\7\u43ec\7\u4471\7\u44f6\7\u457b\7\u4600" + "\7\u4685\7\u470a\7\u478f\7\u4814\7\u4899\7\u491e\7\u49a3\7\u4a28" + "\7\u4aad\7\u4b32\7\u4bb7\7\u4c3c\7\u4cc1\7\u4d46\7\u4dcb\7\u4e50" + "\7\u4ed5\7\u4f5a\7\u4fdf\7\u5064\7\u50e9\7\u516e\7\u51f3\7\u5278" + "\7\u52fd\7\u5382\7\u5407\7\u548c\3\u2099\7\u5511\7\u5596\7\u561b" + "\7\u56a0\7\u5725\7\u57aa\7\u582f\7\u58b4\7\u5939\7\u59be\7\u5a43" + "\7\u5ac8\7\u5b4d\7\u5bd2\7\u5c57\7\u5cdc\7\u5d61\7\u5de6\7\u5e6b" + "\7\u5ef0\7\u5f75\7\u5ffa\7\u5a43\7\u607f\7\u6104\7\u6189\7\u620e" + "\7\u6293\7\u6318\7\u639d\7\u6422\7\u64a7\7\u652c\7\u65b1\7\u6636" + "\7\u66bb\7\u6740\7\u67c5\7\u684a\7\u68cf\7\u6954\7\u69d9\7\u6a5e" + "\7\u6ae3\7\u6b68\7\u6bed\7\u6c72\7\u6cf7\7\u6d7c\7\u6e01\7\u6e86" + "\7\u6f0b\7\u6f90\7\u7015\7\u709a\7\u711f\7\u71a4\7\u7229\7\u72ae" + "\7\u7333\7\u73b8\7\u743d\7\u74c2\7\u7547\7\u75cc\7\u7651\7\u76d6" + "\7\u775b\7\u77e0\7\u7865\7\u78ea\7\u796f\7\u79f4\7\u7a79\7\u7afe" + "\7\u7b83\7\u7c08\7\u7c8d\7\u7d12\7\u7d97\7\u7e1c\7\u7ea1\7\u7f26" + "\7\u7fab\7\u8030\7\u80b5\7\u813a\7\u81bf\7\u8244\7\u82c9\7\u834e" + "\7\u83d3\7\u8458\7\u84dd\7\u8562\7\u85e7\7\u866c\7\u86f1\7\u8776" + "\7\u87fb\7\u8880\7\u8905\7\u898a\7\u8a0f\7\u8a94\7\u8b19\7\u8b9e" + "\7\u8c23\7\u8ca8\7\u8d2d\7\u8db2\7\u8e37\7\u8ebc\7\u8f41\7\u8fc6" + "\7\u904b\7\u90d0\7\u9155\7\u91da\7\u925f\7\u92e4\7\u9369\7\u93ee" + "\7\u9473\7\u94f8\7\u957d\7\u9602\7\u9687\7\u970c\7\u9791\7\u9816" + "\7\u989b\7\u9920\7\u99a5\7\u9a2a\7\u9aaf\7\u9b34\7\u9bb9\7\u9c3e" + "\7\u9cc3\7\u9d48\7\u9dcd\7\u9e52\7\u9ed7\7\u9f5c\7\u9fe1\7\ua066" + "\7\ua0eb\7\ua170\7\ua1f5\7\ua27a\7\ua2ff\7\ua384\7\ua409\7\ua48e" + "\7\ua513\7\ua598\7\ua61d\7\ua6a2\7\ua727\7\ua7ac\7\ua831\7\ua8b6" + "\7\ua93b\7\ua9c0\7\uaa45\7\uaaca\7\uab4f\7\uabd4\7\uac59\7\uacde" + "\7\uad63\7\uade8\7\uae6d\7\uaef2\7\uaf77\7\uaffc\7\ub081\7\ub106" + "\7\ub18b\7\ub210\7\ub295\7\ub31a\7\ub39f\7\ub424\7\ub4a9\7\ub52e" + "\7\ub5b3\7\ub638\7\ub6bd\7\ub742\7\ub7c7\7\ub84c\7\ub8d1\7\ub956" + "\7\ub9db\7\uba60\7\ubae5\7\ubb6a\7\ubbef\7\ubc74\7\ubcf9\7\ubd7e" + "\7\ube03\7\ube88\7\ubf0d\7\ubf92\7\uc017\7\uc09c\7\uc121\7\uc1a6" + "\7\uc22b\7\uc2b0\7\uc335\7\uc3ba\7\uc43f\7\uc4c4\7\uc549\7\uc5ce" + "\7\uc653\7\uc6d8\7\uc75d\7\uc7e2\7\uc867\7\uc8ec\7\uc971\7\uc9f6" + "\7\uca7b\7\ucb00\7\ucb85\7\u8f41\7\ucc0a\7\ucc8f\7\ucd14\7\u970c" + "\7\ucd99\7\uce1e\7\ucea3\7\ucf28\7\ucfad\7\ud032\7\ud0b7\7\ud13c" + "\7\ud1c1\7\ud246\7\ud2cb\7\ud350\7\ud3d5\7\ud45a\7\ud4df\7\ud564" + "\7\ud5e9\7\ud66e\7\ud6f3\7\ud778\7\ud7fd\7\ud882\7\ud907\7\ud98c" + "\7\uda11\7\uda96\7\udb1b\7\udba0\7\udc25\7\udcaa\7\ud66e\7\udd2f" + "\7\uddb4\7\ude39\7\udebe\7\udf43\7\udfc8\7\ue04d\7\ue0d2\7\ue157" + "\7\ue1dc\7\ue261\7\ue2e6\7\ue36b\7\ue3f0\7\ue475\7\ue4fa\7\ue57f" + "\7\ue604\7\ue689\7\ue70e\7\ue793\7\ue818\7\ue89d\7\ue922\7\ue9a7" + "\7\uea2c\7\ueab1\7\ueb36\7\uebbb\7\uec40\7\uecc5\7\ued4a\7\uedcf" + "\7\uee54\7\ueed9\7\uef5e\7\uefe3\7\uf068\7\uf0ed\7\uf172\7\uf1f7" + "\7\uf27c\7\uf301\7\uf386\7\uf40b\7\uf490\7\uf515\7\uf59a\7\uf61f" + "\7\uf6a4\7\uf729\7\uf7ae\7\uf833\7\uf8b8\7\uf93d\7\uf9c2\7\ufa47" + "\7\ufacc\7\ufb51\7\ufbd6\7\ufc5b\7\ufce0\7\ufd65\7\ufdea\7\ufe6f" + "\7\ufef4\7\uff79\7\ufffe\10\203\10\u0108\10\u018d\10\u0212\10\u0297" + "\10\u031c\10\u03a1\10\u0426\10\u04ab\10\u0530\10\u05b5\10\u063a\10\u06bf" + "\10\u0744\10\u07c9\10\u084e\10\u08d3\10\u0958\10\u09dd\10\u0a62\10\u0ae7" + "\10\u0b6c\10\u0bf1\10\u0c76\10\u0cfb\10\u0d80\10\u0e05\10\u0e8a\10\u0f0f" + "\10\u0f94\10\u1019\10\u109e\10\u1123\10\u11a8\10\u122d\10\u12b2\10\u1337" + "\10\u13bc\10\u1441\10\u14c6\10\u154b\10\u15d0\10\u1655\10\u16da\10\u175f" + "\10\u17e4\10\u1869\10\u18ee\10\u1973\10\u19f8\10\u1a7d\10\u1b02\10\u1b87" + "\10\u1c0c\10\u1c91\10\u1d16\10\u1d9b\10\u1e20\10\u1ea5\10\u1f2a\10\u1faf" + "\10\u2034\10\u20b9\10\u213e\10\u21c3\10\u2248\10\u22cd\10\u2352\10\u23d7" + "\10\u245c\10\u24e1\10\u2566\10\u25eb\10\u2670\10\u26f5\10\u277a\10\u27ff" + "\10\u2884\10\u2909\10\u298e\10\u2a13\10\u2a98\10\u2b1d\10\u2ba2\10\u2c27" + "\10\u2cac\10\u2d31\10\u2db6\10\u2e3b\10\u2ec0\10\u2f45\10\u2fca\10\u304f" + "\10\u30d4\10\u3159\10\u31de\10\u3263\10\u32e8\10\u336d\10\u33f2\10\u3477" + "\10\u34fc\10\u3581\10\u3606\10\u368b\10\u3710\10\u3795\10\u381a\10\u389f" + "\10\u3924\10\u39a9\3\u5d62\10\u3a2e\10\u3ab3\10\u3b38\10\u3bbd\10\u3c42" + "\10\u3cc7\10\u3d4c\10\u3dd1\10\u3e56\10\u3edb\10\u3f60\10\u3fe5\10\u406a" + "\10\u40ef\10\u4174\10\u41f9\10\u427e\10\u4303\10\u4388\10\u440d\10\u4492" + "\10\u4517\10\u459c\10\u4621\10\u46a6\10\u472b\10\u47b0\10\u4835\10\u48ba" + "\10\u493f\10\u49c4\10\u4a49\10\u4ace\10\u4b53\10\u4bd8\10\u4c5d\10\u4ce2" + "\10\u4d67\10\u4dec\10\u4e71\10\u4ef6\10\u4f7b\10\u5000\10\u5085\10\u510a" + "\10\u518f\10\u5214\10\u5299\10\u531e\10\u53a3\10\u5428\10\u54ad\10\u5532" + "\10\u55b7\10\u563c\10\u56c1\10\u5746\10\u57cb\10\u5850\10\u58d5\10\u595a" + "\10\u59df\10\u5a64\10\u5ae9\10\u5b6e\10\u5bf3\10\u5c78\10\u5cfd\10\u5d82" + "\10\u5e07\10\u5e8c\10\u5f11\10\u5f96\10\u601b\10\u60a0\3\uf1f8\10\u6125" + "\10\u61aa\10\u622f\10\u62b4\10\u6339\10\u63be\10\u6443\10\u64c8\10\u654d" + "\10\u65d2\10\u6657\10\u66dc\10\u6761\10\u67e6\10\u686b\10\u68f0\10\u6975" + "\10\u69fa\10\u6a7f\10\u6b04\10\u6b89\10\u6c0e\10\u6c93\10\u6d18\10\u6d9d" + "\10\u6e22\10\u6ea7\10\u6f2c\10\u6fb1\10\u7036\3\ufa48\10\u70bb\10\u7140" + "\10\u71c5\10\u724a\10\u72cf\10\u7354\10\u73d9\10\u745e\10\u74e3\10\u7568" + "\10\u75ed\10\u7672\10\u76f7\10\u777c\10\u7801\10\u7886\10\u790b\10\u7990" + "\10\u7a15\10\u7a9a\10\u7b1f\10\u7ba4\10\u7c29\10\u7cae\10\u7d33\10\u7db8" + "\10\u7e3d\10\u7ec2\10\u7f47\10\u7fcc\10\u8051\10\u80d6\10\u815b\10\u81e0" + "\10\u8265\10\u82ea\10\u836f\10\u83f4\10\u8479\10\u84fe\10\u8583\10\u8608" + "\10\u868d\10\u8712\10\u8797\10\u881c\10\u88a1\10\u8926\10\u89ab\10\u8a30" + "\10\u8ab5\10\u8b3a\10\u8bbf\10\u8c44\10\u8cc9\10\u8d4e\10\u8dd3\10\u8e58" + "\10\u8edd\10\u8f62\10\u8fe7\10\u906c\10\u90f1\10\u9176\10\u91fb\10\u9280" + "\4\u25ec\10\u9305\10\u938a\10\u940f\10\u9494\10\u9519\10\u959e\10\u9623" + "\10\u96a8\10\u972d\10\u97b2\10\u9837\10\u98bc\10\u9941\10\u99c6\10\u9a4b" + "\10\u9ad0\10\u9b55\10\u9bda\10\u9c5f\10\u9ce4\10\u9d69\10\u9dee\10\u9e73" + "\10\u9ef8\10\u9f7d\10\ua002\10\ua087\10\ua10c\10\ua191\10\ua216\10\ua29b" + "\10\ua320\10\ua3a5\10\ua42a\10\ua4af\10\ua534\10\ua5b9\10\ua63e\10\ua6c3" + "\10\ua748\10\ua7cd\10\ua852\10\ua8d7\10\ua95c\10\ua9e1\10\uaa66\10\uaaeb" + "\10\uab70\10\uabf5\10\uac7a\10\uacff\10\uad84\10\uae09\10\uae8e\10\uaf13" + "\10\uaf98\10\ub01d\10\ub0a2\10\ub127\10\ub1ac\10\ub231\10\ub2b6\10\ub33b" + "\10\ub3c0\10\ub445\10\ub4ca\4\uc675\4\uc77f\4\uc804\10\ub54f\10\ub5d4" + "\4\ucdbb\10\ub659\10\ub6de\10\ub763\10\ub7e8\10\ub86d\10\ub8f2\10\ub977" + "\10\ub9fc\0\uad01\10\uba81\10\ubb06\0\ub01f\10\ubb8b\10\ubc10\10\ubc95" + "\10\ubd1a\10\ubd9f\10\ube24\10\ubea9\10\ubf2e\10\ubfb3\10\uc038\10\uc0bd" + "\10\uc142\10\uc1c7\10\uc24c\10\uc2d1\10\uc356\10\uc3db\10\uc460\10\uc4e5" + "\10\uc56a\10\uc5ef\10\uc674\10\uc6f9\10\uc77e\10\uc803\10\uc888\10\uc90d" + "\10\uc992\10\uca17\10\uca9c\10\ucb21\10\ucba6\0\u0f96\10\ucc2b\10\uccb0" + "\10\ucd35\0\u0f96\10\ucdba\10\uce3f\0\u0f96\10\ucec4\10\ucf49\10\ucfce" + "\10\ud053\10\ud0d8\10\ud15d\10\ud1e2\10\ud267\10\ud2ec\10\ud371\10\ud3f6" + "\10\ud47b\10\ud500\10\ud585\10\ud60a\10\ud68f\0\u0f96\10\ud714\10\ud799" + "\10\ud81e\10\ud8a3\10\ud928\10\ud9ad\10\uda32\10\udab7\10\udb3c\10\udbc1" + "\1\u47d3\10\udc46\10\udccb\4\u440e\10\udd50\10\uddd5\10\ude5a\10\udedf" + "\10\udf64\10\udfe9\5\u14e8\4\u5533\10\ue06e\10\ue0f3\10\ue178\10\ue1fd" + "\10\ue282\10\ue307\10\ue38c\10\ue411\10\ue496\10\ue51b\10\ue5a0\10\ue625" + "\10\ue6aa\10\ue72f\10\ue7b4\10\ue839\10\ue8be\10\ue943\10\ue9c8\10\uea4d" + "\10\uead2\10\ueb57\10\uebdc\10\uec61\10\uece6\10\ued6b\10\uedf0\10\uee75" + "\10\ueefa\10\uef7f\10\uf004\10\uf089\10\uf10e\10\uf193\10\uf218\10\uf29d" + "\10\uf322\10\uf3a7\10\uf42c\10\uf4b1\10\uf536\10\uf5bb\10\uf640\10\uf6c5" + "\10\uf74a\10\uf7cf\10\uf854\10\uf8d9\10\uf95e\10\uf9e3\10\ufa68\10\ufaed" + "\10\ufb72\10\ufbf7\10\ufc7c\10\ufd01\10\ufd86\10\ufe0b\10\ufe90\0\u0d82" + "\0\u0f96\10\uff15\10\uff15\10\uff9a\11\37\11\244\11\u0129\11\u01ae" + "\11\u0233\11\u02b8\11\u033d\11\u03c2\11\u0447\11\u04cc\11\u0551\11\u05d6" + "\11\u065b\11\u06e0\11\u0765\11\u07ea\11\u086f\11\u08f4\11\u0979\11\u09fe" + "\11\u0a83\11\u0b08\11\u0b8d\11\u0c12\11\u0c97\11\u0d1c\11\u0da1\11\u0e26" + "\11\u0eab\11\u0f30\11\u0fb5\11\u103a\11\u10bf\11\u1144\11\u11c9\11\u124e" + "\11\u12d3\4\ua3a6\10\uf10e\11\u1358\11\u13dd\11\u1462\11\u14e7\11\u156c" + "\11\u15f1\0\ub01f\0\uad01\11\u1676\11\u16fb\11\u1780\11\u1805\11\u188a" + "\11\u190f\11\u1994\11\u1a19\0\ubf30\11\u1a9e\11\u1b23\0\ub01f\0\u0f96" + "\0\ub0a4\0\ub129\0\ub233\0\uad01\4\u3f61\0\ub33d\4\u3fe6\0\ub4cc" + "\0\uba83\0\u0d82\0\ubb08\0\ubb8d\0\ubc12\4\u3ab4\4\u4175\4\u41fa" + "\0\ubeab\4\u427f\0\ubf30\0\ubfb5\4\u4acf\1\u5b0c\1\u5e2a\1\u5f34" + "\1\u5fb9\4\u4a4a\11\u1ba8\11\u1c2d\0\ub01f\4\u2e3c\11\u1cb2\11\u1d37" + "\11\u1dbc\11\u1e41\11\u1ec6\11\u1f4b\4\uf42d\0\ue6ac\11\u1fd0\4\u3bbe" + "\11\u2055\11\u20da\11\u215f\11\u21e4\11\u2269\11\u22ee\11\u2373\11\u23f8" + "\11\u247d\11\u2502\11\u2587\11\u260c\11\u2691\11\u2716\11\u279b\11\u2820" + "\11\u28a5\11\u292a\11\u29af\11\u2a34\11\u2ab9\11\u2b3e\11\u2bc3\11\u2c48" + "\11\u2ccd\11\u2d52\11\u2dd7\11\u2e5c\11\u2ee1\11\u2f66\11\u2feb\11\u3070" + "\11\u30f5\11\u317a\11\u31ff\11\u3284\11\u3309\11\u338e\11\u3413\11\u3498" + "\11\u351d\11\u35a2\11\u3627\11\u36ac\11\u3731\11\u37b6\11\u383b\11\u38c0" + "\11\u3945\11\u39ca\11\u3a4f\11\u3ad4\11\u3b59\11\u3bde\11\u3c63\11\u3ce8" + "\11\u3d6d\11\u3df2\11\u3e77\11\u3efc\11\u3f81\11\u4006\11\u408b\11\u4110" + "\11\u4195\11\u421a\11\u429f\11\u4324\11\u43a9\11\u442e\11\u44b3\11\u4538" + "\11\u45bd\11\u4642\11\u46c7\0\uad01\11\u474c\11\u47d1\11\u4856\11\u48db" + "\11\u4960\11\u49e5\11\u4a6a\11\u4aef\11\u4b74\11\u4bf9\11\u4c7e\11\u4d03" + "\11\u4d88\11\u4e0d\11\u4e92\11\u4f17\11\u4f9c\11\u5021\11\u50a6\11\u512b" + "\11\u51b0\11\u5235\11\u52ba\11\u533f\11\u53c4\11\u5449\11\u54ce\11\u5553" + "\11\u55d8\11\u565d\11\u56e2\11\u5767\11\u57ec\11\u5871\11\u58f6\11\u597b" + "\11\u5a00\11\u5a85\5\u156d\1\u5eaf\11\u5b0a\11\u5b8f\11\u5c14\11\u5c99" + "\11\u5d1e\11\u5da3\11\u5e28\11\u5ead\11\u5f32\11\u5fb7\11\u603c\11\u60c1" + "\11\u6146\11\u61cb\11\u6250\11\u62d5\11\u635a\11\u63df\11\u6464\11\u64e9" + "\11\u656e\11\u65f3\11\u6678\11\u66fd\11\u6782\11\u6807\11\u688c\11\u6911" + "\11\u6996\11\u6a1b\11\u6aa0\11\u6b25\11\u6baa\11\u6c2f\11\u6cb4\11\u6d39" + "\11\u6dbe\11\u6e43\11\u6ec8\11\u6f4d\11\u6fd2\11\u7057\11\u70dc\11\u7161" + "\11\u71e6\11\u726b\11\u72f0\11\u7375\11\u73fa\11\u747f\11\u7504\11\u7589" + "\11\u760e\11\u7693\11\u7718\11\u779d\11\u7822\11\u78a7\11\u792c\11\u79b1" + "\11\u7a36\11\u7abb\11\u7b40\11\u7bc5\11\u7c4a\11\u7ccf\11\u7d54\11\u7dd9" + "\11\u7e5e\11\u7ee3\11\u7f68\11\u7fed\11\u8072\11\u80f7\11\u817c\11\u8201" + "\11\u8286\11\u830b\11\u8390\11\u8415\11\u849a\11\u851f\11\u85a4\11\u8629" + "\11\u86ae\11\u8733\11\u87b8\11\u883d\11\u88c2\11\u8947\11\u89cc\11\u8a51" + "\11\u8ad6\11\u8b5b\11\u8be0\11\u8c65\11\u8cea\11\u8d6f\11\u8df4\11\u8e79" + "\11\u8efe\11\u8f83\11\u9008\11\u908d\11\u9112\11\u9197\11\u921c\11\u92a1" + "\11\u9326\11\u93ab\11\u9430\11\u94b5\11\u953a\11\u95bf\11\u9644\11\u96c9" + "\11\u974e\11\u97d3\11\u9858\11\u98dd\11\u9962\11\u99e7\11\u9a6c\11\u9af1" + "\11\u9b76\11\u9bfb\11\u9c80\11\u9d05\11\u9d8a\11\u9e0f\11\u9e94\11\u9f19" + "\11\u9f9e\11\ua023\11\ua0a8\11\ua12d\11\ua1b2\11\ua237\11\ua2bc\11\ua341" + "\11\ua3c6\11\ua44b\11\ua4d0\11\ua555\11\ua5da\11\ua65f\11\ua6e4\11\ua769" + "\11\ua7ee\11\ua873\11\ua8f8\11\ua97d\11\uaa02\11\uaa87\11\uab0c\11\uab91" + "\11\uac16\11\uac9b\11\uad20\11\uada5\11\uae2a\11\uaeaf\11\uaf34\11\uafb9" + "\11\ub03e\11\ub0c3\11\ub148\11\ub1cd\11\ub252\11\ub2d7\11\ub35c\11\ub3e1" + "\11\ub466\11\ub4eb\11\ub570\11\ub5f5\11\ub67a\11\ub6ff\11\ub784\11\ub809" + "\11\ub88e\11\ub913\11\ub998\11\uba1d\11\ubaa2\11\ubb27\11\ubbac\11\ubc31" + "\11\ubcb6\11\ubd3b\11\ubdc0\11\ube45\11\ubeca\11\ubf4f\11\ubfd4\11\uc059" + "\11\uc0de\11\uc163\11\uc1e8\11\uc26d\11\uc2f2\11\uc377\11\uc3fc\11\uc481" + "\11\uc506\11\uc58b\11\uc610\11\uc695\11\uc71a\11\uc79f\11\uc824\11\uc8a9" + "\11\uc92e\11\uc9b3\11\uca38\11\ucabd\11\ucb42\11\ucbc7\11\ucc4c\11\uccd1" + "\11\ucd56\11\ucddb\11\uce60\11\ucee5\11\ucf6a\11\ucfef\11\ud074\11\ud0f9" + "\11\ud17e\11\ud203\11\ud288\11\ud30d\11\ud392\11\ud417\11\ud49c\11\ud521" + "\11\ud5a6\11\ud62b\11\ud6b0\11\ud735\11\ud7ba\11\ud83f\11\ud8c4\11\ud949" + "\11\ud9ce\11\uda53\11\udad8\11\udb5d\11\udbe2\11\udc67\11\udcec\11\udd71" + "\11\uddf6\11\ude7b\11\udf00\11\udf85\11\ue00a\11\ue08f\11\ue114\11\ue199" + "\11\ue21e\11\ue2a3\11\ue328\11\ue3ad\11\ue432\11\ue4b7\11\ue53c\0\ub0a4" + "\0\ub2b8\11\ue5c1\11\ue646\0\ubeab\11\ue6cb\11\ue750\11\ue7d5\11\ue85a" + "\11\ue8df\11\ue964\11\ue9e9\11\uea6e\11\ueaf3\11\ueb78\11\uebfd\11\uec82" + "\11\ued07\11\ued8c\11\uee11\11\uee96\11\uef1b\11\uefa0\11\uf025\11\uf0aa" + "\11\uf12f\11\uf1b4\11\uf239\11\uf2be\11\uf343\11\uf3c8\11\uf44d\11\uf4d2" + "\11\uf557\11\uf5dc\11\uf661\11\uf6e6\11\uf76b\11\uf7f0\11\uf875\11\uf8fa" + "\11\uf97f\11\ufa04\11\ufa89\11\ufb0e\11\ufb93\11\ufc18\11\ufc9d\11\ufd22" + "\11\ufda7\11\ufe2c\11\ufeb1\11\uff36\11\uffbb\12\100\12\305\12\u014a" + "\12\u01cf\12\u0254\12\u02d9\12\u035e\12\u03e3\12\u0468\12\u04ed\12\u0572" + "\12\u05f7\12\u067c\12\u0701\12\u0786\12\u080b\12\u0890\12\u0915\12\u099a" + "\12\u0a1f\12\u0468\12\u0aa4\12\u0b29\12\u0bae\12\u0c33\12\u0cb8\12\u0d3d" + "\12\u0dc2\12\u0e47\12\u0ecc\12\u0f51\12\u0fd6\12\u105b\12\u10e0\12\u1165" + "\12\u11ea\12\u126f\12\u12f4\12\u1379\12\u13fe\12\u1483\12\u1508\12\u158d" + "\12\u1612\12\u1697\12\u171c\12\u17a1\12\u1826\12\u18ab\12\u1930\12\u19b5" + "\12\u1a3a\12\u1abf\12\u1b44\12\u1bc9\12\u1c4e\12\u1cd3\12\u1d58\12\u1ddd" + "\12\u171c\12\u1e62\12\u035e\12\u1ee7\12\u1f6c\12\u1ff1\12\u2076\12\u20fb" + "\12\u2180\12\u2205\12\u228a\12\u230f\12\u2394\12\u2419\12\u249e\12\u2523" + "\12\u25a8\12\u262d\12\u26b2\12\u2737\12\u27bc\12\u2841\12\u28c6\12\u294b" + "\12\u29d0\12\u2a55\12\u2ada\12\u2b5f\12\u2be4\12\u2c69\12\u2cee\12\u2d73" + "\12\u2df8\12\u2e7d\12\u2f02\12\u2f87\12\u300c\12\u3091\12\u3116\12\u319b" + "\12\u3220\12\u32a5\12\u332a\12\u33af\12\u3434\12\u34b9\12\u353e\12\u35c3" + "\12\u3648\12\u36cd\12\u3752\12\u37d7\12\u385c\12\u38e1\12\u3966\12\u39eb" + "\12\u3a70\12\u3af5\12\u3b7a\12\u3bff\12\u3c84\12\u3d09\12\u3d8e\12\u3e13" + "\12\u3e98\12\u3f1d\12\u3fa2\12\u4027\12\u40ac\12\u4131\12\u41b6\12\u423b" + "\12\u42c0\12\u4345\12\u43ca\12\u444f\12\u44d4\12\u4559\12\u45de\12\u4663" + "\12\u46e8\12\u476d\12\u47f2\12\u4877\12\u48fc\12\u4981\12\u4a06\12\u4a8b" + "\12\u4b10\12\u4b95\12\u4c1a\12\u4c9f\12\u4d24\12\u4da9\12\u4e2e\12\u4eb3" + "\12\u4f38\12\u4fbd\12\u5042\12\u50c7\12\u514c\12\u51d1\12\u5256\12\u52db" + "\12\u5360\12\u53e5\12\u546a\12\u54ef\12\u5574\12\u55f9\12\u567e\12\u5703" + "\12\u5788\12\u580d\12\u5892\12\u5917\12\u599c\12\u5a21\12\u5aa6\12\u5b2b" + "\12\u5bb0\12\u5c35\12\u5cba\12\u5d3f\12\u5dc4\12\u5e49\12\u5ece\12\u5f53" + "\12\u5fd8\12\u605d\12\u60e2\12\u6167\12\u61ec\12\u6271\12\u62f6\12\u637b" + "\12\u6400\12\u6485\12\u650a\12\u03e3\12\u658f\12\u6614\12\u6699\12\u671e" + "\12\u67a3\12\u6828\12\u68ad\12\u6932\12\u69b7\12\u6a3c\12\u6ac1\12\u6b46" + "\12\u6bcb\12\u6c50\12\u6cd5\12\u6d5a\12\u6ddf\12\u6e64\12\u6ee9\12\u6f6e" + "\12\u6ff3\12\u7078\12\u70fd\12\u7182\12\u7207\12\u728c\12\u7311\12\u7396" + "\12\u741b\12\u74a0\12\u7525\12\u75aa\12\u762f\12\u76b4\12\u7739\12\u77be" + "\12\u70fd\12\u5fd8\12\u7843\12\u78c8\12\u794d\12\u79d2\12\u7a57\12\u7adc" + "\12\u7b61\12\u7be6\12\u7c6b\12\u7cf0\12\u7d75\12\u7dfa\12\u7e7f\12\u7f04" + "\12\u7f89\12\u800e\12\u8093\12\u8118\12\u819d\12\u8222\12\u82a7\12\u832c" + "\12\u83b1\12\u8436\12\u84bb\12\u8540\12\u85c5\12\u864a\12\u86cf\12\u8754" + "\12\u87d9\12\u885e\12\u88e3\12\u8968\12\u89ed\12\u8a72\12\u8af7\12\u8b7c" + "\12\u8c01\12\u8c86\12\u8d0b\0\uf29f\1\ua6e6\12\u8d90\12\u8e15\2\u1e64" + "\1\u04ce\12\u8e9a\12\u8f1f\12\u8fa4\12\u9029\12\u90ae\12\u9133\12\u91b8" + "\12\u923d\12\u92c2\12\u9347\12\u93cc\12\u9451\12\u94d6\12\u955b\12\u95e0" + "\12\u9665\12\u96ea\12\u976f\12\u97f4\12\u9879\12\u98fe\12\u9983\12\u9a08" + "\12\u9a8d\12\u9b12\12\u9b97\12\u9c1c\5\uf2bf\12\u9ca1\12\u9d26\12\u9dab" + "\12\u9e30\12\u9eb5\12\u9f3a\12\u9fbf\12\ua044\12\ua0c9\12\ua14e\12\ua1d3" + "\12\ua258\12\ua2dd\12\ua362\12\ua3e7\12\ua46c\12\ua4f1\12\ua576\12\ua5fb" + "\12\ua680\12\ua705\12\ua78a\12\ua80f\12\ua894\12\ua919\1\ue32a\1\ue434" + "\1\ue4b9\5\u8f84\1\ue648\1\ueb7a\1\uebff\1\uec84\5\u8be1\5\u974f" + "\2\u6cd7\2\u6ff5\2\u707a\2\u70ff\5\u96ca\12\ua99e\12\uaa23\12\uaaa8" + "\12\uab2d\5\ua12e\12\uabb2\12\uac37\12\uacbc\5\uaa03\12\uad41\5\ub0c4" + "\12\uadc6\12\uae4b\12\uaed0\2\u5cbc\12\uaf55\12\uafda\12\ub05f\12\ub0e4" + "\12\ub169\12\ub1ee\12\ub273\12\ub2f8\2\u0360\12\ub37d\12\ub402\12\ub487" + "\12\ub50c\12\ub591\12\ub616\12\ub69b\12\ub720\12\ub7a5\12\ub82a\12\ub8af" + "\12\ub934\12\ub9b9\12\uba3e\12\ubac3\12\ubb48\12\ubbcd\12\ubc52\12\ubcd7" + "\12\ubd5c\12\ubde1\12\ube66\12\ubeeb\12\ubf70\12\ubff5\12\uc07a\12\uc0ff" + "\12\uc184\12\uc209\12\uc28e\12\uc313\12\uc398\12\uc41d\12\uc4a2\12\uc527" + "\12\uc5ac\12\uc631\12\uc6b6\12\uc73b\12\uc7c0\12\uc845\12\uc8ca\12\uc94f" + "\12\uc9d4\12\uca59\12\ucade\12\ucb63\12\ucbe8\12\ucc6d\12\uccf2\12\ucd77" + "\12\ucdfc\12\uce81\12\ucf06\12\ucf8b\12\ud010\12\ud095\12\ud11a\12\ud19f" + "\12\ud224\12\ud2a9\12\ud32e\12\ud3b3\12\ud438\12\ud4bd\12\ud542\12\ud5c7" + "\12\ud64c\12\ud6d1\12\ud756\12\ud7db\12\ud860\12\ud8e5\12\ud96a\12\ud9ef" + "\12\uda74\12\udaf9\12\udb7e\12\udc03\12\udc88\12\udd0d\12\udd92\12\ude17" + "\12\ude9c\12\udf21\12\udfa6\12\ue02b\6\u5789\12\ue0b0\12\ue135\12\ue1ba" + "\12\ue23f\12\ue2c4\12\ue349\12\ue3ce\12\ue453\12\ue4d8\12\ue55d\12\ue5e2" + "\12\ue667\12\ue6ec\12\ue771\12\ue7f6\12\ue87b\12\ue900\12\ue985\12\uea0a" + "\12\uea8f\12\ueb14\0\u0f96\0\u0d82\12\ueb99\12\uec1e\12\ueca3\12\ued28" + "\12\uedad\12\uee32\12\ueeb7\12\uef3c\12\uefc1\12\uf046\12\uf0cb\12\uf150" + "\12\uf1d5\12\uf25a\12\uf2df\12\uf364\12\uf3e9\12\uf46e\12\uf4f3\12\uf578" + "\12\uf5fd\12\uf682\6\u6f6f\12\uf707\12\uf78c\12\uf811\12\uf896\12\uf91b" + "\12\uf9a0\12\ufa25\12\ufaaa\12\ufb2f\12\ufbb4\12\ufc39\12\ufcbe\12\ufd43" + "\12\ufdc8\12\ufe4d\12\ufed2\12\uff57\12\uffdc\13\141\13\346\13\u016b" + "\13\u01f0\13\u0275\13\u02fa\13\u037f\13\u0404\13\u0489\13\u050e\13\u0593" + "\13\u0618\13\u069d\13\u0722\13\u07a7\13\u082c\13\u08b1\13\u0936\13\u09bb" + "\13\u0a40\13\u0ac5\13\u0b4a\13\u0bcf\13\u0c54\13\u0cd9\13\u0d5e\13\u0de3" + "\13\u0e68\13\u0eed\13\u0f72\13\u0ff7\13\u107c\13\u1101\13\u1186\13\u120b" + "\13\u1290\13\u1315\13\u139a\13\u141f\13\u14a4\13\u1529\13\u15ae\13\u1633" + "\13\u16b8\13\u173d\13\u17c2\13\u1847\13\u18cc\13\u1951\13\u19d6\13\u1a5b" + "\13\u1ae0\13\u1b65\13\u1bea\13\u1c6f\13\u1cf4\13\u1d79\13\u1dfe\13\u1e83" + "\13\u1f08\13\u1f8d\13\u2012\13\u2097\13\u211c\13\u21a1\13\u2226\13\u22ab" + "\13\u2330\13\u23b5\13\u243a\13\u24bf\13\u2544\13\u25c9\6\ua91a\13\u264e" + "\13\u26d3\13\u2758\13\u27dd\13\u2862\13\u28e7\13\u296c\13\u29f1\13\u2a76" + "\13\u2afb\13\u2b80\13\u2c05\13\u2c8a\13\u2d0f\13\u2d94\13\u2e19\13\u2e9e" + "\13\u2f23\13\u2fa8\13\u302d\13\u30b2\13\u3137\13\u31bc\13\u3241\13\u32c6" + "\12\u9983\13\u334b\13\u33d0\13\u3455\13\u34da\13\u355f\13\u35e4\13\u3669" + "\13\u36ee\13\u3773\13\u37f8\13\u387d\13\u3902\13\u3987\13\u3a0c\13\u3a91" + "\13\u3b16\13\u3b9b\13\u3c20\13\u3ca5\13\u3d2a\13\u3daf\13\u3e34\13\u3eb9" + "\13\u3f3e\13\u3fc3\13\u4048\13\u40cd\13\u4152\13\u41d7\13\u425c\13\u42e1" + "\13\u4366\13\u43eb\13\u4470\13\u44f5\13\u457a\13\u45ff\13\u4684\13\u4709" + "\13\u478e\13\u4813\13\u4898\13\u491d\13\u49a2\13\u4a27\13\u4aac\13\u4b31" + "\13\u4bb6\13\u4c3b\13\u4cc0\13\u4d45\13\u4dca\13\u4e4f\13\u4ed4\13\u4f59" + "\13\u4fde\13\u5063\13\u50e8\13\u516d\13\u51f2\13\u5277\13\u52fc\13\u5381" + "\13\u5406\13\u548b\13\u5510\13\u5595\13\u561a\13\u569f\13\u5724\13\u57a9" + "\13\u582e\13\u58b3\13\u5938\13\u59bd\13\u5a42\13\u5ac7\13\u5b4c\13\u5bd1" + "\13\u5c56\13\u5cdb\13\u5d60\13\u5de5\13\u5e6a\13\u5eef\13\u5f74\13\u5ff9" + "\13\u607e\13\u6103\13\u6188\13\u620d\13\u6292\13\u6317\13\u639c\13\u6421" + "\13\u64a6\13\u652b\13\u65b0\13\u6635\13\u66ba\13\u673f\13\u67c4\13\u6849" + "\13\u68ce\13\u6953\13\u69d8\13\u6a5d\13\u6ae2\13\u6b67\13\u6bec\13\u6c71" + "\13\u6cf6\13\u6d7b\13\u6e00\13\u6e85\13\u6f0a\13\u6f8f\13\u7014\13\u7099" + "\13\u711e\13\u71a3\13\u7228\13\u72ad\13\u7332\13\u73b7\13\u743c\13\u74c1" + "\13\u7546\13\u75cb\13\u7650\13\u76d5\13\u775a\13\u77df\13\u7864\13\u78e9" + "\13\u796e\13\u79f3\13\u7a78\13\u7afd\13\u7b82\13\u7c07\13\u7c8c\13\u7d11" + "\13\u7d96\13\u7e1b\13\u7ea0\13\u7f25\13\u7faa\13\u802f\13\u80b4\13\u8139" + "\13\u81be\13\u8243\13\u82c8\13\u834d\13\u83d2\13\u8457\13\u84dc\13\u8561" + "\13\u85e6\13\u866b\13\u86f0\13\u8775\13\u87fa\13\u887f\13\u8904\13\u8989" + "\13\u8a0e\13\u8a93\13\u8b18\13\u8b9d\13\u8c22\13\u8ca7\13\u8d2c\13\u8db1" + "\13\u8e36\13\u8ebb\13\u8f40\13\u8fc5\13\u904a\13\u90cf\13\u9154\13\u91d9" + "\13\u925e\13\u92e3\13\u9368\13\u93ed\13\u9472\13\u94f7\13\u957c\13\u9601" + "\13\u9686\13\u970b\13\u9790\13\u9815\13\u989a\13\u991f\13\u99a4\13\u9a29" + "\13\u9aae\13\u9b33\13\u9bb8\13\u9c3d\13\u9cc2\13\u9d47\13\u9dcc\13\u9e51" + "\13\u9ed6\13\u9f5b\13\u9fe0\13\ua065\13\ua0ea\13\ua16f\13\ua1f4\13\ua279" + "\13\ua2fe\13\ua383\13\ua408\13\ua48d\0\ub0a4\0\ub2b8\0\u0f96\13\ua512" + "\13\ua597\0\ubeab\13\ua61c\13\ua6a1\13\ua726\13\ua7ab\13\ua830\13\ua8b5" + "\13\ua93a\13\ua9bf\13\uaa44\13\uaac9\13\uab4e\13\uabd3\13\uac58\13\uacdd" + "\13\uad62\13\uade7\13\uae6c\13\uaef1\13\uaf76\13\uaffb\13\ub080\13\ub105" + "\13\ub18a\13\ub20f\13\ub294\13\ub319\13\ub39e\13\ub423\13\ub4a8\13\ub52d" + "\13\ub5b2\13\ub637\13\ub6bc\13\ub741\13\ub7c6\13\ub84b\13\ub8d0\13\ub955" + "\13\ub9da\13\uba5f\13\ubae4\13\ubb69\13\ubbee\13\ubc73\13\ubcf8\13\ubd7d" + "\13\ube02\13\ube87\13\ubf0c\13\ubf91\13\uc016\13\uc09b\13\uc120\13\uc1a5" + "\13\uc22a\13\uc2af\13\uc334\13\uc3b9\13\uc43e\13\uc4c3\13\uc548\13\uc5cd" + "\13\uc652\13\uc6d7\13\uc75c\13\uc7e1\13\uc866\13\uc8eb\13\uc970\13\uc3b9" + "\13\uc9f5\13\uca7a\13\ucaff\13\ucb84\13\ucc09\13\ucc8e\13\ucd13\13\ucd98" + "\13\uce1d\13\ucea2\13\ucf27\13\ucfac\13\ud031\13\ud0b6\13\ud13b\13\ud1c0" + "\13\ud245\13\ud2ca\13\ud34f\13\ud3d4\13\ud459\13\ud4de\13\ud563\13\ud5e8" + "\13\ud66d\13\ud6f2\13\ud777\13\ud7fc\13\ud881\13\ud906\13\ud98b\13\uda10" + "\13\uda95\13\udb1a\13\udb9f\13\udc24\13\udca9\13\udd2e\13\uddb3\13\ud6f2" + "\13\ude38\13\uc2af\13\udebd\13\udf42\13\udfc7\13\ue04c\13\ue0d1\13\ue156" + "\13\ue1db\13\ue260\13\ue2e5\13\ue36a\13\ue3ef\13\ue474\13\ue4f9\13\ue57e" + "\13\ue603\13\ue688\13\ue70d\13\ue792\13\ue817\13\ue89c\13\ue921\13\ue9a6" + "\13\uea2b\13\ueab0\13\ueb35\13\uebba\13\uec3f\13\uecc4\13\ued49\13\uedce" + "\13\uee53\13\ueed8\13\uef5d\13\uefe2\13\uf067\13\uf0ec\13\uf171\13\uf1f6" + "\13\uf27b\13\uf300\13\uf385\13\uf40a\13\uf48f\13\uf514\13\uf599\13\uf61e" + "\13\uf6a3\13\uf728\13\uf7ad\13\uf832\13\uf8b7\13\uf93c\13\uf9c1\13\ufa46" + "\13\ufacb\13\ufb50\13\ufbd5\13\ufc5a\13\ufcdf\13\ufd64\13\ufde9\13\ufe6e" + "\13\ufef3\13\uff78\13\ufffd\14\202\14\u0107\14\u018c\14\u0211\14\u0296" + "\14\u031b\14\u03a0\14\u0425\14\u04aa\14\u052f\14\u05b4\14\u0639\14\u06be" + "\14\u0743\14\u07c8\14\u084d\14\u08d2\14\u0957\14\u09dc\14\u0a61\14\u0ae6" + "\14\u0b6b\14\u0bf0\14\u0c75\14\u0cfa\14\u0d7f\14\u0e04\14\u0e89\14\u0f0e" + "\14\u0f93\14\u1018\14\u109d\14\u1122\14\u11a7\14\u122c\14\u12b1\14\u1336" + "\14\u13bb\14\u1440\14\u14c5\14\u154a\14\u15cf\14\u1654\14\u16d9\14\u175e" + "\14\u17e3\14\u1868\14\u18ed\14\u1972\14\u19f7\14\u1a7c\14\u1b01\14\u1b86" + "\14\u1c0b\14\u1c90\14\u1d15\14\u1d9a\14\u1e1f\14\u1ea4\14\u1f29\14\u1fae" + "\14\u2033\14\u20b8\14\u213d\14\u21c2\14\u2247\14\u22cc\14\u2351\14\u23d6" + "\14\u245b\14\u24e0\13\uc334\14\u2565\14\u25ea\14\u266f\14\u26f4\14\u2779" + "\14\u27fe\14\u2883\14\u2908\14\u298d\14\u2a12\14\u2a97\14\u2b1c\14\u2ba1" + "\14\u2c26\14\u2cab\14\u2d30\14\u2db5\14\u2e3a\14\u2ebf\14\u2f44\14\u2fc9" + "\14\u304e\14\u30d3\14\u3158\14\u31dd\14\u3262\14\u32e7\14\u336c\14\u33f1" + "\14\u3476\14\u34fb\14\u3580\14\u3605\14\u368a\14\u370f\14\u3794\14\u30d3" + "\14\u1fae\14\u3819\14\u389e\14\u3923\14\u39a8\14\u3a2d\14\u3ab2\14\u3b37" + "\14\u3bbc\14\u3c41\14\u3cc6\14\u3d4b\14\u3dd0\14\u3e55\14\u3eda\14\u3f5f" + "\14\u3fe4\14\u4069\14\u40ee\14\u4173\14\u41f8\14\u427d\14\u4302\14\u4387" + "\14\u440c\14\u4491\14\u4516\14\u459b\14\u4620\14\u46a5\14\u472a\14\u47af" + "\14\u4834\14\u48b9\14\u493e\14\u49c3\14\u4a48\14\u4acd\14\u4b52\14\u4bd7" + "\14\u4c5c\14\u4ce1\0\uf29f\1\ua6e6\14\u4d66\0\u0d82\14\u4deb\14\u4e70" + "\3\u2099\1\u04ce\14\u4ef5\14\u4f7a\14\u4fff\14\u5084\14\u5109\14\u518e" + "\14\u5213\14\u5298\14\u531d\14\u53a2\14\u5427\14\u54ac\14\u5531\14\u55b6" + "\14\u563b\14\u56c0\14\u5745\14\u57ca\14\u584f\14\u58d4\14\u5959\14\u59de" + "\14\u5a63\14\u5ae8\14\u5b6d\14\u5bf2\14\u5c77\7\u5a43\14\u5cfc\14\u5d81" + "\14\u5e06\14\u5e8b\14\u5f10\14\u5f95\14\u601a\14\u609f\14\u6124\14\u61a9" + "\14\u622e\14\u62b3\14\u6338\14\u63bd\14\u6442\14\u64c7\14\u654c\14\u65d1" + "\14\u6656\14\u66db\14\u6760\14\u67e5\14\u686a\14\u68ef\14\u6974\2\ue55f" + "\2\ue669\2\ue6ee\6\uf708\2\ue87d\2\uedaf\2\uee34\2\ueeb9\6\uf365" + "\6\ufed3\3\u6f0c\3\u722a\3\u72af\3\u7334\6\ufe4e\14\u69f9\14\u6a7e" + "\14\u6b03\7\u08b2\14\u6b88\14\u6c0d\7\u1187\14\u6c92\7\u1848\14\u6d17" + "\14\u6d9c\3\u5ef1\14\u6e21\14\u6ea6\14\u6f2b\14\u6fb0\14\u7035\14\u70ba" + "\14\u713f\14\u71c4\14\u7249\14\u72ce\14\u7353\3\u0595\14\u73d8\14\u745d" + "\14\u74e2\14\u7567\14\u75ec\14\u7671\14\u76f6\14\u777b\14\u7800\14\u7885" + "\14\u790a\14\u798f\14\u7a14\14\u7a99\14\u7b1e\14\u7ba3\14\u7c28\14\u7cad" + "\14\u7d32\14\u7db7\14\u7e3c\14\u7ec1\14\u7f46\14\u7fcb\14\u8050\14\u80d5" + "\14\u815a\14\u81df\14\u8264\14\u82e9\14\u836e\14\u83f3\14\u8478\14\u84fd" + "\14\u8582\14\u8607\14\u868c\14\u8711\14\u8796\14\u881b\14\u88a0\14\u8925" + "\14\u89aa\14\u8a2f\14\u8ab4\14\u8b39\14\u8bbe\14\u8c43\14\u8cc8\14\u8d4d" + "\14\u8dd2\14\u8e57\14\u8edc\14\u8f61\14\u8fe6\14\u906b\14\u90f0\14\u9175" + "\14\u91fa\14\u927f\14\u9304\14\u9389\14\u940e\14\u9493\14\u9518\14\u959d" + "\14\u9622\14\u96a7\14\u972c\14\u97b1\14\u9836\14\u98bb\14\u9940\14\u99c5" + "\14\u9a4a\14\u9acf\14\u9b54\14\u9bd9\14\u9c5e\14\u9ce3\14\u9d68\14\u9ded" + "\14\u9e72\14\u9ef7\14\u9f7c\14\ua001\0\uad01\14\ua086\7\ubf0d\14\ua10b" + "\14\ua190\14\ua215\14\ua29a\14\ua31f\14\ua3a4\14\ua429\14\ua4ae\14\ua533" + "\14\ua5b8\14\ua63d\14\ua6c2\14\ua747\14\ua7cc\14\ua851\14\ua8d6\14\ua95b" + "\14\ua9e0\14\uaa65\14\uaaea\14\uab6f\0\u0f96\0\u0d82\14\uabf4\14\uac79" + "\14\uacfe\14\uad83\14\uae08\14\uae8d\14\uaf12\14\uaf97\14\ub01c\14\ub0a1" + "\14\ub126\14\ub1ab\14\ub230\14\ub2b5\14\ub33a\14\ub3bf\14\ub444\14\ub4c9" + "\14\ub54e\14\ub5d3\14\ub658\14\ub6dd\7\ud6f3\14\ub762\14\ub7e7\14\ub86c" + "\14\ub8f1\14\ub976\14\ub9fb\14\uba80\14\ubb05\14\ubb8a\14\ubc0f\14\ubc94" + "\14\ubd19\14\ubd9e\14\ube23\14\ubea8\14\ubf2d\14\ubfb2\14\uc037\14\uc0bc" + "\14\uc141\14\uc1c6\14\uc24b\14\uc2d0\14\uc355\14\uc3da\14\uc45f\14\uc4e4" + "\14\uc569\14\uc5ee\14\uc673\14\uc6f8\14\uc77d\14\uc802\14\uc887\14\uc90c" + "\14\uc991\14\uca16\14\uca9b\14\ucb20\14\ucba5\14\ucc2a\14\uccaf\14\ucd34" + "\14\ucdb9\14\uce3e\14\ucec3\14\ucf48\14\ucfcd\14\ud052\14\ud0d7\14\ud15c" + "\14\ud1e1\14\ud266\14\ud2eb\14\ud370\14\ud3f5\14\ud47a\14\ud4ff\14\ud584" + "\14\ud609\14\ud68e\14\ud713\14\ud798\14\ud81d\14\ud8a2\14\ud927\14\ud9ac" + "\14\uda31\14\udab6\14\udb3b\14\udbc0\14\udc45\14\udcca\14\udd4f\14\uddd4" + "\14\ude59\14\udede\14\udf63\14\udfe8\14\ue06d\14\ue0f2\14\ue177\14\ue1fc" + "\14\ue281\14\ue306\14\ue38b\14\ue410\14\ue495\14\ue51a\14\ue59f\14\ue624" + "\10\u109e\14\ue6a9\14\ue72e\14\ue7b3\14\ue838\14\ue8bd\14\ue942\14\ue9c7" + "\14\uea4c\14\uead1\14\ueb56\14\uebdb\14\uec60\14\uece5\14\ued6a\14\uedef" + "\14\uee74\14\ueef9\14\uef7e\14\uf003\14\uf088\14\uf10d\14\uf192\14\uf217" + "\14\uf29c\14\uf321\14\u59de\14\uf3a6\14\uf42b\14\uf4b0\14\uf535\14\uf5ba" + "\14\uf63f\14\uf6c4\14\uf749\14\uf7ce\14\uf853\14\uf8d8\14\uf95d\14\uf9e2" + "\14\ufa67\14\ufaec\14\ufb71\14\ufbf6\14\ufc7b\14\ufd00\14\ufd85\14\ufe0a" + "\14\ufe8f\14\uff14\14\uff99\15\36\15\243\15\u0128\15\u01ad\15\u0232" + "\15\u02b7\15\u033c\15\u03c1\15\u0446\15\u04cb\15\u0550\15\u05d5\15\u065a" + "\15\u06df\15\u0764\15\u07e9\15\u086e\15\u08f3\15\u0978\15\u09fd\15\u0a82" + "\15\u0b07\15\u0b8c\15\u0c11\15\u0c96\15\u0d1b\15\u0da0\15\u0e25\15\u0eaa" + "\15\u0f2f\15\u0fb4\15\u1039\15\u10be\15\u1143\15\u11c8\15\u124d\15\u12d2" + "\15\u1357\15\u13dc\15\u1461\15\u14e6\15\u156b\15\u15f0\15\u1675\15\u16fa" + "\15\u177f\15\u1804\15\u1889\15\u190e\15\u1993\15\u1a18\15\u1a9d\15\u1b22" + "\15\u1ba7\15\u1c2c\15\u1cb1\15\u1d36\15\u1dbb\15\u1e40\15\u1ec5\15\u1f4a" + "\15\u1fcf\15\u2054\15\u20d9\15\u215e\15\u21e3\15\u2268\15\u22ed\15\u2372" + "\15\u23f7\15\u247c\15\u2501\15\u2586\15\u260b\15\u2690\15\u2715\15\u279a" + "\15\u281f\15\u28a4\15\u2929\15\u29ae\15\u2a33\15\u2ab8\15\u2b3d\15\u2bc2" + "\15\u2c47\15\u2ccc\15\u2d51\15\u2dd6\15\u2e5b\15\u2ee0\15\u2f65\15\u2fea" + "\15\u306f\15\u30f4\15\u3179\15\u31fe\15\u3283\15\u3308\4\u186a\15\u338d" + "\15\u3412\15\u3497\15\u351c\15\u35a1\15\u3626\4\u1c0d\15\u36ab\15\u3730" + "\15\u37b5\15\u383a\15\u38bf\15\u3944\15\u39c9\15\u3a4e\15\u3ad3\15\u3b58" + "\15\u3bdd\15\u3c62\15\u3ce7\15\u3d6c\15\u3df1\15\u3e76\15\u3efb\15\u3f80" + "\0\ua854\15\u4005\15\u408a\15\u410f\15\u4194\15\u4219\15\u429e\15\u4323" + "\15\u43a8\15\u442d\15\u44b2\15\u4537\15\u45bc\15\u4641\15\u46c6\15\u474b" + "\15\u47d0\15\u4855\15\u48da\15\u495f\15\u49e4\15\u4a69\15\u4aee\15\u4b73" + "\15\u4bf8\15\u4c7d\15\u4d02\15\u4d87\15\u4e0c\15\u4e91\15\u4f16\15\u4f9b" + "\15\u5020\15\u50a5\15\u512a\15\u51af\15\u5234\0\uad01\15\u52b9\15\u533e" + "\15\u53c3\15\u5448\15\u54cd\15\u5552\15\u55d7\15\u565c\15\u56e1\15\u5766" + "\15\u57eb\15\u5870\15\u58f5\15\u597a\15\u59ff\15\u5a84\15\u5b09\15\u5b8e" + "\15\u5c13\15\u5c98\15\u5d1d\15\u5da2\15\u5e27\15\u5eac\15\u5f31\15\u5fb6" + "\15\u603b\15\u60c0\15\u6145\15\u61ca\15\u624f\15\u62d4\15\u6359\15\u63de" + "\15\u6463\15\u64e8\15\u656d\15\u65f2\15\u6677\15\u66fc\15\u6781\15\u6806" + "\15\u688b\15\u6910\15\u6995\15\u6a1a\15\u6a9f\15\u6b24\15\u6ba9\15\u6c2e" + "\15\u6cb3\15\u6d38\15\u6dbd\15\u6e42\15\u6ec7\15\u6f4c\15\u6fd1\15\u7056" + "\15\u70db\15\u7160\15\u71e5\15\u726a\15\u72ef\15\u7374\15\u73f9\15\u747e" + "\15\u7503\15\u7588\15\u760d\15\u7692\15\u7717\15\u779c\15\u7821\15\u78a6" + "\15\u792b\15\u79b0\0\u0f96\15\u7a35\15\u7aba\15\u7b3f\15\u7bc4\15\u7c49" + "\15\u7cce\15\u7d53\15\u7dd8\15\u7e5d\15\u7ee2\15\u7f67\15\u7fec\15\u8071" + "\15\u80f6\15\u817b\15\u8200\15\u8285\15\u830a\15\u838f\15\u8414\15\u8499" + "\15\u851e\15\u85a3\15\u8628\15\u86ad\0\ub5d6\0\ub979\15\u8732\15\u87b7" + "\15\u883c\15\u88c1\15\u8946\15\u89cb\15\u8a50\15\u8ad5\15\u8b5a\15\u8bdf" + "\15\u8c64\15\u8ce9\15\u8d6e\15\u8df3\15\u8e78\15\u8efd\15\u8f82\15\u9007" + "\15\u908c\15\u9111\15\u9196\15\u921b\15\u92a0\15\u9325\15\u93aa\15\u942f" + "\15\u94b4\15\u9539\15\u95be\15\u9643\15\u96c8\15\u974d\15\u97d2\15\u9857" + "\15\u98dc\15\u9961\15\u99e6\15\u9a6b\15\u9af0\5\u603d\15\u9b75\15\u9bfa" + "\15\u9c7f\15\u9d04\0\u0f96\15\u9d89\15\u9e0e\15\u9e93\15\u9f18\15\u9f9d" + "\15\ua022\15\ua0a7\15\ua12c\15\ua1b1\15\ua236\15\ua2bb\15\ua340\15\ua3c5" + "\15\ua44a\15\ua4cf\15\ua554\15\ua5d9\15\ua65e\15\ua6e3\15\ua768\15\ua7ed" + "\15\ua872\15\ua8f7\15\ua97c\15\uaa01\15\uaa86\15\uab0b\15\uab90\15\uac15" + "\15\uac9a\15\uad1f\15\uada4\15\uae29\15\uaeae\15\uaf33\15\uafb8\15\ub03d" + "\15\ub0c2\15\ub147\15\ub1cc\15\ub251\15\ub2d6\15\ub35b\15\ub3e0\15\ub465" + "\15\ub4ea\15\ub56f\15\ub5f4\15\ub679\15\ub6fe\4\ua3a6\10\uf10e\15\ub783" + "\15\ub808\15\ub88d\15\ub912\15\ub997\15\uba1c\15\ubaa1\15\ubb26\15\ubbab" + "\15\ubc30\15\ubcb5\15\ubd3a\15\ubdbf\15\ube44\15\ubec9\15\ubf4e\15\ubfd3" + "\15\uc058\15\uc0dd\15\uc162\15\uc1e7\15\uc26c\15\uc2f1\0\ub5d6\0\ub979" + "\15\uc376\15\uc3fb\15\uc480\15\uc505\15\uc58a\15\uc60f\15\uc694\15\uc719" + "\15\uc79e\15\uc823\15\uc8a8\15\uc92d\15\uc9b2\15\uca37\15\ucabc\15\ucb41" + "\15\ucbc6\15\ucc4b\15\uccd0\15\ucd55\15\ucdda\15\uce5f\15\ucee4\15\ucf69" + "\15\ucfee\15\ud073\15\ud0f8\15\ud17d\15\ud202\15\ud287\15\ud30c\15\ud391" + "\15\ud416\15\ud49b\15\ud520\15\ud5a5\15\ud62a\15\ud49b\15\ud6af\15\ud734" + "\15\ud7b9\15\ud83e\15\ud8c3\15\ud948\15\ud9cd\15\uda52\15\udad7\15\udb5c" + "\15\udbe1\15\udc66\4\u4304\4\u4389\15\udceb\15\udd70\15\uddf5\15\ude7a" + "\0\uad01\15\udeff\15\udf84\15\ue009\15\ue08e\15\ue113\15\ue198\15\ue21d" + "\15\ue2a2\15\ue327\15\ue3ac\1\u5d20\15\ue431\15\ue4b6\15\ue53b\15\ue5c0" + "\15\ue645\1\u5d20\15\ue6ca\15\ue74f\15\ue7d4\15\ue859\15\ue8de\15\ue963" + "\15\ue9e8\15\uea6d\15\ueaf2\15\ueb77\15\uebfc\15\uec81\15\ueb77\15\ued06" + "\15\ued8b\15\uee10\15\uee95\15\uef1a\15\uef9f\15\uf024\15\uf0a9\15\uf12e" + "\15\uf1b3\15\uf238\15\uf2bd\15\uf342\15\uf3c7\15\uf44c\15\uf4d1\15\uf556" + "\15\uf5db\15\uf660\15\uf6e5\15\uf76a\15\uf7ef\0\u0f96\15\uf874\15\uf8f9" + "\0\u0d82\5\u5b90\15\uf97e\15\ufa03\15\ufa88\15\ufb0d\15\ufb92\15\ufc17" + "\15\ufc9c\15\ufd21\15\ufda6\15\ufe2b\15\ufeb0\15\uff35\15\uffba\16\77" + "\16\304\16\u0149\16\u01ce\16\u0253\16\u02d8\16\u035d\16\u03e2\16\u0467" + "\16\u04ec\16\u0571\16\u05f6\16\u067b\16\u0700\16\u0785\16\u080a\16\u088f" + "\16\u0914\16\u0999\16\u0a1e\16\u0aa3\16\u0b28\16\u0bad\16\u0914\16\u0c32" + "\16\u0cb7\16\u0d3c\16\u0dc1\16\u0e46\16\u0ecb\16\u0f50\16\u0fd5\16\u105a" + "\16\u10df\16\u1164\16\u11e9\16\u126e\16\u12f3\16\u1378\16\u13fd\16\u1482" + "\16\u1507\16\u158c\16\u1611\16\u1696\16\u171b\16\u17a0\16\u1825\16\u18aa" + "\16\u192f\16\u19b4\16\u1a39\16\u1abe\16\u1b43\16\u1bc8\16\u1c4d\16\u1cd2" + "\16\u1d57\16\u1ddc\16\u1e61\16\u1ee6\16\u1f6b\16\u1ff0\16\u2075\16\u20fa" + "\16\u217f\16\u2204\16\u2289\16\u230e\16\u2393\16\u2418\16\u249d\16\u2522" + "\16\u25a7\16\u262c\16\u26b1\16\u2736\16\u27bb\16\u2840\16\u28c5\16\u294a" + "\16\u29cf\16\u2a54\16\u2ad9\16\u2b5e\16\u2be3\16\u2c68\16\u2ced\16\u2d72" + "\16\u2df7\16\u2e7c\16\u2f01\16\u2f86\16\u300b\16\u3090\5\u8be1\5\u96ca" + "\16\u3115\16\u319a\16\u321f\16\u32a4\16\u3329\16\u33ae\16\u3433\16\u34b8" + "\16\u353d\16\u35c2\16\u3647\16\u36cc\16\u3751\16\u37d6\16\u385b\16\u38e0" + "\16\u3965\16\u39ea\5\u92a2\16\u3a6f\16\u3af4\16\u3b79\16\u3bfe\16\u3c83" + "\16\u3d08\16\u3d8d\16\u3e12\16\u3e97\16\u3f1c\16\u3fa1\16\u4026\16\u40ab" + "\16\u4130\16\u41b5\16\u423a\16\u42bf\16\u4344\6\u6eea\16\u43c9\16\u444e" + "\16\u44d3\16\u4558\16\u45dd\16\u4662\16\u46e7\16\u476c\16\u47f1\16\u4876" + "\16\u48fb\16\u4980\16\u4a05\16\u4a8a\16\u4b0f\16\u4b94\16\u4c19\16\u4c9e" + "\16\u4d23\16\u4da8\16\u4e2d\16\u4eb2\16\u4f37\16\u4fbc\16\u5041\16\u50c6" + "\16\u514b\16\u51d0\16\u5255\16\u52da\16\u535f\16\u53e4\16\u5469\16\u54ee" + "\16\u5573\16\u55f8\0\u0f96\16\u567d\16\u5702\16\u5787\16\u580c\16\u5891" + "\16\u5916\16\u599b\16\u5a20\16\u5aa5\16\u5b2a\16\u5baf\16\u5c34\16\u5cb9" + "\16\u5d3e\16\u5dc3\16\u5e48\16\u5ecd\16\u5f52\16\u5fd7\16\u605c\16\u60e1" + "\16\u6166\16\u61eb\16\u6270\16\u62f5\16\u637a\16\u63ff\16\u6484\16\u6509" + "\16\u658e\16\u6613\16\u6698\16\u671d\16\u67a2\0\uad01\16\u6827\16\u68ac" + "\16\u6931\16\u69b6\16\u6a3b\16\u6ac0\16\u6b45\16\u6bca\16\u6c4f\16\u6cd4" + "\16\u6d59\16\u6dde\16\u6e63\16\u6ee8\16\u6f6d\16\u6ff2\16\u7077\16\u70fc" + "\16\u7181\16\u7206\16\u728b\16\u7310\16\u7395\16\u741a\16\u749f\16\u7524" + "\16\u75a9\16\u762e\16\u76b3\16\u7738\16\u77bd\16\u7842\16\u78c7\16\u794c" + "\16\u79d1\16\u7a56\16\u7adb\16\u7b60\16\u7be5\16\u7c6a\16\u7cef\16\u7d74" + "\16\u7df9\16\u7e7e\16\u7f03\16\u7f88\0\ub01f\0\u0f96\0\uad01\0\u0d82" + "\4\u2e3c\0\ubf30\10\ubc95\10\ubd1a\10\ubd9f\10\ube24\10\ubea9\10\ubf2e" + "\10\ubfb3\10\uc038\10\uc0bd\10\uc142\10\uc1c7\4\u3796\10\uc24c\10\uc2d1" + "\10\uc356\10\uc3db\10\uc460\10\uc4e5\10\uc56a\10\uc5ef\0\ub0a4\5\u9859" + "\5\u9113\0\ub2b8\1\ue53e\5\u8be1\0\ube26\0\ubeab\16\u800d\0\u0f96" + "\5\u8df5\5\u8eff\5\u92a2\5\ua12e\2\u5aa8\2\u5cbc\6\u5789\0\ub01f" + "\0\uad01\0\u0d82\5\u95c0\5\u96ca\5\uaa03\11\ufc9d\11\ufd22\0\uac7c" + "\4\u4bd9\12\u01cf\6\u6eea\6\u55fa\16\u8092\16\u8117\16\u819c\16\u8221" + "\16\u82a6\16\u832b\16\u83b0\16\u8435\16\u84ba\16\u853f\16\u85c4\16\u8649" + "\16\u86ce\16\u8753\16\u87d8\16\u885d\16\u88e2\16\u8967\16\u89ec\16\u8a71" + "\16\u8af6\16\u8b7b\16\u8c00\16\u8c85\16\u8d0a\16\u8d8f\16\u8e14\16\u8e99" + "\16\u8f1e\16\u8fa3\16\u9028\16\u90ad\16\u9132\16\u91b7\16\u923c\16\u92c1" + "\16\u9346\16\u93cb\16\u9450\16\u94d5\16\u955a\16\u95df\16\u9664\16\u96e9" + "\16\u976e\16\u97f3\16\u9878\16\u98fd\16\u9982\1\ue752\1\uea70\16\u9a07" + "\16\u9a8c\16\u9b11\16\u9b96\16\u9c1b\16\u9ca0\16\u9d25\16\u9daa\16\u9e2f" + "\16\u9eb4\16\u9f39\16\u9fbe\16\ua043\16\ua0c8\16\ua14d\16\ua1d2\16\ua257" + "\16\ua2dc\16\ua361\16\ua3e6\16\ua46b\16\ua4f0\16\ua575\16\ua5fa\16\ua67f" + "\16\ua704\16\ua789\16\ua80e\16\ua893\16\ua918\16\ua99d\16\uaa22\16\uaaa7" + "\16\uab2c\16\uabb1\16\uac36\16\uacbb\16\uad40\16\uadc5\16\uae4a\16\uaecf" + "\16\uaf54\16\uafd9\16\ub05e\16\ub0e3\16\ub168\16\ub1ed\16\ub272\16\ub2f7" + "\16\ub37c\16\ub401\16\ub486\16\ub50b\16\ub590\16\ub615\16\ub69a\16\ub71f" + "\6\ucc6e\16\ub7a4\16\ub829\16\ub8ae\16\ub933\16\ub9b8\16\uba3d\16\ubac2" + "\16\ubb47\16\ubbcc\16\ubc51\16\ubcd6\16\ubd5b\16\ubde0\16\ube65\16\ubeea" + "\16\ubf6f\16\ubff4\16\uc079\16\uc0fe\16\uc183\16\uc208\16\uc28d\16\uc312" + "\16\uc397\16\uc41c\16\uc4a1\16\uc526\16\uc5ab\16\uc630\16\uc6b5\16\uc73a" + "\16\uc7bf\16\uc844\16\uc8c9\16\uc94e\16\uc9d3\16\uca58\16\ucadd\16\ucb62" + "\16\ucbe7\16\ucc6c\16\uccf1\16\ucd76\16\ucdfb\16\uce80\16\ucf05\16\ucf8a" + "\16\ud00f\16\ud094\5\ueaf4\16\ud119\16\ud19e\16\ud223\16\ud2a8\16\ud32d" + "\16\ud3b2\16\ud437\16\ud4bc\16\ud541\16\ud5c6\16\ud64b\16\ud6d0\16\ud755" + "\16\ud7da\16\ud85f\16\ud8e4\16\ud969\16\ud9ee\12\u4b10\16\uda73\16\udaf8" + "\16\udb7d\16\udc02\16\udc87\16\udd0c\16\udd91\16\ude16\16\ude9b\16\udf20" + "\16\udfa5\16\ue02a\16\ue0af\16\ue134\16\ue1b9\16\ue23e\16\ue2c3\16\ue348" + "\16\ue3cd\16\ue452\16\ue4d7\5\u52bb\5\u5340\5\u53c5\5\u544a\5\u54cf" + "\5\u5554\5\u55d9\4\u972e\5\u565e\5\u56e3\5\u5768\0\uf29f\2\ub489" + "\2\u105d\1\ua6e6\2\ub404\2\u1e64\1\u0449\1\u04ce\5\ue6cc\5\ue7d6" + "\5\ueaf4\6\101\5\uddf7\5\ue3ae\12\u9983\5\uf1b5\5\uf2bf\2\ub275" + "\2\uafdc\6\ua78b\1\ua7f0\12\ua1d3\16\ue55c\16\ue5e1\16\ue666\16\ue6eb" + "\16\ue770\16\ue7f5\16\ue87a\16\ue8ff\16\ue984\5\ueaf4\16\uea09\6\101" + "\2\ub275\6\u0d3e\12\u4b10\16\uea8e\5\ue3ae\12\u4b10\12\u4559\16\ueb13" + "\16\ueb98\16\uec1d\16\ueca2\16\ued27\16\uedac\16\uee31\16\ueeb6\16\uef3b" + "\16\uefc0\16\uf045\16\uf0ca\16\uf14f\16\uf1d4\16\uf259\16\uf2de\16\uf363" + "\16\uf3e8\16\uf46d\16\uf4f2\16\uf577\16\uf5fc\16\uf681\16\uf706\16\uf78b" + "\16\uf810\16\uf895\16\uf91a\16\uf99f\16\ufa24\16\ufaa9\16\ufb2e\16\ufbb3" + "\16\ufc38\16\ufcbd\16\ufd42\16\ufdc7\16\ufe4c\16\ufed1\16\uff56\16\uffdb" + "\17\140\17\345\17\u016a\17\u01ef\17\u0274\17\u02f9\17\u037e\17\u0403" + "\17\u0488\17\u050d\17\u0592\17\u0617\17\u069c\17\u0721\17\u07a6\17\u082b" + "\17\u08b0\17\u0935\17\u09ba\17\u0a3f\11\uc92e\17\u0ac4\0\u0f96\0\uad01" + "\0\ub01f\0\u0d82\1\ue752\1\uea70\17\u0b49\17\u0bce\17\u0c53\17\u0cd8" + "\17\u0d5d\17\u0de2\17\u0e67\17\u0eec\17\u0f71\15\uc9b2\15\uc9b2\15\uca37" + "\15\ucabc\15\ucb41\15\ucabc\17\u0ff6\17\u107b\17\u1100\17\u1185\17\u120a" + "\17\u128f\17\u1314\17\u1399\17\u128f\17\u141e\17\u14a3\17\u1528\17\u15ad" + "\17\u1632\17\u16b7\17\u173c\17\u17c1\17\u1846\17\u18cb\17\u1950\6\u55fa" + "\17\u19d5\17\u1a5a\17\u1adf\17\u1b64\17\u1be9\17\u1c6e\17\u1cf3\17\u1d78" + "\17\u1dfd\17\u1e82\17\u1f07\17\u1f8c\17\u2011\17\u2096\17\u211b\17\u21a0" + "\17\u2225\17\u22aa\17\u232f\17\u23b4\17\u2439\17\u24be\5\u9198\5\u921d" + "\17\u2543\17\u25c8\17\u264d\17\u26d2\17\u2757\2\u6eeb\17\u27dc\17\u2861" + "\2\u6eeb\17\u28e6\17\u296b\17\u29f0\17\u2a75\17\u2afa\17\u2b7f\17\u2c04" + "\17\u2c89\17\u2d0e\17\u2c04\17\u2d93\17\u2e18\17\u2e9d\17\u2f22\17\u2fa7" + "\17\u302c\17\u30b1\17\u3136\17\u31bb\17\u3240\17\u32c5\17\u334a\17\u33cf" + "\17\u3454\17\u34d9\17\u355e\17\u35e3\6\ua78b\17\u3668\17\u36ed\17\u3772" + "\17\u37f7\17\u387c\17\u3901\17\u3986\17\u3a0b\17\u3a90\17\u3b15\17\u3b9a" + "\17\u3c1f\17\u3ca4\17\u3d29\17\u3dae\17\u3e33\17\u3eb8\17\u3f3d\12\u4559" + "\17\u3fc2\17\u4047\17\u40cc\17\u4151\17\u41d6\17\u425b\17\u42e0\17\u4365" + "\17\u43ea\17\u446f\17\u44f4\17\u4579\17\u45fe\17\u4683\17\u4708\17\u478d" + "\17\u4812\17\u4897\17\u491c\17\u49a1\17\u4a26\17\u4aab\17\u4b30\17\u4bb5" + "\17\u4c3a\17\u4cbf\17\u4d44\17\u4dc9\17\u4e4e\17\u4ed3\17\u4f58\17\u4fdd" + "\17\u5062\17\u50e7\17\u516c\17\u51f1\17\u5276\17\u52fb\17\u5380\17\u5405" + "\17\u548a\17\u550f\17\u5594\17\u5619\17\u569e\17\u5723\17\u57a8\17\u582d" + "\17\u58b2\17\u5937\17\u59bc\17\u5a41\17\u5ac6\17\u5b4b\17\u5bd0\17\u5c55" + "\17\u5cda\17\u5d5f\17\u5de4\17\u5e69\17\u5eee\17\u5f73\17\u5ff8\17\u607d" + "\17\u6102\17\u6187\17\u620c\17\u6291\17\u6316\17\u639b\17\u6420\17\u64a5" + "\17\u652a\17\u65af\17\u6634\17\u66b9\17\u673e\17\u67c3\17\u6848\17\u68cd" + "\17\u6952\17\u69d7\17\u6a5c\17\u6ae1\17\u6b66\17\u6beb\17\u6c70\17\u6cf5" + "\17\u6d7a\17\u6dff\17\u6e84\17\u6f09\17\u6f8e\17\u7013\17\u7098\17\u711d" + "\17\u71a2\17\u7227\17\u72ac\17\u7331\17\u73b6\17\u743b\17\u74c0\17\u7545" + "\17\u75ca\17\u764f\17\u76d4\17\u7759\17\u77de\17\u7863\17\u78e8\17\u796d" + "\17\u79f2\17\u7a77\17\u7afc\17\u7b81\17\u7c06\17\u7c8b\17\u7d10\17\u7d95" + "\17\u7e1a\17\u7e9f\17\u7f24\17\u7fa9\17\u802e\17\u80b3\17\u8138\17\u81bd" + "\17\u8242\17\u82c7\17\u834c\17\u83d1\17\u8456\17\u84db\17\u8560\17\u85e5" + "\17\u866a\17\u86ef\17\u8774\17\u87f9\17\u887e\17\u8903\17\u8988\0\ub01f" + "\6\uf365\6\ufe4e\17\u8a0d\17\u8a92\17\u8b17\17\u8b9c\17\u8c21\17\u8ca6" + "\17\u8d2b\17\u8db0\17\u8e35\17\u8eba\17\u8f3f\17\u8fc4\17\u9049\17\u90ce" + "\17\u9153\17\u91d8\17\u925d\17\u92e2\6\ufa26\17\u9367\17\u93ec\17\u9471" + "\17\u94f6\17\u957b\17\u9600\17\u9685\17\u970a\17\u978f\17\u9814\17\u9899" + "\17\u991e\17\u99a3\17\u9a28\17\u9aad\17\u9b32\17\u9bb7\17\u9c3c\7\ud66e" + "\17\u9cc1\17\u9d46\17\u9dcb\17\u9e50\17\u9ed5\17\u9f5a\17\u9fdf\17\ua064" + "\17\ua0e9\17\ua16e\17\ua1f3\17\ua278\17\ua2fd\17\ua382\17\ua407\17\ua48c" + "\17\ua511\17\ua596\17\ua61b\17\ua6a0\17\ua725\17\ua7aa\17\ua82f\17\ua8b4" + "\17\ua939\17\ua9be\17\uaa43\17\uaac8\17\uab4d\17\uabd2\17\uac57\17\uacdc" + "\17\uad61\17\uade6\17\uae6b\17\uaef0\0\u0f96\17\uaf75\17\uaffa\17\ub07f" + "\17\ub104\17\ub189\17\ub20e\17\ub293\17\ub318\17\ub39d\17\ub422\17\ub4a7" + "\17\ub52c\17\ub5b1\17\ub636\17\ub6bb\17\ub740\17\ub7c5\17\ub84a\17\ub8cf" + "\17\ub954\17\ub9d9\17\uba5e\17\ubae3\17\ubb68\17\ubbed\17\ubc72\17\ubcf7" + "\17\ubd7c\17\ube01\17\ube86\17\ubf0b\17\ubf90\17\uc015\17\uc09a\17\uc11f" + "\0\uad01\17\uc1a4\17\uc229\17\uc2ae\17\uc333\17\uc3b8\17\uc43d\17\uc4c2" + "\17\uc547\17\uc5cc\17\uc651\17\uc6d6\17\uc75b\17\uc7e0\17\uc865\17\uc8ea" + "\17\uc96f\17\uc9f4\17\uca79\17\ucafe\17\ucb83\17\ucc08\17\ucc8d\17\ucd12" + "\17\ucd97\17\uce1c\17\ucea1\17\ucf26\17\ucfab\17\ud030\17\ud0b5\17\ud13a" + "\17\ud1bf\17\ud244\17\ud2c9\17\ud34e\17\ud3d3\17\ud458\17\ud4dd\17\ud562" + "\17\ud5e7\17\ud66c\17\ud6f1\17\ud776\17\ud7fb\17\ud880\17\ud905\17\ud98a" + "\0\u0f96\17\uda0f\6\uffdd\6\uf897\2\ue773\6\uf365\6\uf579\6\uf683" + "\6\ufa26\14\u4deb\7\u08b2\3\u5cdd\3\u5ef1\7\ubf0d\0\ub01f\0\uad01" + "\0\u0d82\17\uda94\6\ufd44\6\ufe4e\7\u1187\13\ubbee\13\ubc73\13\uc120" + "\7\ud66e\7\ubd7e\17\udb19\17\udb9e\17\udc23\17\udca8\17\udd2d\17\uddb2" + "\17\ude37\17\udebc\17\udf41\17\udfc6\17\ue04b\17\ue0d0\17\ue155\17\ue1da" + "\17\ue25f\17\ue2e4\17\ue369\17\ue3ee\17\ue473\17\ue4f8\17\ue57d\17\ue602" + "\17\ue687\17\ue70c\17\ue791\17\ue816\17\ue89b\17\ue920\17\ue9a5\17\uea2a" + "\17\ueaaf\17\ueb34\17\uebb9\17\uec3e\17\uecc3\17\ued48\17\uedcd\17\uee52" + "\17\ueed7\17\uef5c\17\uefe1\17\uf066\17\uf0eb\17\uf170\17\uf1f5\17\uf27a" + "\17\uf2ff\17\uf384\17\uf409\2\ue987\2\ueca5\17\uf48e\17\uf513\17\uf598" + "\17\uf61d\17\uf6a2\17\uf727\17\uf7ac\17\uf831\17\uf8b6\17\uf93b\17\uf9c0" + "\17\ufa45\17\ufaca\17\ufb4f\17\ufbd4\17\ufc59\17\ufcde\17\ufd63\17\ufde8" + "\17\ufe6d\17\ufef2\17\uff77\17\ufffc\20\201\20\u0106\20\u018b\20\u0210" + "\20\u0295\20\u031a\20\u039f\20\u0424\20\u04a9\20\u052e\20\u05b3\20\u0638" + "\20\u06bd\20\u0742\20\u07c7\20\u084c\20\u08d1\20\u0956\20\u09db\20\u0a60" + "\20\u0ae5\20\u0b6a\20\u0bef\20\u0c74\20\u0cf9\20\u0d7e\20\u0e03\20\u0e88" + "\20\u0f0d\20\u0f92\20\u1017\20\u109c\20\u1121\20\u11a6\10\u33f2\20\u122b" + "\20\u12b0\20\u1335\20\u13ba\20\u143f\20\u14c4\20\u1549\20\u15ce\20\u1653" + "\20\u16d8\20\u175d\20\u17e2\20\u1867\20\u18ec\20\u1971\20\u19f6\20\u1a7b" + "\20\u1b00\20\u1b85\20\u1c0a\20\u1c8f\20\u1d14\20\u1d99\20\u1e1e\20\u1ea3" + "\20\u1f28\20\u1fad\20\u2032\20\u20b7\20\u213c\20\u21c1\20\u2246\20\u22cb" + "\20\u2350\20\u23d5\20\u245a\20\u24df\20\u2564\20\u25e9\20\u266e\20\u26f3" + "\20\u2778\20\u27fd\20\u2882\20\u2907\20\u298c\20\u2a11\20\u2a96\20\u2b1b" + "\7\u5278\20\u2ba0\20\u2c25\20\u2caa\20\u2d2f\20\u2db4\20\u2e39\20\u2ebe" + "\20\u2f43\20\u2fc8\20\u304d\20\u30d2\20\u3157\20\u31dc\20\u3261\20\u32e6" + "\20\u336b\20\u33f0\20\u3475\14\u0ae6\20\u34fa\20\u357f\20\u3604\20\u3689" + "\20\u370e\20\u3793\20\u3818\20\u389d\20\u3922\20\u39a7\20\u3a2c\20\u3ab1" + "\20\u3b36\20\u3bbb\20\u3c40\20\u3cc5\20\u3d4a\20\u3dcf\20\u3e54\20\u3ed9" + "\20\u3f5e\3\ub6be\3\u1292\3\ub639\3\u2099\7\u4e50\7\u4f5a\7\u5278" + "\7\u67c5\7\u457b\7\u4b32\14\u59de\7\u5939\7\u5a43\3\ub4aa\3\ub211" + "\10\u0f0f\14\u622e\20\u3fe3\20\u4068\20\u40ed\7\u5278\20\u4172\7\u67c5" + "\3\ub4aa\7\u74c2\14\u0ae6\20\u41f7\7\u4b32\14\u0ae6\14\u052f\20\u427c" + "\20\u4301\20\u4386\20\u440b\20\u4490\20\u4515\20\u459a\20\u461f\20\u46a4" + "\20\u4729\20\u47ae\20\u4833\20\u48b8\20\u493d\20\u49c2\20\u4a47\20\u4acc" + "\20\u4b51\20\u4bd6\20\u4c5b\20\u4ce0\20\u4d65\20\u4dea\20\u4e6f\20\u4ef4" + "\20\u4f79\20\u4ffe\20\u5083\20\u5108\20\u518d\20\u5212\20\u5297\20\u531c" + "\20\u53a1\20\u5426\20\u54ab\20\u5530\20\u55b5\20\u563a\20\u56bf\20\u5744" + "\20\u57c9\20\u584e\20\u58d3\20\u5958\20\u59dd\20\u5a62\20\u5ae7\20\u5b6c" + "\20\u5bf1\20\u5c76\20\u5cfb\20\u5d80\20\u5e05\20\u5e8a\13\u887f\20\u5f0f" + "\0\u0f96\0\uad01\0\ub01f\0\u0d82\2\ue987\2\ueca5\20\u5f94\20\u6019" + "\20\u609e\20\u6123\20\u61a8\20\u622d\20\u62b2\20\u6337\20\u63bc\15\uc9b2" + "\15\ucabc\20\u6441\20\u64c6\20\u654b\20\u65d0\20\u6655\20\u66da\20\u65d0" + "\20\u675f\20\u67e4\20\u6869\20\u68ee\20\u6973\20\u69f8\20\u6a7d\20\u6b02" + "\20\u6b87\20\u6c0c\20\u6c91\7\ubd7e\20\u6d16\20\u6d9b\20\u6e20\20\u6ea5" + "\20\u6f2a\20\u6faf\20\u7034\20\u70b9\20\u713e\20\u71c3\20\u7248\20\u72cd" + "\20\u7352\20\u73d7\20\u745c\20\u74e1\20\u7566\20\u75eb\20\u7670\20\u76f5" + "\20\u777a\20\u77ff\6\uf91c\6\uf9a1\20\u7884\20\u7909\20\u798e\20\u7a13" + "\20\u7a98\3\u7120\20\u7b1d\20\u7ba2\3\u7120\20\u7c27\20\u7cac\20\u7d31" + "\20\u7db6\20\u7e3b\20\u7ec0\20\u7f45\20\u7fca\20\u804f\20\u7f45\20\u80d4" + "\20\u8159\20\u81de\20\u8263\20\u82e8\20\u836d\20\u83f2\20\u8477\20\u84fc" + "\20\u8581\20\u8606\20\u868b\20\u8710\20\u8795\20\u881a\20\u889f\20\u8924" + "\10\u0f0f\20\u89a9\20\u8a2e\20\u8ab3\20\u8b38\20\u8bbd\20\u8c42\20\u8cc7" + "\20\u8d4c\20\u8dd1\20\u8e56\20\u8edb\20\u8f60\20\u8fe5\20\u906a\20\u90ef" + "\20\u9174\20\u91f9\20\u927e\14\u052f\20\u9303\20\u9388\20\u940d\20\u9492" + "\20\u9517\20\u959c\20\u9621\20\u96a6\20\u972b\20\u97b0\20\u9835\20\u98ba" + "\20\u993f\20\u99c4\20\u9a49\20\u9ace\20\u9b53\20\u9bd8\20\u9c5d\20\u9ce2" + "\20\u9d67\20\u9dec\20\u9e71\20\u9ef6\20\u9f7b\20\ua000\20\ua085\20\ua10a" + "\20\ua18f\20\ua214\20\ua299\20\ua31e\20\ua3a3\20\ua428\20\ua4ad\20\ua532" + "\20\ua5b7\20\ua63c\20\ua6c1\20\ua746\20\ua7cb\20\ua850\20\ua8d5\20\ua95a" + "\20\ua9df\20\uaa64\20\uaae9\20\uab6e\20\uabf3\20\uac78\20\uacfd\20\uad82" + "\20\uae07\20\uae8c\20\uaf11\20\uaf96\20\ub01b\20\ub0a0\20\ub125\20\ub1aa" + "\20\ub22f\20\ub2b4\20\ub339\20\ub3be\20\ub443\20\ub4c8\20\ub54d\20\ub5d2" + "\20\ub657\20\ub6dc\20\ub761\20\ub7e6\20\ub86b\20\ub8f0\20\ub975\20\ub9fa" + "\20\uba7f\20\ubb04\20\ubb89\20\ubc0e\20\ubc93\20\ubd18\20\ubd9d\20\ube22" + "\20\ubea7\20\ubf2c\20\ubfb1\20\uc036\20\uc0bb\20\uc140\20\uc1c5\15\u1675" + "\20\uc24a\20\uc2cf\20\uc354\20\uc3d9\20\uc45e\20\uc4e3\20\uc568\20\uc5ed" + "\20\uc672\20\uc6f7\20\uc77c\20\uc801\20\uc886\15\u2501\20\uc90b\20\uc990" + "\20\uca15\20\uca9a\20\ucb1f\20\ucba4\20\ucc29\20\uccae\20\ucd33\20\ucdb8" + "\20\uce3d\20\ucec2\20\ucf47\20\ucfcc\20\ud051\20\ud0d6\20\ud15b\20\ud1e0" + "\20\ud265\20\ud2ea\20\ud36f\20\ud3f4\20\ud479\20\ud4fe\20\ud583\15\u3d6c" + "\20\ud608\20\ud68d\20\ud712\20\ud797\20\ud81c\10\u9305\20\ud8a1\20\ud926" + "\20\ud9ab\20\uda30\20\udab5\20\udb3a\20\udbbf\20\udc44\20\udcc9\20\udd4e" + "\20\uddd3\20\ude58\20\udedd\20\udf62\20\udfe7\20\ue06c\20\ue0f1\20\ue176" + "\20\ue1fb\20\ue280\20\ue305\20\ue38a\20\ue40f\20\ue494\20\ue519\20\ue59e" + "\20\ue623\20\ue6a8\20\ue72d\20\ue7b2\20\ue837\20\ue8bc\20\ue941\20\ue9c6" + "\20\uea4b\20\uead0\20\ueb55\20\uebda\20\uec5f\20\uece4\20\ued69\20\uedee" + "\20\uee73\20\ueef8\20\uef7d\20\uf002\20\uf087\20\uf10c\20\uf191\20\uf216" + "\20\uf29b\20\uf320\20\uf3a5\20\uf42a\20\uf4af\20\uf534\20\uf5b9\20\uf63e" + "\20\uf6c3\20\uf748\20\uf7cd\20\uf852\20\uf8d7\20\uf95c\20\uf9e1\20\ufa66" + "\20\ufaeb\20\ufb70\0\u0f96\20\ufbf5\20\ufc7a\20\ufcff\20\ufd84\20\ufe09" + "\20\ufe8e\20\uff13\20\uff98\21\35\21\242\21\u0127\21\u01ac\21\u0231" + "\21\u02b6\21\u033b\21\u03c0\21\u0445\21\u04ca\21\u054f\21\u05d4\21\u0659" + "\21\u06de\21\u0763\21\u07e8\21\u086d\21\u08f2\21\u0977\21\u09fc\21\u0a81" + "\21\u0b06\21\u0b8b\21\u0c10\21\u0c95\21\u0d1a\21\u0d9f\21\u0e24\21\u0ea9" + "\21\u0f2e\21\u0fb3\21\u1038\21\u10bd\21\u1142\21\u11c7\21\u124c\21\u12d1" + "\21\u1356\21\u13db\21\u1460\21\u14e5\21\u156a\21\u15ef\21\u1674\21\u16f9" + "\21\u177e\21\u1803\21\u1888\21\u190d\21\u1992\21\u1a17\21\u1a9c\21\u1b21" + "\21\u1ba6\21\u1c2b\21\u1cb0\21\u1d35\21\u1dba\21\u1e3f\21\u1ec4\21\u1f49" + "\21\u1fce\21\u2053\21\u20d8\21\u215d\21\u21e2\21\u2267\21\u22ec\21\u2371" + "\21\u23f6\21\u247b\21\u2500\21\u2585\21\u260a\21\u268f\21\u2714\21\u2799" + "\21\u281e\0\ub1ae\0\ub7ea\21\u28a3\21\u2928\21\u29ad\21\u2a32\21\u2ab7" + "\21\u2b3c\21\u2bc1\21\u2c46\21\u2ccb\21\u2d50\21\u2dd5\21\u2e5a\21\u2edf" + "\21\u2f64\21\u2fe9\21\u306e\21\u30f3\21\u3178\21\u31fd\21\u3282\21\u3307" + "\21\u338c\21\u3411\21\u3496\21\u351b\21\u35a0\21\u3625\21\u36aa\21\u372f" + "\21\u37b4\21\u3839\21\u38be\21\u3943\4\u3cc8\0\uad01\21\u39c8\21\u3a4d" + "\21\u3ad2\21\u3b57\21\u3bdc\21\u3c61\21\u3ce6\21\u3d6b\21\u3df0\21\u3e75" + "\21\u3efa\21\u3f7f\21\u4004\21\u4089\21\u410e\21\u4193\21\u4218\21\u429d" + "\21\u4322\1\u5b91\21\u43a7\21\u442c\21\u44b1\21\u4536\21\u45bb\21\u4640" + "\21\u46c5\21\u474a\21\u47cf\0\u0f96\21\u4854\21\u48d9\21\u495e\0\u0d82" + "\21\u49e3\21\u4a68\21\u4aed\0\u0f96\21\u4b72\21\u4bf7\21\u4c7c\21\u4d01" + "\21\u4d86\21\u4e0b\21\u4e90\21\u4f15\21\u4f9a\21\u501f\21\u50a4\21\u5129" + "\21\u51ae\21\u5233\21\u52b8\21\u533d\21\u53c2\21\u5447\21\u54cc\21\u5551" + "\21\u55d6\21\u565b\21\u56e0\21\u5765\21\u57ea\21\u586f\21\u58f4\21\u5979" + "\21\u59fe\21\u5a83\21\u5b08\21\u5b8d\21\u5c12\21\u5c97\21\u5d1c\21\u5da1" + "\21\u5e26\21\u5eab\21\u5f30\21\u5fb5\21\u603a\21\u60bf\21\u6144\21\u61c9" + "\21\u624e\21\u62d3\21\u6358\21\u63dd\21\u6462\21\u64e7\21\u656c\21\u65f1" + "\21\u6676\21\u66fb\21\u6780\21\u6805\21\u688a\21\u690f\21\u6994\21\u6a19" + "\21\u6a9e\21\u6b23\21\u6ba8\21\u6c2d\21\u6cb2\21\u6d37\21\u6dbc\21\u6e41" + "\21\u6ec6\21\u6f4b\21\u6fd0\21\u7055\21\u7055\21\u70da\21\u715f\21\u71e4" + "\21\u7269\21\u72ee\21\u7373\21\u73f8\21\u747d\21\u7502\21\u7587\21\u760c" + "\21\u7691\21\u7716\21\u779b\21\u7820\21\u78a5\21\u792a\21\u79af\21\u7a34" + "\21\u7ab9\21\u7b3e\21\u7bc3\21\u7c48\21\u7ccd\21\u7d52\21\u7dd7\21\u7e5c" + "\21\u7ee1\21\u7f66\21\u7feb\21\u8070\21\u80f5\21\u817a\21\u81ff\21\u8284" + "\21\u8309\21\u838e\21\u8413\21\u8498\21\u851d\21\u85a2\21\u8627\21\u86ac" + "\21\u8731\21\u87b6\21\u883b\21\u88c0\21\u8945\21\u89ca\21\u8a4f\21\u8ad4" + "\21\u8b59\21\u8bde\21\u8c63\21\u8ce8\21\u8d6d\21\u8df2\21\u8e77\21\u8efc" + "\21\u8f81\21\u9006\21\u908b\21\u9110\21\u9195\21\u921a\21\u929f\21\u9324" + "\21\u93a9\21\u942e\21\u94b3\21\u9538\21\u95bd\21\u9642\21\u96c7\21\u974c" + "\21\u97d1\21\u9856\21\u98db\21\u9960\21\u99e5\21\u9a6a\21\u9aef\21\u9b74" + "\21\u9bf9\21\u9c7e\21\u9d03\21\u9d88\21\u9e0d\21\u9e92\21\u9f17\21\u9f9c" + "\21\ua021\21\ua0a6\21\ua12b\21\ua1b0\11\ufd22\21\ua235\21\ua2ba\21\ua33f" + "\21\ua3c4\21\ua449\21\ua4ce\21\ua553\21\ua5d8\21\ua65d\21\ua6e2\21\ua767" + "\21\ua7ec\21\ua871\21\ua8f6\21\ua97b\21\uaa00\21\uaa85\21\uab0a\21\uab8f" + "\21\uac14\21\uac99\21\uad1e\21\uada3\21\uae28\21\uaead\21\uaf32\21\uafb7" + "\21\ub03c\12\ue5e2\21\ub0c1\21\ub146\21\ub1cb\21\ub250\21\ub2d5\21\ub35a" + "\21\ub3df\21\ub464\21\ub4e9\21\ub56e\21\ub5f3\21\ub678\21\ub678\21\ub6fd" + "\21\ub782\21\ub807\21\ub88c\21\ub911\21\ub996\21\uba1b\21\ubaa0\21\ubb25" + "\21\ubbaa\21\ubc2f\21\ubcb4\21\ubd39\21\ubdbe\21\ube43\21\ubec8\21\ubf4d" + "\21\ubf4d\21\ubfd2\21\uc057\21\uc0dc\21\uc161\21\uc1e6\21\uc26b\21\uc2f0" + "\21\uc375\21\uc3fa\21\uc47f\21\uc504\21\uc589\21\uc60e\21\uc693\21\uc718" + "\21\uc79d\21\uc822\21\uc8a7\21\uc92c\21\uc9b1\21\uca36\21\ucabb\21\ucb40" + "\21\ucbc5\21\ucc4a\21\ucccf\21\ucd54\21\ucdd9\21\uce5e\21\ucee3\21\ucf68" + "\21\ucfed\21\ud072\21\ud0f7\21\ud17c\21\ud201\21\ud286\21\ud30b\21\ud390" + "\21\ud415\21\ud49a\21\ud51f\21\ud5a4\12\u5cba\21\ud629\21\ud6ae\21\ud733" + "\21\ud7b8\21\ud83d\21\ud8c2\13\u35e4\21\ud947\21\ud9cc\21\uda51\21\udad6" + "\21\udb5b\21\udbe0\21\udc65\21\udcea\21\udd6f\21\uddf4\1\ue3af\1\ue8e1" + "\21\ude79\21\udefe\21\udf83\21\ue008\21\ue08d\21\ue112\21\ue197\21\ue21c" + "\21\ue2a1\5\u8ceb\2\u5cbc\21\ue326\21\ue3ab\21\ue430\21\ue4b5\21\ue53a" + "\21\ue5bf\21\ue644\21\ue6c9\21\ue74e\21\ue7d3\21\ue858\21\ue8dd\21\ue962" + "\21\ue9e7\21\uea6c\21\ueaf1\21\ueb76\21\uebfb\21\uec80\21\ued05\21\ued8a" + "\21\uee0f\2\u6d5c\21\uee94\21\uef19\21\uef9e\21\uf023\21\uf0a8\5\ue3ae" + "\21\uf12d\21\uf1b2\21\uf237\21\uf2bc\21\uf341\21\uf3c6\21\uf44b\21\uf4d0" + "\21\uf555\21\uf5da\21\uf65f\21\uf6e4\21\uf769\21\uf7ee\21\uf873\21\uf8f8" + "\21\uf97d\21\ufa02\21\ufa87\21\ufb0c\21\ufb91\21\ufc16\21\ufc9b\21\ufd20" + "\21\ufda5\21\ufe2a\21\ufeaf\21\uff34\21\uffb9\22\76\12\u0cb8\22\303" + "\22\u0148\22\u01cd\12\u158d\22\u0252\12\u1cd3\22\u02d7\22\u035c\12\u2180" + "\22\u03e1\22\u0466\22\u04eb\22\u0570\22\u05f5\22\u067a\22\u06ff\22\u0784" + "\22\u0809\22\u088e\22\u0913\22\u0998\22\u0a1d\22\u0aa2\22\u0b27\22\u0bac" + "\22\u0c31\22\u0cb6\22\u0d3b\22\u0dc0\21\u62d3\22\u0e45\16\u0914\16\u0e46" + "\22\u0998\22\u0eca\22\u0f4f\22\u0fd4\22\u1059\22\u10de\22\u1163\22\u11e8" + "\22\u126d\22\u12f2\22\u1377\22\u13fc\22\u1481\22\u1506\22\u158b\22\u1610" + "\22\u1695\22\u171a\22\u179f\22\u1824\22\u18a9\22\u192e\22\u19b3\22\u1a38" + "\22\u1abd\22\u1b42\22\u1bc7\22\u1c4c\22\u1cd1\22\u1d56\22\u1ddb\22\u1e60" + "\22\u1ee5\22\u1f6a\22\u1fef\22\u2074\22\u20f9\22\u20f9\22\u217e\22\u2203" + "\22\u2288\22\u230d\22\u2392\22\u2417\22\u249c\22\u2521\22\u25a6\22\u262b" + "\22\u26b0\22\u2735\22\u27ba\22\u283f\22\u28c4\22\u2949\22\u29ce\22\u2a53" + "\22\u2ad8\22\u2b5d\22\u2be2\22\u2c67\22\u2cec\22\u2d71\22\u2df6\22\u2e7b" + "\22\u2f00\22\u2f85\22\u300a\22\u308f\22\u3114\22\u3199\22\u321e\22\u32a3" + "\22\u3328\22\u33ad\22\u3432\22\u34b7\22\u353c\22\u35c1\22\u3646\22\u36cb" + "\22\u3750\22\u37d5\22\u385a\22\u38df\22\u3964\22\u39e9\22\u3a6e\22\u3af3" + "\22\u3b78\22\u3bfd\22\u3c82\22\u3d07\22\u3d8c\22\u3e11\22\u3e96\22\u3f1b" + "\22\u3fa0\22\u4025\22\u40aa\22\u412f\22\u41b4\22\u4239\22\u42be\22\u4343" + "\22\u43c8\22\u444d\22\u44d2\22\u4557\22\u45dc\22\u4661\22\u46e6\22\u476b" + "\22\u47f0\22\u4875\22\u48fa\22\u497f\22\u4a04\22\u4a89\22\u4b0e\22\u4b93" + "\22\u4c18\22\u4c9d\22\u4d22\22\u4da7\22\u4e2c\22\u4eb1\22\u4f36\22\u4fbb" + "\22\u5040\22\u50c5\22\u514a\22\u51cf\22\u5254\13\ubc73\22\u52d9\22\u535e" + "\22\u53e3\22\u5468\22\u54ed\22\u5572\22\u55f7\22\u567c\22\u5701\22\u5786" + "\22\u580b\22\u5890\22\u5915\22\u599a\22\u5a1f\22\u5aa4\22\u5b29\22\u5bae" + "\22\u5c33\22\u5cb8\22\u5d3d\22\u5dc2\22\u5e47\17\ud98a\22\u5ecc\22\u5f51" + "\22\u5fd6\22\u605b\22\u60e0\14\ua63d\22\u6165\22\u61ea\22\u626f\22\u62f4" + "\22\u6379\22\u63fe\22\u6483\22\u6508\22\u658d\22\u6612\22\u6697\22\u671c" + "\22\u671c\22\u67a1\22\u6826\22\u68ab\22\u6930\22\u69b5\22\u6a3a\22\u6abf" + "\22\u6b44\22\u6bc9\22\u6c4e\22\u6cd3\22\u6d58\22\u6ddd\22\u6e62\22\u6ee7" + "\22\u6f6c\22\u6ff1\22\u6ff1\22\u7076\22\u70fb\22\u7180\22\u7205\22\u728a" + "\22\u730f\22\u7394\22\u7419\22\u749e\22\u7523\22\u75a8\22\u762d\22\u76b2" + "\22\u7737\22\u77bc\22\u7841\22\u78c6\22\u794b\22\u79d0\22\u7a55\22\u7ada" + "\22\u7b5f\22\u7be4\22\u7c69\22\u7cee\22\u7d73\22\u7df8\22\u7e7d\22\u7f02" + "\22\u7f87\22\u800c\22\u8091\22\u8116\22\u819b\22\u8220\22\u82a5\22\u832a" + "\14\u1c90\22\u83af\22\u8434\22\u84b9\22\u853e\22\u85c3\22\u8648\14\uf63f" + "\22\u86cd\22\u8752\22\u87d7\22\u885c\2\ue5e4\2\ueb16\22\u88e1\22\u8966" + "\22\u89eb\22\u8a70\22\u8af5\22\u8b7a\22\u8bff\6\uf46f\3\u5ef1\22\u8c84" + "\22\u8d09\22\u8d8e\22\u8e13\22\u8e98\22\u8f1d\22\u8fa2\22\u9027\22\u90ac" + "\22\u9131\22\u91b6\22\u923b\22\u92c0\22\u9345\22\u93ca\22\u944f\22\u94d4" + "\22\u9559\22\u95de\22\u9663\22\u96e8\22\u976d\3\u6f91\22\u97f2\22\u9877" + "\22\u98fc\22\u9981\22\u9a06\7\u4b32\22\u9a8b\22\u9b10\22\u9b95\22\u9c1a" + "\22\u9c9f\22\u9d24\22\u9da9\22\u9e2e\22\u9eb3\22\u9f38\22\u9fbd\22\ua042" + "\22\ua0c7\22\ua14c\22\ua1d1\22\ua256\22\ua2db\22\ua360\22\ua3e5\22\ua46a" + "\22\ua4ef\22\ua574\22\ua5f9\22\ua67e\22\ua703\22\ua788\22\ua80d\22\ua892" + "\22\ua917\22\ua99c\13\ucc09\22\uaa21\22\uaaa6\13\ud563\22\uab2b\13\udca9" + "\22\uabb0\13\ue156\22\uac35\22\uacba\22\uad3f\22\uadc4\22\uae49\22\uaece" + "\22\uaf53\22\uafd8\22\ub05d\22\ub0e2\22\ub167\22\ub1ec\22\ub271\22\ub2f6" + "\22\ub37b\22\ub400\22\ub485\22\ub50a\22\ub58f\22\ub614\21\u62d3\22\ub699" + "\16\u0914\16\u0e46\22\ub1ec\22\ub71e\22\ub7a3\22\ub828\22\ub8ad\22\ub932" + "\22\ub9b7\22\uba3c\22\ubac1\22\ubb46\22\ubbcb\22\ubc50\22\ubcd5\22\ubd5a" + "\22\ubddf\22\ube64\22\ubee9\22\ubf6e\22\ubff3\22\uc078\22\uc0fd\22\uc182" + "\22\uc207\22\uc28c\22\uc311\22\uc396\22\uc41b\22\uc4a0\22\uc525\22\uc5aa" + "\22\uc62f\22\uc6b4\22\uc739\22\uc7be\22\uc843\22\uc8c8\22\uc94d\22\uc9d2" + "\22\uca57\22\ucadc\22\ucb61\22\ucbe6\22\ucc6b\22\uccf0\22\ucd75\4\u1a7e" + "\10\u7a15\22\ucdfa\22\uce7f\22\ucf04\4\u1b03\10\u7ba4\4\u1e21\22\ucf89" + "\22\ud00e\4\u1ea6\22\ud093\22\ud118\22\ud19d\22\ud222\22\ud2a7\22\ud32c" + "\22\ud3b1\22\ud436\22\ud4bb\22\ud540\22\ud5c5\22\ud64a\22\ud6cf\22\ud754" + "\22\ud7d9\22\ud85e\22\ud8e3\22\ud968\22\ud9ed\22\uda72\22\udaf7\22\udb7c" + "\22\udc01\22\udc86\22\udd0b\22\udd90\22\ude15\22\ude9a\22\udf1f\22\udfa4" + "\22\ue029\22\ue0ae\22\ue133\22\ue1b8\22\ue23d\22\ue2c2\22\ue347\22\ue3cc" + "\22\ue451\22\ue4d6\22\ue55b\4\u4493\22\ue5e0\4\u46a7\22\ue665\22\ue6ea" + "\22\ue76f\22\ue7f4\22\ue879\22\ue8fe\22\ue983\22\uea08\22\uea8d\22\ueb12" + "\22\ueb97\22\uec1c\22\ueca1\22\ued26\22\uedab\22\uee30\22\ueeb5\22\uef3a" + "\22\uefbf\22\uf044\22\uf0c9\22\uf14e\22\uf1d3\22\uf258\22\uf2dd\22\uf362" + "\22\uf3e7\22\uf46c\22\uf4f1\22\uf576\22\uf5fb\22\uf680\22\uf705\22\uf78a" + "\22\uf80f\22\uf894\22\uf919\22\uf99e\22\ufa23\22\ufaa8\22\ufb2d\22\ufbb2" + "\22\ufc37\22\ufcbc\22\ufd41\22\ufdc6\22\ufe4b\22\ufed0\22\uff55\22\uffda" + "\23\137\23\344\23\u0169\23\u01ee\23\u0273\23\u02f8\23\u037d\23\u0402" + "\23\u0487\23\u050c\23\u0591\23\u0616\23\u069b\23\u0720\23\u07a5\23\u082a" + "\23\u08af\23\u0934\0\u0f96\0\ub01f\0\uad01\0\u0d82\23\u09b9\23\u0a3e" + "\23\u0ac3\23\u0b48\23\u0bcd\23\u0c52\23\u0cd7\23\u0d5c\23\u0de1\23\u0e66" + "\23\u0eeb\23\u0f70\23\u0ff5\23\u107a\23\u10ff\23\u1184\23\u1209\23\u128e" + "\23\u1313\20\udfe7\20\ue06c\23\u1398\23\u141d\23\u14a2\23\u1527\23\u15ac" + "\23\u1631\23\u16b6\23\u173b\23\u17c0\23\u1845\23\u18ca\23\u194f\23\u19d4" + "\23\u1a59\23\u1ade\23\u1b63\23\u1be8\23\u1c6d\23\u1cf2\23\u1d77\23\u1dfc" + "\23\u1e81\23\u1f06\23\u1f8b\23\u2010\23\u2095\23\u211a\23\u219f\23\u2224" + "\23\u22a9\23\u232e\23\u23b3\23\u2438\23\u24bd\23\u2542\23\u25c7\23\u264c" + "\23\u26d1\23\u2756\23\u27db\23\u2860\23\u28e5\23\u296a\23\u29ef\23\u2a74" + "\23\u2af9\23\u2b7e\16\u0914\23\u2c03\23\u2c88\23\u2d0d\23\u2d92\23\u2e17" + "\23\u2e9c\23\u2f21\23\u2fa6\23\u302b\23\u30b0\23\u3135\23\u31ba\23\u323f" + "\23\u32c4\23\u3349\23\u33ce\23\u3453\23\u34d8\23\u355d\23\u35e2\23\u3667" + "\23\u36ec\23\u3771\23\u37f6\23\u387b\23\u3900\23\u3985\23\u3a0a\23\u3a8f" + "\23\u3b14\23\u3b99\23\u3c1e\23\u3ca3\23\u3d28\23\u3dad\23\u3e32\23\u3eb7" + "\23\u3f3c\23\u3fc1\23\u4046\23\u40cb\23\u4150\23\u41d5\23\u425a\23\u42df" + "\23\u4364\23\u43e9\23\u446e\23\u44f3\23\u4578\23\u45fd\23\u4682\23\u4707" + "\23\u478c\23\u4811\23\u4896\23\u491b\23\u49a0\23\u4a25\23\u4aaa\23\u4b2f" + "\23\u4bb4\23\u4c39\23\u4cbe\23\u4d43\23\u4dc8\23\u4e4d\23\u4ed2\23\u4f57" + "\23\u4fdc\23\u5061\23\u50e6\23\u516b\23\u51f0\23\u5275\23\u52fa\23\u537f" + "\23\u5404\23\u5489\23\u550e\23\u5593\23\u5618\23\u569d\23\u5722\23\u57a7" + "\23\u582c\23\u58b1\23\u5936\23\u59bb\23\u5a40\23\u5ac5\23\u5b4a\23\u5bcf" + "\23\u5c54\23\u5cd9\23\u5d5e\23\u5de3\23\u5e68\23\u5eed\23\u5f72\23\u5ff7" + "\23\u607c\23\u6101\23\u6186\23\u620b\23\u6290\23\u6315\23\u639a\23\u641f" + "\23\u64a4\23\u6529\23\u65ae\23\u6633\23\u66b8\23\u673d\23\u67c2\23\u6847" + "\23\u68cc\23\u6951\23\u69d6\23\u6a5b\23\u6ae0\23\u6b65\23\u6bea\23\u6c6f" + "\23\u6cf4\23\u6d79\23\u6dfe\23\u6e83\23\u6f08\23\u6f8d\23\u7012\23\u7097" + "\0\u0f96\23\u711c\23\u71a1\0\u0d82\23\u7226\23\u72ab\23\u7330\23\u73b5" + "\23\u743a\23\u74bf\23\u7544\23\u75c9\0\ub01f\0\uad01\23\u764e\23\u76d3" + "\23\u7758\23\u77dd\23\u7862\23\u78e7\23\u796c\23\u79f1\23\u7a76\23\u7afb" + "\23\u7b80\23\u7c05\23\u7c8a\23\u7d0f\23\u7d94\23\u7e19\23\u7e9e\23\u7f23" + "\23\u7fa8\23\u802d\23\u80b2\23\u8137\23\u81bc\23\u8241\23\u82c6\23\u834b" + "\23\u83d0\23\u8455\23\u84da\23\u855f\23\u85e4\23\u8669\23\u86ee\23\u8773" + "\23\u87f8\23\u887d\23\u8902\23\u8987\23\u8a0c\23\u8a91\23\u8b16\23\u8b9b" + "\23\u8c20\23\u8ca5\23\u8d2a\23\u8daf\23\u8e34\23\u8eb9\23\u8f3e\23\u8fc3" + "\23\u9048\23\u90cd\23\u9152\23\u91d7\23\u925c\23\u92e1\23\u9366\23\u93eb" + "\23\u9470\23\u94f5\23\u957a\23\u95ff\23\u9684\23\u9709\23\u978e\23\u9813" + "\23\u9898\23\u991d\23\u99a2\23\u9a27\23\u9aac\23\u9b31\23\u9bb6\23\u9c3b" + "\23\u9cc0\23\u9d45\23\u9dca\23\u9e4f\23\u9ed4\23\u9f59\23\u9fde\23\ua063" + "\23\ua0e8\23\ua16d\23\ua1f2\23\ua277\23\ua2fc\23\ua381\23\ua406\23\ua48b" + "\23\ua510\23\ua595\23\ua61a\23\ua69f\23\ua724\23\ua7a9\23\ua82e\23\ua8b3" + "\22\u0dc0\23\ua938\23\ua9bd\23\uaa42\23\uaac7\23\uab4c\23\uabd1\23\uac56" + "\23\uacdb\23\uad60\23\uade5\23\uae6a\23\uaeef\23\uaf74\23\uaff9\23\ub07e" + "\23\ub103\23\ub188\23\ub20d\23\ub292\23\ub317\23\ub39c\23\ub421\23\ub4a6" + "\23\ub52b\23\ub5b0\23\ub635\23\ub6ba\23\ub73f\23\ub7c4\23\ub849\23\ub8ce" + "\23\ub953\23\ub9d8\23\uba5d\23\ubae2\23\ubb67\23\ubbec\23\ubc71\23\ubcf6" + "\23\ubd7b\23\ube00\23\ube85\23\ubf0a\23\ubf8f\23\uc014\23\uc099\23\uc11e" + "\23\uc1a3\23\uc228\23\uc2ad\23\uc332\23\uc3b7\23\uc43c\23\uc4c1\23\uc546" + "\23\uc5cb\23\uc650\23\uc6d5\23\uc75a\23\uc7df\23\uc864\23\uc8e9\23\uc96e" + "\23\uc9f3\23\uca78\23\ucafd\23\ucb82\23\ucc07\23\ucc8c\23\ucd11\23\ucd96" + "\23\uce1b\23\ucea0\23\ucf25\23\ucfaa\23\ud02f\23\ud0b4\23\ud139\23\ud1be" + "\23\ud243\23\ud2c8\23\ud34d\23\ud3d2\23\ud457\23\ud4dc\23\ud561\23\ud5e6" + "\23\ud66b\23\ud6f0\23\ud775\23\ud7fa\23\ud87f\23\ud904\23\ud989\23\uda0e" + "\23\uda93\23\udb18\23\udb9d\23\udc22\23\udca7\23\udd2c\23\uddb1\23\ude36" + "\23\udebb\23\udf40\23\udfc5\23\ue04a\23\ue0cf\23\ue154\23\ue1d9\23\ue25e" + "\23\ue2e3\23\ue368\23\ue3ed\23\ue472\23\ue4f7\23\ue57c\23\ue601\23\ue686" + "\23\ue70b\23\ue790\23\ue815\23\ue89a\23\ue91f\23\ue9a4\23\uea29\23\ueaae" + "\23\ueb33\23\uebb8\23\uec3d\23\uecc2\23\ued47\23\uedcc\23\uee51\23\ueed6" + "\23\uef5b\23\uefe0\23\uf065\23\uf0ea\23\uf16f\23\uf1f4\23\uf279\23\uf2fe" + "\23\uf383\23\uf408\23\uf48d\23\uf512\23\uf597\23\uf61c\23\uf6a1\23\uf726" + "\23\uf7ab\23\uf830\23\uf8b5\23\uf93a\23\uf9bf\23\ufa44\23\ufac9\23\ufb4e" + "\23\ufbd3\23\ufc58\23\ufcdd\23\ufd62\23\ufde7\23\ufe6c\23\ufef1\23\uff76" + "\23\ufffb\24\200\24\u0105\24\u018a\24\u020f\24\u0294\24\u0319\24\u039e" + "\24\u0423\24\u04a8\24\u052d\24\u05b2\24\u0637\24\u06bc\24\u0741\24\u07c6" + "\24\u084b\24\u08d0\24\u0955\24\u09da\24\u0a5f\24\u0ae4\24\u0b69\24\u0bee" + "\24\u0c73\24\u0cf8\24\u0d7d\24\u0e02\24\u0e87\24\u0f0c\24\u0f91\24\u1016" + "\24\u109b\24\u1120\24\u11a5\24\u122a\24\u12af\24\u1334\24\u13b9\24\u143e" + "\24\u14c3\24\u1548\24\u15cd\24\u1652\24\u16d7\24\u175c\24\u17e1\24\u1866" + "\24\u18eb\24\u1970\24\u19f5\24\u1a7a\24\u1aff\24\u1b84\24\u1c09\24\u1c8e" + "\24\u1d13\24\u1d98\24\u1e1d\24\u1ea2\24\u1f27\24\u1fac\24\u2031\24\u20b6" + "\24\u213b\24\u21c0\24\u2245\24\u22ca\24\u234f\24\u23d4\24\u2459\24\u24de" + "\24\u2563\24\u25e8\24\u266d\24\u26f2\24\u2777\24\u27fc\24\u2881\24\u2906" + "\24\u298b\24\u2a10\24\u2a95\24\u2b1a\24\u2b9f\24\u2c24\24\u2ca9\24\u2d2e" + "\24\u2db3\24\u2e38\22\ub614\24\u2ebd\24\u2f42\24\u2fc7\24\u304c\24\u30d1" + "\24\u3156\24\u31db\24\u3260\24\u32e5\24\u336a\24\u33ef\24\u3474\24\u34f9" + "\24\u357e\24\u3603\24\u3688\24\u370d\24\u3792\24\u3817\24\u389c\24\u3921" + "\24\u39a6\24\u3a2b\24\u3ab0\24\u3b35\24\u3bba\24\u3c3f\24\u3cc4\24\u3d49" + "\24\u3dce\24\u3e53\24\u3ed8\24\u3f5d\24\u3fe2\24\u4067\24\u40ec\24\u4171" + "\24\u41f6\24\u427b\24\u4300\24\u4385\22\uc62f\24\u440a\24\u448f\24\u4514" + "\22\uc739\24\u4599\24\u461e\24\u46a3\24\u4728\22\uc9d2\24\u47ad\24\u4832" + "\22\ucadc\24\u48b7\24\u493c\24\u49c1\24\u4a46\24\u4acb\24\u4b50\24\u4bd5" + "\22\ud222\24\u4c5a\24\u4cdf\24\u4d64\24\u4de9\24\u4e6e\24\u4ef3\24\u4f78" + "\24\u4ffd\24\u5082\24\u5107\24\u518c\24\u5211\24\u5296\24\u531b\24\u53a0" + "\24\u5425\24\u54aa\24\u552f\24\u55b4\24\u5639\22\ue3cc\22\ue451\24\u56be" + "\24\u56be\24\u5743\24\u57c8\24\u584d\24\u58d2\24\u5957\24\u59dc\24\u5a61" + "\24\u5ae6\24\u5b6b\24\u5bf0\24\u5c75\24\u5cfa\24\u5d7f\24\u5e04\24\u5e89" + "\24\u5f0e\24\u5f93\24\u6018\24\u609d\24\u6122\24\u61a7\24\u622c\24\u62b1" + "\24\u6336\24\u63bb\24\u6440\24\u64c5\24\u654a\24\u65cf\24\u6654\24\u66d9" + "\24\u675e\24\u67e3\24\u6868\24\u68ed\24\u6972\24\u69f7\24\u6a7c\24\u6b01" + "\24\u6b86\24\u6c0b\24\u6c90\24\u6d15\24\u6d9a\24\u6e1f\21\u05d4\21\u0659" + "\24\u6ea4\24\u6f29\24\u6fae\24\u7033\24\u70b8\24\u713d\24\u71c2\24\u7247" + "\24\u72cc\4\u3582\1\u47d3\0\uad01\15\u62d4\24\u7351\24\u73d6\24\u745b" + "\24\u74e0\24\u7565\24\u75ea\24\u766f\24\u76f4\24\u7779\24\u77fe\4\u959f" + "\4\u96a9\0\u0f96\24\u7883\24\u7908\24\u798d\24\u7a12\24\u7a97\24\u7b1c" + "\24\u7ba1\24\u7c26\24\u7cab\24\u7d30\24\u7db5\24\u7e3a\16\u0914\24\u7ebf" + "\24\u7f44\24\u7fc9\24\u804e\24\u80d3\24\u8158\24\u81dd\24\u8262\24\u82e7" + "\24\u836c\24\u83f1\24\u8476\24\u84fb\24\u8580\24\u8605\24\u868a\24\u870f" + "\24\u8794\24\u8819\24\u889e\24\u8923\24\u89a8\24\u8a2d\24\u8ab2\24\u8b37" + "\24\u8bbc\24\u8c41\24\u8cc6\24\u8d4b\24\u8dd0\24\u8e55\24\u8eda\24\u8f5f" + "\24\u8fe4\24\u9069\24\u90ee\24\u9173\24\u91f8\24\u927d\24\u9302\24\u9387" + "\24\u940c\24\u9491\24\u9516\24\u959b\24\u9620\24\u96a5\24\u972a\24\u97af" + "\24\u9834\24\u98b9\24\u993e\23\u43e9\24\u993e\23\u446e\24\u99c3\24\u9a48" + "\24\u9acd\24\u9b52\24\u9bd7\24\u9c5c\24\u9ce1\24\u9d66\24\u9deb\24\u9e70" + "\24\u9ef5\24\u9f7a\24\u9fff\24\ua084\24\ua109\24\ua18e\24\ua213\24\ua298" + "\24\ua31d\24\ua3a2\24\ua427\24\ua4ac\24\ua531\24\ua531\24\ua5b6\24\ua63b" + "\24\ua6c0\24\ua745\24\ua7ca\24\ua84f\24\ua8d4\24\ua959\24\ua9de\24\uaa63" + "\24\uaae8\24\uab6d\24\uabf2\24\uac77\24\uacfc\24\uad81\24\uae06\24\uae8b" + "\24\uaf10\24\uaf95\24\ub01a\24\ub09f\24\ub124\24\ub1a9\24\ub22e\23\u72ab" + "\24\ub22e\23\u7330\24\ub2b3\24\ub338\24\ub3bd\24\ub442\24\ub4c7\24\ub54c" + "\24\ub5d1\24\ub656\24\ub6db\24\ub760\24\ub7e5\24\ub86a\24\ub8ef\24\ub974" + "\24\ub9f9\24\uba7e\24\ubb03\5\u86af\2\u5b2d\2\u5cbc\16\u319a\24\ubb88" + "\24\ubc0d\24\ubc92\24\ubd17\24\ubd9c\24\ube21\24\ubea6\5\ue21f\5\ue329" + "\5\ue3ae\24\ubf2b\24\ubfb0\24\uc035\24\uc0ba\24\uc13f\24\uc1c4\24\uc249" + "\24\uc2ce\24\uc353\24\uc3d8\24\uc45d\24\uc4e2\24\uc567\24\uc5ec\24\uc671" + "\24\uc6f6\24\uc77b\24\uc800\24\uc885\24\uc90a\24\uc98f\24\uca14\24\uca99" + "\24\ucb1e\24\ucba3\24\ucc28\24\uccad\24\ucd32\24\ucdb7\24\uce3c\24\ucec1" + "\24\ucf46\24\ucfcb\24\ud050\24\ud0d5\24\ud15a\24\ud1df\24\ud264\24\ud2e9" + "\24\ud36e\24\ud3f3\24\ud478\24\ud4fd\24\ud582\24\ud607\24\ud68c\24\ud711" + "\24\ud796\24\ud81b\24\ud8a0\24\ud925\24\ud9aa\24\uda2f\24\udab4\24\udb39" + "\24\udbbe\24\udc43\24\udcc8\24\udd4d\24\uddd2\24\ude57\24\udedc\24\udf61" + "\24\udfe6\24\ue06b\24\ue0f0\24\ue175\24\ue1fa\24\ue27f\24\ue304\24\ue389" + "\24\ue40e\24\ue493\24\ue518\24\ue59d\24\ue622\24\ue6a7\24\ue72c\24\ue7b1" + "\24\ue836\24\ue8bb\24\ue940\24\ue9c5\24\uea4a\22\u1506\24\ueacf\24\ueb54" + "\24\uebd9\24\uec5e\24\uece3\24\ued68\24\ueded\24\uee72\24\ueef7\24\uef7c" + "\24\uf001\24\uf086\24\uf10b\24\uf190\24\uf215\24\uf29a\24\uf31f\24\uf3a4" + "\24\uf429\24\uf4ae\24\uf533\22\u171a\24\uf5b8\24\uf63d\24\uf6c2\24\uf747" + "\24\uf7cc\24\uf851\24\uf8d6\24\uf95b\24\uf9e0\24\ufa65\24\ufaea\24\ufb6f" + "\24\ufbf4\24\ufc79\24\ufcfe\24\ufd83\24\ufe08\24\ufe8d\24\uff12\24\uff97" + "\25\34\25\241\25\u0126\25\u01ab\25\u0230\25\u02b5\25\u033a\25\u03bf" + "\25\u0444\25\u04c9\25\u054e\25\u05d3\25\u0658\25\u06dd\23\uce1b\25\u06dd" + "\23\ucea0\25\u0762\25\u07e7\25\u086c\25\u08f1\25\u0976\25\u09fb\25\u0a80" + "\25\u0b05\25\u0b8a\25\u0c0f\25\u0c94\25\u0d19\25\u0d9e\25\u0e23\25\u0ea8" + "\25\u0f2d\25\u0fb2\25\u1037\25\u10bc\25\u1141\25\u11c6\25\u124b\25\u12d0" + "\25\u12d0\25\u1355\25\u13da\25\u145f\25\u14e4\25\u1569\25\u15ee\25\u1673" + "\25\u16f8\25\u177d\25\u1802\25\u1887\25\u190c\25\u1991\25\u1a16\25\u1a9b" + "\25\u1b20\25\u1ba5\25\u1c2a\25\u1caf\25\u1d34\25\u1db9\23\ufac9\25\u1db9" + "\23\ufb4e\25\u1e3e\25\u1ec3\25\u1f48\25\u1fcd\25\u2052\25\u20d7\25\u215c" + "\25\u21e1\25\u2266\25\u22eb\25\u2370\6\uee33\3\u5d62\3\u5ef1\17\u8a92" + "\25\u23f5\25\u247a\25\u24ff\25\u2584\25\u2609\25\u268e\25\u2713\7\u49a3" + "\7\u4aad\7\u4b32\25\u2798\25\u281d\25\u28a2\25\u2927\25\u29ac\25\u2a31" + "\25\u2ab6\25\u2b3b\25\u2bc0\25\u2c45\25\u2cca\25\u2d4f\25\u2dd4\25\u2e59" + "\25\u2ede\25\u2f63\25\u2fe8\25\u306d\25\u30f2\25\u3177\25\u31fc\25\u3281" + "\25\u3306\25\u338b\25\u3410\25\u3495\25\u351a\25\u359f\25\u3624\25\u36a9" + "\25\u372e\25\u37b3\25\u3838\25\u38bd\25\u3942\25\u39c7\25\u3a4c\25\u3ad1" + "\25\u3b56\25\u3bdb\25\u3c60\25\u3ce5\25\u3d6a\25\u3def\25\u3e74\25\u3ef9" + "\25\u3f7e\25\u4003\25\u4088\25\u410d\25\u4192\25\u4217\25\u429c\25\u4321" + "\25\u43a6\25\u442b\25\u44b0\25\u4535\25\u45ba\25\u463f\25\u46c4\25\u4749" + "\25\u47ce\25\u4853\25\u48d8\25\u495d\25\u49e2\25\u4a67\25\u4aec\25\u4b71" + "\25\u4bf6\25\u4c7b\25\u4d00\25\u4d85\25\u4e0a\25\u4e8f\25\u4f14\25\u4f99" + "\25\u501e\25\u50a3\25\u5128\25\u51ad\25\u5232\25\u52b7\22\ubd5a\25\u533c" + "\25\u53c1\25\u5446\25\u54cb\25\u5550\25\u55d5\25\u565a\25\u56df\25\u5764" + "\25\u57e9\25\u586e\25\u58f3\25\u5978\25\u59fd\25\u5a82\25\u5b07\25\u5b8c" + "\25\u5c11\25\u5c96\25\u5d1b\25\u5da0\22\ubf6e\25\u5e25\25\u5eaa\25\u5f2f" + "\25\u5fb4\25\u6039\25\u60be\25\u6143\25\u61c8\25\u624d\25\u62d2\25\u6357" + "\25\u63dc\25\u6461\25\u64e6\25\u656b\25\u65f0\25\u6675\25\u66fa\25\u677f" + "\25\u6804\25\u6889\25\u690e\25\u6993\25\u6a18\25\u6a9d\25\u6b22\25\u6ba7" + "\25\u6c2c\25\u6cb1\25\u6d36\25\u6dbb\25\u6e40\24\u5211\25\u6ec5\25\u6f4a" + "\25\u6fcf\25\u7054\25\u70d9\25\u715e\25\u71e3\25\u7268\25\u72ed\25\u7372" + "\25\u73f7\25\u747c\25\u7501\25\u7586\25\u760b\25\u7690\25\u7715\25\u779a" + "\25\u781f\25\u78a4\25\u7929\25\u79ae\25\u7a33\25\u7ab8\25\u7b3d\25\u7bc2" + "\25\u7c47\25\u7ccc\25\u7d51\25\u7dd6\25\u7e5b\1\ua6e6\25\u7ee0\1\u0449" + "\25\u7f65\21\u0ea9\21\u0f2e\24\u6d15\24\u6d9a\24\u6e1f\25\u7fea\25\u7fea" + "\25\u806f\20\ude58\25\u80f4\25\u8179\25\u81fe\25\u8283\25\u8308\25\u838d" + "\25\u8412\25\u8497\25\u851c\25\u85a1\25\u8626\25\u86ab\25\u8730\20\ud926" + "\25\u87b5\25\u883a\25\u88bf\25\u8944\25\u89c9\25\u8a4e\25\u8ad3\25\u8b58" + "\25\u8bdd\25\u8c62\25\u8ce7\25\u8d6c\25\u8df1\25\u8e76\25\u8efb\25\u8f80" + "\25\u9005\25\u908a\25\u910f\25\u9194\25\u9219\25\u929e\25\u9323\25\u93a8" + "\25\u942d\25\u94b2\25\u9537\25\u95bc\25\u9641\25\u96c6\25\u974b\25\u97d0" + "\25\u9855\25\u98da\25\u995f\25\u99e4\25\u9a69\25\u9aee\25\u9b73\25\u9bf8" + "\25\u9c7d\25\u9d02\25\u9d87\25\u9e0c\25\u9e91\25\u9f16\25\u9f9b\25\ua020" + "\25\ua0a5\25\ua12a\25\ua1af\25\ua234\25\ua2b9\25\ua33e\25\ua3c3\25\ua448" + "\25\ua4cd\25\ua552\25\ua5d7\25\ua65c\25\ua6e1\25\ua766\25\ua7eb\25\ua870" + "\25\ua8f5\25\ua97a\25\ua9ff\25\uaa84\25\uab09\25\uab8e\25\uac13\25\uac98" + "\25\uad1d\25\uada2\25\uae27\25\uaeac\25\uaf31\25\uafb6\25\ub03b\25\ub0c0" + "\25\ub145\25\ub1ca\25\ub24f\25\ub2d4\25\ub359\25\ub3de\25\ub463\25\ub4e8" + "\25\ub56d\25\ub5f2\25\ub677\25\ub6fc\25\ub781\25\ub806\25\ub88b\25\ub910" + "\25\ub995\25\uba1a\25\uba9f\25\ubb24\25\ubba9\25\ubc2e\25\ubcb3\25\ubd38" + "\25\ubdbd\25\ube42\25\ubec7\25\ubf4c\25\ubfd1\25\uc056\25\uc0db\25\uc160" + "\25\uc1e5\25\uc26a\25\uc2ef\25\uc374\25\uc3f9\0\u0f96\25\uc47e\25\uc503" + "\25\uc588\25\uc60d\25\uc692\25\uc717\25\uc79c\25\uc821\25\uc8a6\25\uc92b" + "\25\uc9b0\25\uca35\25\ucaba\25\ucb3f\25\ucbc4\25\ucc49\25\uccce\25\ucd53" + "\25\ucdd8\25\uce5d\25\ucee2\25\ucf67\25\ucfec\25\ud071\25\ud0f6\25\ud17b" + "\25\ud200\25\ud285\25\ud30a\25\ud38f\25\ud414\25\ud499\25\ud51e\25\ud5a3" + "\25\ud628\25\ud6ad\25\ud732\25\ud7b7\25\ud83c\25\ud8c1\25\ud946\25\ud9cb" + "\25\uda50\25\udad5\25\udb5a\25\udbdf\25\udc64\25\udce9\25\udd6e\25\uddf3" + "\25\ude78\25\udefd\25\udf82\25\ue007\25\ue08c\25\ue111\25\ue196\25\ue21b" + "\25\ue2a0\25\ue325\25\ue3aa\25\ue42f\25\ue4b4\25\ue539\25\ue5be\25\ue643" + "\25\ue6c8\25\ue74d\25\ue7d2\25\ue857\25\ue8dc\25\ue961\25\ue9e6\25\uea6b" + "\25\ueaf0\25\ueb75\25\uebfa\25\uec7f\25\ued04\25\ued89\25\uee0e\25\uee93" + "\25\uef18\25\uef9d\25\uf022\25\uf0a7\25\uf12c\25\uf1b1\25\uf236\25\uf2bb" + "\25\uf340\25\uf3c5\25\uf44a\25\uf4cf\25\uf554\25\uf5d9\25\uf65e\25\uf6e3" + "\25\uf768\25\uf7ed\25\uf872\25\uf8f7\25\uf97c\25\ufa01\25\ufa86\25\ufb0b" + "\25\ufb90\25\ufc15\25\ufc9a\25\ufd1f\25\ufda4\25\ufe29\25\ufeae\25\uff33" + "\25\uffb8\26\75\26\302\26\u0147\26\u01cc\26\u0251\26\u02d6\26\u035b" + "\26\u03e0\26\u0465\26\u04ea\26\u056f\26\u05f4\26\u0679\26\u06fe\26\u0783" + "\26\u0808\26\u088d\26\u0912\26\u0997\26\u0a1c\26\u0aa1\26\u0b26\26\u0bab" + "\26\u0c30\26\u0cb5\26\u0d3a\26\u0dbf\26\u0e44\26\u0ec9\26\u0f4e\26\u0fd3" + "\26\u1058\26\u10dd\26\u1162\26\u11e7\26\u126c\26\u12f1\26\u1376\26\u13fb" + "\26\u1480\26\u1505\26\u158a\26\u160f\26\u1694\26\u1719\26\u179e\26\u1823" + "\26\u18a8\26\u192d\26\u19b2\26\u1a37\0\u0f96\26\u1abc\26\u1b41\26\u1bc6" + "\26\u1c4b\26\u1cd0\26\u1d55\26\u1dda\26\u1e5f\26\u1ee4\26\u1f69\26\u1fee" + "\26\u2073\26\u20f8\26\u217d\26\u2202\26\u2287\26\u230c\26\u2391\26\u2416" + "\26\u249b\26\u2520\26\u25a5\26\u262a\26\u26af\26\u2734\26\u27b9\26\u283e" + "\26\u28c3\26\u2948\26\u29cd\26\u2a52\26\u2ad7\26\u2b5c\26\u2be1\26\u2c66" + "\26\u2ceb\26\u2d70\26\u2df5\26\u2e7a\26\u2eff\26\u2f84\26\u3009\26\u308e" + "\26\u3113\26\u3198\26\u321d\26\u32a2\26\u3327\26\u33ac\26\u3431\26\u34b6" + "\26\u353b\26\u35c0\26\u3645\26\u36ca\26\u374f\26\u37d4\26\u3859\26\u38de" + "\26\u3963\26\u39e8\26\u3a6d\26\u3af2\26\u3b77\26\u3bfc\26\u3c81\26\u3d06" + "\26\u3d8b\26\u3e10\26\u3e95\26\u3f1a\26\u3f9f\26\u4024\26\u40a9\26\u412e" + "\26\u41b3\26\u4238\26\u42bd\26\u4342\26\u43c7\26\u444c\26\u44d1\26\u4556" + "\26\u45db\26\u4660\26\u46e5\26\u476a\26\u47ef\26\u4874\26\u48f9\26\u497e" + "\26\u4a03\26\u4a88\26\u4b0d\26\u4b92\26\u4c17\26\u4c9c\26\u4d21\26\u4da6" + "\26\u4e2b\26\u4eb0\26\u4f35\26\u4fba\26\u503f\26\u50c4\26\u5149\26\u51ce" + "\26\u5253\26\u52d8\26\u535d\26\u53e2\26\u5467\26\u54ec\26\u5571\26\u55f6" + "\26\u567b\26\u5700\26\u5785\26\u580a\26\u588f\26\u5914\26\u5999\26\u5a1e" + "\26\u5aa3\26\u5b28\26\u5bad\26\u5c32\26\u5cb7\26\u5d3c\26\u5dc1\26\u5e46" + "\26\u5ecb\26\u5f50\26\u5fd5\26\u605a\26\u60df\26\u6164\26\u61e9\26\u626e" + "\26\u62f3\26\u6378\26\u63fd\26\u6482\26\u6507\25\u8412\26\u658c\26\u6611" + "\26\u6696\26\u671b\26\u67a0\26\u6825\26\u68aa\26\u692f\26\u69b4\26\u6a39" + "\26\u6abe\26\u6b43\22\ue3cc\26\u6bc8\24\u99c3\26\u6c4d\26\u6cd2\26\u6d57" + "\26\u6ddc\26\u6e61\26\u6ee6\26\u6f6b\26\u6ff0\26\u7075\26\u70fa\26\u717f" + "\26\u7204\26\u7289\26\u730e\26\u7393\26\u7418\26\u749d\26\u7522\26\u75a7" + "\26\u762c\26\u76b1\26\u7736\26\u77bb\26\u7840\26\u78c5\26\u794a\26\u79cf" + "\26\u7a54\26\u7ad9\26\u7b5e\26\u7be3\26\u7c68\26\u7ced\26\u7d72\26\u7df7" + "\22\ud222\26\u7e7c\24\ub2b3\26\u7f01\26\u7f86\26\u800b\26\u8090\26\u8115" + "\26\u819a\26\u821f\26\u82a4\26\u8329\26\u83ae\26\u8433\26\u84b8\26\u853d" + "\26\u85c2\26\u8647\26\u86cc\26\u8751\26\u87d6\26\u885b\26\u88e0\26\u8965" + "\26\u89ea\26\u8a6f\26\u8af4\26\u8b79\26\u8bfe\26\u8bfe\26\u8c83\26\u8d08" + "\26\u8d8d\26\u8e12\26\u8e97\26\u8f1c\26\u8fa1\26\u9026\26\u90ab\26\u9130" + "\26\u91b5\26\u923a\26\u92bf\26\u9344\26\u93c9\26\u944e\26\u94d3\26\u9558" + "\26\u95dd\26\u9662\26\u96e7\26\u976c\26\u97f1\26\u9876\26\u98fb\26\u9980" + "\26\u9a05\26\u9a8a\26\u9b0f\26\u9b94\26\u9c19\26\u9c9e\26\u9d23\26\u9da8" + "\26\u9e2d\26\u9eb2\26\u9f37\22\ue3cc\26\u9fbc\25\u0762\26\ua041\26\ua0c6" + "\26\ua14b\26\ua1d0\26\ua255\26\ua2da\26\ua35f\26\ua3e4\26\ua469\26\ua4ee" + "\26\ua573\26\ua5f8\26\ua67d\26\ua702\26\ua787\26\ua80c\26\ua891\26\ua916" + "\26\ua99b\26\uaa20\26\uaaa5\26\uab2a\26\uabaf\26\uac34\26\uacb9\26\uad3e" + "\26\uadc3\26\uae48\26\uaecd\26\uaf52\26\uafd7\26\ub05c\26\ub0e1\26\ub166" + "\26\ub1eb\22\ud222\26\ub270\25\u1e3e\26\ub2f5\26\ub37a\26\ub3ff\26\ub484" + "\26\ub509\26\ub58e\26\ub613\26\ub698\26\ub71d\26\ub7a2\26\ub827\26\ub8ac" + "\26\ub931\26\ub9b6\26\uba3b\26\ubac0\26\ubb45\26\ubbca\26\ubc4f\26\ubcd4" + "\26\ubd59\26\ubdde\26\ube63\26\ubee8\26\ubee8\26\ubf6d\26\ubff2\26\uc077" + "\26\uc0fc\26\uc181\26\uc206\26\uc28b\26\uc310\26\uc395\26\uc41a\26\uc49f" + "\26\uc524\26\uc5a9\26\uc62e\26\uc6b3\26\uc738\26\uc7bd\26\uc842\26\uc8c7" + "\26\uc94c\26\uc9d1\26\uca56\26\ucadb\26\ucb60\26\ucbe5\26\ucc6a\26\uccef" + "\26\ucd74\26\ucdf9\26\uce7e\26\ucf03\26\ucf88\26\ud00d\26\ud092\26\ud117" + "\26\ud19c\26\ud221\26\ud2a6\26\ud32b\26\ud3b0\26\ud435\26\ud4ba\26\ud53f" + "\26\ud5c4\26\ud649\26\ud6ce\26\ud753\26\ud7d8\26\ud85d\26\ud8e2\26\ud967" + "\26\ud9ec\26\uda71\26\udaf6\26\udb7b\26\udc00\26\udc85\26\udd0a\26\udd8f" + "\26\ude14\26\ude99\26\udf1e\26\udfa3\26\ue028\26\ue0ad\26\u567b\26\ue132" + "\26\ue1b7\26\ue23c\26\ue2c1\26\ue346\26\ue3cb\26\ue450\26\ue4d5\26\ue55a" + "\26\ue5df\26\ue664\26\ue6e9\26\ue76e\26\ue7f3\26\ue878\26\ue8fd\26\ue982" + "\26\uea07\26\uea8c\26\ueb11\26\ueb96\26\uec1b\26\ueca0\26\ued25\26\uedaa" + "\26\uee2f\26\ueeb4\26\uef39\26\uefbe\26\uf043\26\uf0c8\26\uf14d\26\uf1d2" + "\26\uf257\26\uf2dc\26\uf361\26\uf3e6\26\uf46b\26\uf4f0\26\uf575\26\uf5fa" + "\26\uf67f\26\uf704\26\uf789\26\uf80e\26\uf893\26\u8965\26\uf918\26\uf99d" + "\26\ufa22\26\ufaa7\26\ufb2c\26\ufbb1\26\ufc36\26\ufcbb\26\ufd40\26\ufdc5" + "\26\ufe4a\26\ufecf\26\uff54\26\uffd9\27\136\27\343\27\u0168\27\u01ed" + "\27\u0272\27\u02f7\27\u037c\27\u0401\27\u0486\27\u050b\27\u0590\27\u0615" + "\27\u069a\27\u071f\27\u07a4\27\u0829\27\u08ae\27\u0933\27\u09b8\27\u0a3d" + "\27\u0ac2\27\u0b47\27\u0bcc\27\u0c51\27\u0cd6\27\u0d5b\27\u0de0\27\u0e65" + "\27\u0eea\27\u0f6f\27\u0ff4\27\u1079\26\ubc4f\27\u10fe\27\u1183\27\u1208" + "\27\u128d\27\u1312\27\u1397\27\u141c\27\u14a1\27\u1526\27\u15ab\27\u1630" + "\27\u16b5\27\u173a\27\u17bf\27\u1844\27\u18c9\27\u194e\27\u19d3\27\u1a58" + "\27\u1add\27\u1b62\27\u1be7\27\u1c6c\27\u1cf1\27\u1d76\25\u838d\24\u74e0" + "\24\u7565\4\u3582\0\u0f96\27\u1dfb\27\u1e80\27\u1f05\27\u1f8a\27\u200f" + "\27\u2094\27\u2119\27\u219e\27\u2223\27\u22a8\27\u232d\27\u23b2\27\u2437" + "\27\u24bc\27\u2541\27\u25c6\25\uc26a\24\ubc92\5\u86af\27\u264b\27\u26d0" + "\27\u2755\27\u27da\27\u285f\27\u28e4\27\u2969\27\u29ee\27\u2a73\27\u2af8" + "\27\u2b7d\27\u2c02\27\u2c87\26\u18a8\25\u24ff\6\uee33\27\u2d0c\27\u2d91" + "\27\u2e16\27\u2e9b\27\u2f20\27\u2fa5\27\u302a\27\u30af\27\u3134\27\u31b9" + "\27\u323e\27\u32c3\27\u3348\27\u33cd\27\u3452\27\u34d7\27\u355c\27\u35e1" + "\27\u3666\27\u36eb\27\u3770\27\u37f5\27\u387a\27\u38ff\27\u3984\27\u3a09" + "\27\u3a8e\27\u3b13\27\u3b98\27\u3c1d\27\u3ca2\27\u3d27\27\u3dac\27\u3e31" + "\27\u3eb6\27\u3f3b\27\u3fc0\27\u4045\27\u40ca\27\u414f\27\u41d4\27\u4259" + "\27\u42de\27\u4363\27\u43e8\27\u446d\27\u44f2\27\u4577\27\u45fc\27\u4681" + "\27\u4706\27\u478b\27\u4810\27\u4895\27\u491a\27\u499f\27\u4a24\27\u4aa9" + "\27\u4b2e\27\u4bb3\27\u4c38";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[12131];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	private static String ZZ_TRANS_PACKED[] = new String[35];
	static {
		Object[] obj;
		try {
			obj = (Object[]) Utility.loadFrom(Utility.workingDirectory + "models/data/ZZ_TRANS_PACKED.gz", 35);
			for (int i = 0; i < obj.length; ++i) {
				ZZ_TRANS_PACKED[i] = (String) obj[i];
			}
		} catch (ClassNotFoundException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static int[] zzUnpackTrans() {
		int[] result = new int[1526973];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED[0], offset, result);
		offset = zzUnpackTrans(ZZ_TRANS_PACKED[1], offset, result);
		offset = zzUnpackTrans(ZZ_TRANS_PACKED[2], offset, result);
		offset = zzUnpackTrans(ZZ_TRANS_PACKED[3], offset, result);
		offset = zzUnpackTrans(ZZ_TRANS_PACKED[4], offset, result);
		offset = zzUnpackTrans(ZZ_TRANS_PACKED[5], offset, result);
		offset = zzUnpackTrans(ZZ_TRANS_PACKED[6], offset, result);
		offset = zzUnpackTrans(ZZ_TRANS_PACKED[7], offset, result);
		offset = zzUnpackTrans(ZZ_TRANS_PACKED[8], offset, result);
		offset = zzUnpackTrans(ZZ_TRANS_PACKED[9], offset, result);
		offset = zzUnpackTrans(ZZ_TRANS_PACKED[10], offset, result);
		offset = zzUnpackTrans(ZZ_TRANS_PACKED[11], offset, result);
		offset = zzUnpackTrans(ZZ_TRANS_PACKED[12], offset, result);
		offset = zzUnpackTrans(ZZ_TRANS_PACKED[13], offset, result);
		offset = zzUnpackTrans(ZZ_TRANS_PACKED[14], offset, result);
		offset = zzUnpackTrans(ZZ_TRANS_PACKED[15], offset, result);
		offset = zzUnpackTrans(ZZ_TRANS_PACKED[16], offset, result);
		offset = zzUnpackTrans(ZZ_TRANS_PACKED[17], offset, result);
		offset = zzUnpackTrans(ZZ_TRANS_PACKED[18], offset, result);
		offset = zzUnpackTrans(ZZ_TRANS_PACKED[19], offset, result);
		offset = zzUnpackTrans(ZZ_TRANS_PACKED[20], offset, result);
		offset = zzUnpackTrans(ZZ_TRANS_PACKED[21], offset, result);
		offset = zzUnpackTrans(ZZ_TRANS_PACKED[22], offset, result);
		offset = zzUnpackTrans(ZZ_TRANS_PACKED[23], offset, result);
		offset = zzUnpackTrans(ZZ_TRANS_PACKED[24], offset, result);
		offset = zzUnpackTrans(ZZ_TRANS_PACKED[25], offset, result);
		offset = zzUnpackTrans(ZZ_TRANS_PACKED[26], offset, result);
		offset = zzUnpackTrans(ZZ_TRANS_PACKED[27], offset, result);
		offset = zzUnpackTrans(ZZ_TRANS_PACKED[28], offset, result);
		offset = zzUnpackTrans(ZZ_TRANS_PACKED[29], offset, result);
		offset = zzUnpackTrans(ZZ_TRANS_PACKED[30], offset, result);
		offset = zzUnpackTrans(ZZ_TRANS_PACKED[31], offset, result);
		offset = zzUnpackTrans(ZZ_TRANS_PACKED[32], offset, result);
		offset = zzUnpackTrans(ZZ_TRANS_PACKED[33], offset, result);
		offset = zzUnpackTrans(ZZ_TRANS_PACKED[34], offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = { "Unkown internal scanner error", "Error: could not match input", "Error: pushback value was too large" };

	private static String ZZ_ATTRIBUTE_PACKED_0; 
	static {
		try {
			//			Utility.saveTo(Utility.workingDirectory + "models/data/ZZ_ATTRIBUTE_PACKED_0.gz", ZZ_ATTRIBUTE_PACKED_0);
			ZZ_ATTRIBUTE_PACKED_0 = (String) Utility.loadFrom(Utility.workingDirectory + "models/data/ZZ_ATTRIBUTE_PACKED_0.gz");
		} catch (IOException | ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static int[] zzUnpackAttribute() {
		int[] result = new int[12131];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/** the input device */
	private java.io.Reader zzReader;

	/** the current state of the DFA */
	private int zzState;

	/** the current lexical state */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is the source of
	 * the yytext() string
	 */
	private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

	/** the textposition at the last accepting state */
	private int zzMarkedPos;

	/** the current text position in the buffer */
	private int zzCurrentPos;

	/** startRead marks the beginning of the yytext() string in the buffer */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read from
	 * input
	 */
	private int zzEndRead;

	/** number of newlines encountered up to the start of the matched text */
	private int yyline;

	/** the number of characters up to the start of the matched text */
	private int yychar;

	/**
	 * the number of characters from the last newline up to the start of the
	 * matched text
	 */
	private int yycolumn;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/** zzAtEOF == true <=> the scanner is at the EOF */
	private boolean zzAtEOF;

	/** denotes if the user-EOF-code has already been executed */
	private boolean zzEOFDone;

	/** For the backwards DFA of general lookahead statements */
	private boolean[] zzFin = new boolean[ZZ_BUFFERSIZE + 1];

	/* user code: */

	/**
	 * Constructs a new PTBLexer. You specify the type of result tokens with a
	 * LexedTokenFactory, and can specify the treatment of tokens by boolean
	 * options given in a comma separated String (e.g.,
	 * "invertible,normalizeParentheses=true"). If the String is
	 * <code>null</code> or empty, you get the traditional PTB3 normalization
	 * behaviour (i.e., you get ptb3Escaping=false). If you want no
	 * normalization, then you should pass in the String "ptb3Escaping=false".
	 * See the documentation in the {@link PTBTokenizer} class for full
	 * discussion of all the available options.
	 *
	 * @param r
	 *            The Reader to tokenize text from
	 * @param tf
	 *            The LexedTokenFactory that will be invoked to convert each
	 *            substring extracted by the lexer into some kind of Object
	 *            (such as a Word or CoreLabel).
	 * @param options
	 *            Options to the tokenizer (see {@link PTBTokenizer})
	 */
	public PTBLexer(Reader r, LexedTokenFactory<?> tf, String options) {
		this(r);
		this.tokenFactory = tf;
		if (options == null) {
			options = "";
		}
		Properties prop = StringUtils.stringToProperties(options);
		Set<Map.Entry<Object, Object>> props = prop.entrySet();
		for (Map.Entry<Object, Object> item : props) {
			String key = (String) item.getKey();
			String value = (String) item.getValue();
			boolean val = Boolean.valueOf(value);
			if ("".equals(key)) {
				// allow an empty item
			} else if ("invertible".equals(key)) {
				invertible = val;
			} else if ("tokenizeNLs".equals(key)) {
				tokenizeNLs = val;
			} else if ("tokenizePerLine".equals(key)) {
				tokenizePerLine = val;
			} else if ("ptb3Escaping".equals(key)) {
				normalizeSpace = val;
				normalizeAmpersandEntity = val;
				normalizeCurrency = val;
				normalizeFractions = val;
				normalizeParentheses = val;
				normalizeOtherBrackets = val;
				latexQuotes = val;
				unicodeQuotes = val;
				asciiQuotes = val;
				ptb3Ellipsis = val;
				unicodeEllipsis = val;
				ptb3Dashes = val;
			} else if ("americanize".equals(key)) {
				americanize = val;
			} else if ("normalizeSpace".equals(key)) {
				normalizeSpace = val;
			} else if ("normalizeAmpersandEntity".equals(key)) {
				normalizeAmpersandEntity = val;
			} else if ("normalizeCurrency".equals(key)) {
				normalizeCurrency = val;
			} else if ("normalizeFractions".equals(key)) {
				normalizeFractions = val;
			} else if ("normalizeParentheses".equals(key)) {
				normalizeParentheses = val;
			} else if ("normalizeOtherBrackets".equals(key)) {
				normalizeOtherBrackets = val;
			} else if ("latexQuotes".equals(key)) {
				latexQuotes = val;
			} else if ("unicodeQuotes".equals(key)) {
				unicodeQuotes = val;
				if (val) {
					latexQuotes = false; // need to override default
				}
			} else if ("asciiQuotes".equals(key)) {
				asciiQuotes = val;
				if (val) {
					latexQuotes = false; // need to override default
					unicodeQuotes = false;
				}
			} else if ("splitAssimilations".equals(key)) {
				splitAssimilations = val;
			} else if ("splitHyphenated".equals(key)) {
				splitHyphenated = val;
			} else if ("ptb3Ellipsis".equals(key)) {
				ptb3Ellipsis = val;
			} else if ("unicodeEllipsis".equals(key)) {
				unicodeEllipsis = val;
			} else if ("ptb3Dashes".equals(key)) {
				ptb3Dashes = val;
			} else if ("escapeForwardSlashAsterisk".equals(key)) {
				escapeForwardSlashAsterisk = val;
			} else if ("untokenizable".equals(key)) {
				switch (value) {
				case "noneDelete":
					untokenizable = UntokenizableOptions.NONE_DELETE;
					break;
				case "firstDelete":
					untokenizable = UntokenizableOptions.FIRST_DELETE;
					break;
				case "allDelete":
					untokenizable = UntokenizableOptions.ALL_DELETE;
					break;
				case "noneKeep":
					untokenizable = UntokenizableOptions.NONE_KEEP;
					break;
				case "firstKeep":
					untokenizable = UntokenizableOptions.FIRST_KEEP;
					break;
				case "allKeep":
					untokenizable = UntokenizableOptions.ALL_KEEP;
					break;
				default:
					throw new IllegalArgumentException("PTBLexer: Invalid option value in constructor: " + key + ": " + value);
				}
			} else if ("strictTreebank3".equals(key)) {
				strictTreebank3 = val;
			} else {
				throw new IllegalArgumentException("PTBLexer: Invalid options key in constructor: " + key);
			}
		}
		// this.seenUntokenizableCharacter = false; // unnecessary, it's default initialized
		if (invertible) {
			if (!(tf instanceof CoreLabelTokenFactory)) {
				throw new IllegalArgumentException("PTBLexer: the invertible option requires a CoreLabelTokenFactory");
			}
			prevWord = (CoreLabel) tf.makeToken("", 0, 0);
			prevWordAfter = new StringBuilder();
		}
		if (tokenizePerLine) {
			yybegin(YyTokenizePerLine);
		} else {
			yybegin(YyNotTokenizePerLine);
		}
	}

	/** A logger for this class */
	private static final Redwood.RedwoodChannels logger = Redwood.channels(PTBLexer.class);

	private LexedTokenFactory<?> tokenFactory;
	private CoreLabel prevWord;
	private StringBuilder prevWordAfter;
	private boolean seenUntokenizableCharacter;

	private enum UntokenizableOptions {
		NONE_DELETE, FIRST_DELETE, ALL_DELETE, NONE_KEEP, FIRST_KEEP, ALL_KEEP
	}

	private UntokenizableOptions untokenizable = UntokenizableOptions.FIRST_DELETE;

	/* Flags begin with historical ptb3Escaping behavior */
	private boolean invertible;
	private boolean tokenizeNLs;
	private boolean tokenizePerLine;
	private boolean americanize = false;
	private boolean normalizeSpace = true;
	private boolean normalizeAmpersandEntity = true;
	private boolean normalizeCurrency = true;
	private boolean normalizeFractions = true;
	private boolean normalizeParentheses = true;
	private boolean normalizeOtherBrackets = true;
	private boolean latexQuotes = true;
	private boolean unicodeQuotes;
	private boolean asciiQuotes;
	private boolean ptb3Ellipsis = true;
	private boolean unicodeEllipsis;
	private boolean ptb3Dashes = true;
	private boolean escapeForwardSlashAsterisk = false;
	private boolean strictTreebank3 = false;
	private boolean splitAssimilations = true;
	private boolean splitHyphenated = false;
	/*
	 * This has now been extended to cover the main Windows CP1252 characters,
	 * at either their correct Unicode codepoints, or in their invalid positions
	 * as 8 bit chars inside the iso-8859 control region.
	 *
	 * ellipsis 85 0133 2026 8230 single quote curly starting 91 0145 2018 8216
	 * single quote curly ending 92 0146 2019 8217 double quote curly starting
	 * 93 0147 201C 8220 double quote curly ending 94 0148 201D 8221 bullet 95
	 * en dash 96 0150 2013 8211 em dash 97 0151 2014 8212
	 */

	/*
	 * Bracket characters and forward slash and asterisk:
	 *
	 * Original Treebank 3 WSJ Uses -LRB- -RRB- as the representation for ( )
	 * and -LCB- -RCB- as the representation for { }. There are no occurrences
	 * of [ ], though there is some mention of -LSB- -RSB- in early documents.
	 * There are no occurrences of < >. All brackets are tagged -LRB- -RRB-
	 * [This stays constant.] Forward slash and asterisk are escaped by a
	 * preceding \ (as \/ and \*)
	 *
	 * Treebank 3 Brown corpus Has -LRB- -RRB- Has a few instances of unescaped
	 * [ ] in compounds (the token "A[fj]" Neither forward slash or asterisk
	 * appears.
	 *
	 * Ontonotes (r4) Uses -LRB- -RRB- -LCB- -RCB- -LSB- -RSB-. Has a very few
	 * uses of < and > in longer tokens, which are not escaped. Slash is not
	 * escaped. Asterisk is not escaped.
	 *
	 * LDC2012T13-eng_web_tbk (Google web treebank) Has -LRB- -RRB- Has { and }
	 * used unescaped, treated as brackets. Has < and > used unescaped,
	 * sometimes treated as brackets. Sometimes << and >> are treated as
	 * brackets! Has [ and ] used unescaped, treated as brackets. Slash is not
	 * escaped. Asterisk is not escaped.
	 *
	 * Reasonable conclusions for now: - Never escape < > - Still by default
	 * escape [ ] { } but it can be turned off. Use -LSB- -RSB- -LCB- -RCB-.
	 * Move to not escaping slash and asterisk, and delete escaping in
	 * PennTreeReader.
	 */

	public static final String openparen = "-LRB-";
	public static final String closeparen = "-RRB-";
	public static final String openbrace = "-LCB-";
	public static final String closebrace = "-RCB-";
	public static final String ptbmdash = "--";
	public static final String ptb3EllipsisStr = "...";
	public static final String unicodeEllipsisStr = "\u2026";
	/** For tokenizing carriage returns. (JS) */
	public static final String NEWLINE_TOKEN = "*NL*";

	/*
	 * This pattern now also include newlines, since we sometimes allow them in
	 * SGML tokens....
	 */
	private static final Pattern SINGLE_SPACE_PATTERN = Pattern.compile("[ \r\n]");
	private static final Pattern LEFT_PAREN_PATTERN = Pattern.compile("\\(");
	private static final Pattern RIGHT_PAREN_PATTERN = Pattern.compile("\\)");
	private static final Pattern AMP_PATTERN = Pattern.compile("(?i:&amp;)");

	private static final Pattern ONE_FOURTH_PATTERN = Pattern.compile("\u00BC");
	private static final Pattern ONE_HALF_PATTERN = Pattern.compile("\u00BD");
	private static final Pattern THREE_FOURTHS_PATTERN = Pattern.compile("\u00BE");
	private static final Pattern ONE_THIRD_PATTERN = Pattern.compile("\u2153");
	private static final Pattern TWO_THIRDS_PATTERN = Pattern.compile("\u2154");

	private Object normalizeFractions(final String in) {
		String out = in;
		if (normalizeFractions) {
			if (escapeForwardSlashAsterisk) {
				out = ONE_FOURTH_PATTERN.matcher(out).replaceAll("1\\\\/4");
				out = ONE_HALF_PATTERN.matcher(out).replaceAll("1\\\\/2");
				out = THREE_FOURTHS_PATTERN.matcher(out).replaceAll("3\\\\/4");
				out = ONE_THIRD_PATTERN.matcher(out).replaceAll("1\\\\/3");
				out = TWO_THIRDS_PATTERN.matcher(out).replaceAll("2\\\\/3");
			} else {
				out = ONE_FOURTH_PATTERN.matcher(out).replaceAll("1/4");
				out = ONE_HALF_PATTERN.matcher(out).replaceAll("1/2");
				out = THREE_FOURTHS_PATTERN.matcher(out).replaceAll("3/4");
				out = ONE_THIRD_PATTERN.matcher(out).replaceAll("1/3");
				out = TWO_THIRDS_PATTERN.matcher(out).replaceAll("2/3");
			}
		}
		//  System.err.println("normalizeFractions="+normalizeFractions+", escapeForwardSlashAsterisk="+escapeForwardSlashAsterisk);
		//  System.err.println("Mapped |"+in+"| to |" + out + "|.");
		return getNext(out, in);
	}

	private void breakByHyphens(String in) {
		if (splitHyphenated) {
			int firstHyphen = in.indexOf('-');
			yypushback(in.length() - firstHyphen);
		}
	}

	private static String removeSoftHyphens(String in) {
		// \u00AD is the soft hyphen character, which we remove, regarding it as inserted only for line-breaking
		if (in.indexOf('\u00AD') < 0) {
			// shortcut doing work
			return in;
		}
		int length = in.length();
		StringBuilder out = new StringBuilder(length - 1);
		for (int i = 0; i < length; i++) {
			char ch = in.charAt(i);
			if (ch != '\u00AD') {
				out.append(ch);
			}
		}
		if (out.length() == 0) {
			out.append('-'); // don't create an empty token
		}
		return out.toString();
	}

	private static final Pattern CENTS_PATTERN = Pattern.compile("\u00A2");
	private static final Pattern POUND_PATTERN = Pattern.compile("\u00A3");
	private static final Pattern GENERIC_CURRENCY_PATTERN = Pattern.compile("[\u0080\u00A4\u20A0\u20AC]");

	private static String normalizeCurrency(String in) {
		String s1 = in;
		s1 = CENTS_PATTERN.matcher(s1).replaceAll("cents");
		s1 = POUND_PATTERN.matcher(s1).replaceAll("#"); // historically used for pound in PTB3
		s1 = GENERIC_CURRENCY_PATTERN.matcher(s1).replaceAll("\\$"); // Euro (ECU, generic currency)  -- no good translation!
		return s1;
	}

	private static final Pattern singleQuote = Pattern.compile("&apos;|'");
	private static final Pattern doubleQuote = Pattern.compile("\"|&quot;");

	// 91,92,93,94 aren't valid unicode points, but sometimes they show
	// up from cp1252 and need to be translated
	private static final Pattern leftSingleQuote = Pattern.compile("[\u0091\u2018\u201B\u2039]");
	private static final Pattern rightSingleQuote = Pattern.compile("[\u0092\u2019\u203A]");
	private static final Pattern leftDoubleQuote = Pattern.compile("[\u0093\u201C\u00AB]");
	private static final Pattern rightDoubleQuote = Pattern.compile("[\u0094\u201D\u00BB]");

	private static String latexQuotes(String in, boolean probablyLeft) {
		String s1 = in;
		if (probablyLeft) {
			s1 = singleQuote.matcher(s1).replaceAll("`");
			s1 = doubleQuote.matcher(s1).replaceAll("``");
		} else {
			s1 = singleQuote.matcher(s1).replaceAll("'");
			s1 = doubleQuote.matcher(s1).replaceAll("''");
		}
		s1 = leftSingleQuote.matcher(s1).replaceAll("`");
		s1 = rightSingleQuote.matcher(s1).replaceAll("'");
		s1 = leftDoubleQuote.matcher(s1).replaceAll("``");
		s1 = rightDoubleQuote.matcher(s1).replaceAll("''");
		return s1;
	}

	private static final Pattern asciiSingleQuote = Pattern.compile("&apos;|[\u0091\u2018\u0092\u2019\u201A\u201B\u2039\u203A']");
	private static final Pattern asciiDoubleQuote = Pattern.compile("&quot;|[\u0093\u201C\u0094\u201D\u201E\u00AB\u00BB\"]");

	private static String asciiQuotes(String in) {
		String s1 = in;
		s1 = asciiSingleQuote.matcher(s1).replaceAll("'");
		s1 = asciiDoubleQuote.matcher(s1).replaceAll("\"");
		return s1;
	}

	private static final Pattern unicodeLeftSingleQuote = Pattern.compile("\u0091");
	private static final Pattern unicodeRightSingleQuote = Pattern.compile("\u0092");
	private static final Pattern unicodeLeftDoubleQuote = Pattern.compile("\u0093");
	private static final Pattern unicodeRightDoubleQuote = Pattern.compile("\u0094");

	private static String unicodeQuotes(String in, boolean probablyLeft) {
		String s1 = in;
		if (probablyLeft) {
			s1 = singleQuote.matcher(s1).replaceAll("\u2018");
			s1 = doubleQuote.matcher(s1).replaceAll("\u201c");
		} else {
			s1 = singleQuote.matcher(s1).replaceAll("\u2019");
			s1 = doubleQuote.matcher(s1).replaceAll("\u201d");
		}
		s1 = unicodeLeftSingleQuote.matcher(s1).replaceAll("\u2018");
		s1 = unicodeRightSingleQuote.matcher(s1).replaceAll("\u2019");
		s1 = unicodeLeftDoubleQuote.matcher(s1).replaceAll("\u201c");
		s1 = unicodeRightDoubleQuote.matcher(s1).replaceAll("\u201d");
		return s1;
	}

	private Object handleQuotes(String tok, boolean probablyLeft) {
		String normTok;
		if (latexQuotes) {
			normTok = latexQuotes(tok, probablyLeft);
		} else if (unicodeQuotes) {
			normTok = unicodeQuotes(tok, probablyLeft);
		} else if (asciiQuotes) {
			normTok = asciiQuotes(tok);
		} else {
			normTok = tok;
		}
		// System.err.printf("handleQuotes changed %s to %s.%n", tok, normTok);
		return getNext(normTok, tok);
	}

	private Object handleEllipsis(final String tok) {
		if (ptb3Ellipsis) {
			return getNext(ptb3EllipsisStr, tok);
		} else if (unicodeEllipsis) {
			return getNext(unicodeEllipsisStr, tok);
		} else {
			return getNext(tok, tok);
		}
	}

	/**
	 * This quotes a character with a backslash, but doesn't do it if the
	 * character is already preceded by a backslash.
	 */
	private static String delimit(String s, char c) {
		int i = s.indexOf(c);
		while (i != -1) {
			if (i == 0 || s.charAt(i - 1) != '\\') {
				s = s.substring(0, i) + '\\' + s.substring(i);
				i = s.indexOf(c, i + 2);
			} else {
				i = s.indexOf(c, i + 1);
			}
		}
		return s;
	}

	private static String normalizeAmp(final String in) {
		return AMP_PATTERN.matcher(in).replaceAll("&");
	}

	private int indexOfSpace(String txt) {
		for (int i = 0, len = txt.length(); i < len; i++) {
			char ch = txt.charAt(i);
			if (ch == ' ' || ch == '\u00A0') {
				return i;
			}
		}
		return -1;
	}

	private Object getNext() {
		final String txt = yytext();
		return getNext(txt, txt);
	}

	/**
	 * Make the next token.
	 * 
	 * @param txt
	 *            What the token should be
	 * @param originalText
	 *            The original String that got transformed into txt
	 */
	private Object getNext(String txt, String originalText) {
		if (invertible) {
			String str = prevWordAfter.toString();
			prevWordAfter.setLength(0);
			CoreLabel word = (CoreLabel) tokenFactory.makeToken(txt, yychar, yylength());
			word.set(CoreAnnotations.OriginalTextAnnotation.class, originalText);
			word.set(CoreAnnotations.BeforeAnnotation.class, str);
			prevWord.set(CoreAnnotations.AfterAnnotation.class, str);
			prevWord = word;
			return word;
		} else {
			return tokenFactory.makeToken(txt, yychar, yylength());
		}
	}

	private Object getNormalizedAmpNext() {
		final String txt = yytext();
		if (normalizeAmpersandEntity) {
			return getNext(normalizeAmp(txt), txt);
		} else {
			return getNext();
		}
	}

	private void fixJFlex4SpaceAfterTokenBug() {
		// try to work around an apparent jflex bug where it
		// gets a space at the token end by getting
		// wrong the length of the trailing context.
		while (yylength() > 0) {
			char last = yycharat(yylength() - 1);
			if (last == ' ' || last == '\t' || (last >= '\n' && last <= '\r' || last == '\u0085')) {
				yypushback(1);
			} else {
				break;
			}
		}
	}

	private Object processAcronym() {
		fixJFlex4SpaceAfterTokenBug();
		String s;
		if (yylength() == 2) { // "I.", etc.
			yypushback(1); // return a period next time;
			s = yytext(); // return the word without the final period
		} else if (strictTreebank3 && !"U.S.".equals(yytext())) {
			yypushback(1); // return a period for next time
			s = yytext(); // return the word without the final period
		} else {
			s = yytext(); // return the word WITH the final period
			yypushback(1); // (reduplication:) also return a period for next time
		}
		return getNext(s, yytext());
	}

	private Object processAbbrev3() {
		fixJFlex4SpaceAfterTokenBug();
		return getNext();
	}

	private Object processAbbrev1() {
		String s;
		if (strictTreebank3 && !"U.S.".equals(yytext())) {
			yypushback(1); // return a period for next time
			s = yytext();
		} else {
			s = yytext();
			yypushback(1); // return a period for next time
		}
		return getNext(s, yytext());
	}

	/**
	 * Creates a new scanner There is also a java.io.InputStream version of this
	 * constructor.
	 *
	 * @param in
	 *            the java.io.Reader to read input from.
	 */
	PTBLexer(java.io.Reader in) {
		this.zzReader = in;
	}

	/**
	 * Creates a new scanner. There is also java.io.Reader version of this
	 * constructor.
	 *
	 * @param in
	 *            the java.io.Inputstream to read input from.
	 */
	PTBLexer(java.io.InputStream in) {
		this(new java.io.InputStreamReader(in, java.nio.charset.Charset.forName("UTF-8")));
	}

	/**
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed
	 *            the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		char[] map = new char[0x10000];
		int i = 0; /* index in packed string */
		int j = 0; /* index in unpacked array */
		while (i < 4308) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do
				map[j++] = value;
			while (--count > 0);
		}
		return map;
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return <code>false</code>, iff there was new input.
	 * 
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {

		/* first: make room (if you can) */
		if (zzStartRead > 0) {
			System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead - zzStartRead);

			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length) {
			/* if not: blow it up */
			char newBuffer[] = new char[zzCurrentPos * 2];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
		}

		/* finally: fill the buffer with new input */
		int numRead = zzReader.read(zzBuffer, zzEndRead, zzBuffer.length - zzEndRead);

		if (numRead > 0) {
			zzEndRead += numRead;
			return false;
		}
		// unlikely but not impossible: read 0 characters, but not at end of stream    
		if (numRead == 0) {
			int c = zzReader.read();
			if (c == -1) {
				return true;
			} else {
				zzBuffer[zzEndRead++] = (char) c;
				return false;
			}
		}

		// numRead < 0
		return true;
	}

	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException {
		zzAtEOF = true; /* indicate end of file */
		zzEndRead = zzStartRead; /* invalidate buffer */

		if (zzReader != null)
			zzReader.close();
	}

	/**
	 * Resets the scanner to read from a new input stream. Does not close the
	 * old reader.
	 *
	 * All internal variables are reset, the old input stream <b>cannot</b> be
	 * reused (internal buffer is discarded and lost). Lexical state is set to
	 * <tt>ZZ_INITIAL</tt>.
	 *
	 * Internal scan buffer is resized down to its initial length, if it has
	 * grown.
	 *
	 * @param reader
	 *            the new input stream
	 */
	public final void yyreset(java.io.Reader reader) {
		zzReader = reader;
		zzAtBOL = true;
		zzAtEOF = false;
		zzEOFDone = false;
		zzEndRead = zzStartRead = 0;
		zzCurrentPos = zzMarkedPos = 0;
		yyline = yychar = yycolumn = 0;
		zzLexicalState = YYINITIAL;
		if (zzBuffer.length > ZZ_BUFFERSIZE)
			zzBuffer = new char[ZZ_BUFFERSIZE];
	}

	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}

	/**
	 * Enters a new lexical state
	 *
	 * @param newState
	 *            the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}

	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext() {
		return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
	}

	/**
	 * Returns the character at position <tt>pos</tt> from the matched text.
	 * 
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos
	 *            the position of the character to fetch. A value from 0 to
	 *            yylength()-1.
	 *
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBuffer[zzStartRead + pos];
	}

	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}

	/**
	 * Reports an error that occured while scanning.
	 *
	 * In a wellformed scanner (no or only correct usage of yypushback(int) and
	 * a match-all fallback rule) this method will only be called with things
	 * that "Can't Possibly Happen". If this method is called, something is
	 * seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
	 *
	 * Usual syntax/scanner level error handling should be done in error
	 * fallback rules.
	 *
	 * @param errorCode
	 *            the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}

	/**
	 * Pushes the specified amount of characters back into the input stream.
	 *
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number
	 *            the number of characters to be read again. This number must
	 *            not be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}

	/**
	 * Resumes scanning until the next regular expression is matched, the end of
	 * input is encountered or an I/O-Error occurs.
	 *
	 * @return the next token
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	public Object next() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			yychar += zzMarkedPosL - zzStartRead;

			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];

			// set up zzAction for empty match case:
			int zzAttributes = zzAttrL[zzState];
			if ((zzAttributes & 1) == 1) {
				zzAction = zzState;
			}

			zzForAction: {
				while (true) {

					if (zzCurrentPosL < zzEndReadL)
						zzInput = zzBufferL[zzCurrentPosL++];
					else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = zzBufferL[zzCurrentPosL++];
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1)
						break zzForAction;
					zzState = zzNext;

					zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8)
							break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
			case 1: {
				String str = yytext();
				int first = str.charAt(0);
				String msg = String.format("Untokenizable: %s (U+%s, decimal: %s)", yytext(), Integer.toHexString(first).toUpperCase(), Integer.toString(first));
				switch (untokenizable) {
				case NONE_DELETE:
					if (invertible) {
						prevWordAfter.append(str);
					}
					break;
				case FIRST_DELETE:
					if (invertible) {
						prevWordAfter.append(str);
					}
					if (!this.seenUntokenizableCharacter) {
						logger.warning(msg);
						this.seenUntokenizableCharacter = true;
					}
					break;
				case ALL_DELETE:
					if (invertible) {
						prevWordAfter.append(str);
					}
					logger.warning(msg);
					this.seenUntokenizableCharacter = true;
					break;
				case NONE_KEEP:
					return getNext();
				case FIRST_KEEP:
					if (!this.seenUntokenizableCharacter) {
						logger.warning(msg);
						this.seenUntokenizableCharacter = true;
					}
					return getNext();
				case ALL_KEEP:
					logger.warning(msg);
					this.seenUntokenizableCharacter = true;
					return getNext();
				}
			}
			case 67:
				break;
			case 2: {
				return getNext("<", yytext());
			}
			case 68:
				break;
			case 3: {
				return getNext();
			}
			case 69:
				break;
			case 4: {
				if (yylength() >= 3 && yylength() <= 4 && ptb3Dashes) {
					return getNext(ptbmdash, yytext());
				} else {
					return getNext();
				}
			}
			case 70:
				break;
			case 5: {
				if (tokenizeNLs) {
					return getNext(NEWLINE_TOKEN, yytext()); // js: for tokenizing carriage returns
				} else if (invertible) {
					prevWordAfter.append(yytext());
				}
			}
			case 71:
				break;
			case 6: {
				final String origTxt = yytext();
				String tmp = removeSoftHyphens(origTxt);
				if (americanize) {
					tmp = Americanize.americanize(tmp);
				}
				return getNext(tmp, origTxt);
			}
			case 72:
				break;
			case 7: {
				if (invertible) {
					prevWordAfter.append(yytext());
				}
			}
			case 73:
				break;
			case 8: {
				return handleQuotes(yytext(), false);
			}
			case 74:
				break;
			case 9: {
				if (escapeForwardSlashAsterisk) {
					return getNext(delimit(yytext(), '/'), yytext());
				} else {
					return getNext();
				}
			}
			case 75:
				break;
			case 10: {
				return getNext(">", yytext());
			}
			case 76:
				break;
			case 11: {
				if (ptb3Dashes) {
					return getNext(ptbmdash, yytext());
				} else {
					return getNext();
				}
			}
			case 77:
				break;
			case 12: {
				return getNext(removeSoftHyphens(yytext()), yytext());
			}
			case 78:
				break;
			case 13: {
				return handleEllipsis(yytext());
			}
			case 79:
				break;
			case 14: {
				return normalizeFractions(yytext());
			}
			case 80:
				break;
			case 15: {
				if (normalizeCurrency) {
					return getNext(normalizeCurrency(yytext()), yytext());
				} else {
					return getNext();
				}
			}
			case 81:
				break;
			case 16: {
				if (normalizeOtherBrackets) {
					return getNext(closebrace, yytext());
				} else {
					return getNext();
				}
			}
			case 82:
				break;
			case 17: {
				if (normalizeParentheses) {
					return getNext(openparen, yytext());
				} else {
					return getNext();
				}
			}
			case 83:
				break;
			case 18: {
				if (normalizeParentheses) {
					return getNext(closeparen, yytext());
				} else {
					return getNext();
				}
			}
			case 84:
				break;
			case 19: {
				if (escapeForwardSlashAsterisk) {
					return getNext(delimit(yytext(), '*'), yytext());
				} else {
					return getNext();
				}
			}
			case 85:
				break;
			case 20: {
				if (normalizeOtherBrackets) {
					return getNext(openbrace, yytext());
				} else {
					return getNext();
				}
			}
			case 86:
				break;
			case 21: {
				if (normalizeOtherBrackets) {
					return getNext("-RSB-", yytext());
				} else {
					return getNext();
				}
			}
			case 87:
				break;
			case 22: {
				if (normalizeOtherBrackets) {
					return getNext("-LSB-", yytext());
				} else {
					return getNext();
				}
			}
			case 88:
				break;
			case 23: {
				if (invertible) {
					prevWordAfter.append(yytext());
				}
			}
			case 89:
				break;
			case 24: {
				return getNext("\u2022", yytext());
			}
			case 90:
				break;
			case 25: {
				return getNext("\u2122", yytext());
			}
			case 91:
				break;
			case 26:
			// general lookahead, find correct zzMarkedPos
			{
				int zzFState = 15;
				int zzFPos = zzStartRead;
				if (zzFin.length <= zzBufferL.length) {
					zzFin = new boolean[zzBufferL.length + 1];
				}
				boolean zzFinL[] = zzFin;
				while (zzFState != -1 && zzFPos < zzMarkedPos) {
					zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
					zzInput = zzBufferL[zzFPos++];
					zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
				}
				if (zzFState != -1) {
					zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
				}
				while (zzFPos <= zzMarkedPos) {
					zzFinL[zzFPos++] = false;
				}

				zzFState = 16;
				zzFPos = zzMarkedPos;
				while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
					zzInput = zzBufferL[--zzFPos];
					zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
				}
				;
				zzMarkedPos = zzFPos;
			} {
				return getNext();
			}
			case 92:
				break;
			case 27:
				// lookahead expression with fixed lookahead length
				yypushback(1); {
				return getNext();
			}
			case 93:
				break;
			case 28:
				// lookahead expression with fixed lookahead length
				yypushback(1); {
				return handleQuotes(yytext(), true);
			}
			case 94:
				break;
			case 29: {
				String txt = yytext();
				String origText = txt;
				if (normalizeParentheses) {
					txt = LEFT_PAREN_PATTERN.matcher(txt).replaceAll(openparen);
					txt = RIGHT_PAREN_PATTERN.matcher(txt).replaceAll(closeparen);
				}
				return getNext(txt, origText);
			}
			case 95:
				break;
			case 30: {
				breakByHyphens(yytext());
				return getNext(removeSoftHyphens(yytext()), yytext());
			}
			case 96:
				break;
			case 31:
			// general lookahead, find correct zzMarkedPos
			{
				int zzFState = 3;
				int zzFPos = zzStartRead;
				if (zzFin.length <= zzBufferL.length) {
					zzFin = new boolean[zzBufferL.length + 1];
				}
				boolean zzFinL[] = zzFin;
				while (zzFState != -1 && zzFPos < zzMarkedPos) {
					zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
					zzInput = zzBufferL[zzFPos++];
					zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
				}
				if (zzFState != -1) {
					zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
				}
				while (zzFPos <= zzMarkedPos) {
					zzFinL[zzFPos++] = false;
				}

				zzFState = 4;
				zzFPos = zzMarkedPos;
				while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
					zzInput = zzBufferL[--zzFPos];
					zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
				}
				;
				zzMarkedPos = zzFPos;
			} {
				final String origTxt = yytext();
				String tmp = removeSoftHyphens(origTxt);
				if (americanize) {
					tmp = Americanize.americanize(tmp);
				}
				return getNext(tmp, origTxt);
			}
			case 97:
				break;
			case 32: {
				if (escapeForwardSlashAsterisk) {
					return getNext(delimit(yytext(), '/'), yytext());
				} else {
					return getNext();
				}
			}
			case 98:
				break;
			case 33:
				// lookahead expression with fixed lookahead length
				yypushback(1); {
				return getNext(removeSoftHyphens(yytext()), yytext());
			}
			case 99:
				break;
			case 34: { // this one should only match if we're basically at the end of file
						// since the last one matches two things, even newlines (if not tokenize per line)
				String s;
				if (strictTreebank3 && !"U.S.".equals(yytext())) {
					yypushback(1); // return a period for next time
					s = yytext();
				} else {
					s = yytext();
					yypushback(1); // return a period for next time
				}
				return getNext(s, yytext());
			}
			case 100:
				break;
			case 35:
				// lookahead expression with fixed lookahead length
				yypushback(1); {
				String txt = yytext();
				String origText = txt;
				if (normalizeParentheses) {
					txt = LEFT_PAREN_PATTERN.matcher(txt).replaceAll(openparen);
					txt = RIGHT_PAREN_PATTERN.matcher(txt).replaceAll(closeparen);
				}
				return getNext(txt, origText);
			}
			case 101:
				break;
			case 36:
				// lookahead expression with fixed base length
				zzMarkedPos = zzStartRead + 1; { /*
													 * invert quote - often but
													 * not always right
													 */
				return handleQuotes(yytext(), true);
			}
			case 102:
				break;
			case 37:
				// lookahead expression with fixed lookahead length
				yypushback(1); {
				return handleQuotes(yytext(), false);
			}
			case 103:
				break;
			case 38: {
				return getNext(removeSoftHyphens(yytext()), yytext());
			}
			case 104:
				break;
			case 39: {
				String txt = yytext();
				// if we are in strictTreebank3 mode, we need to reject everything after a space or non-breaking space...
				if (strictTreebank3) {
					int spaceIndex = indexOfSpace(txt);
					if (spaceIndex >= 0) {
						yypushback(txt.length() - spaceIndex);
						String newText = yytext();
						return getNext(newText, newText);
					}
				}
				if (escapeForwardSlashAsterisk) {
					txt = delimit(txt, '/');
				}
				if (normalizeSpace) {
					txt = txt.replace(' ', '\u00A0'); // change space to non-breaking space
				}
				return getNext(txt, txt);
			}
			case 105:
				break;
			case 40: {
				return getNormalizedAmpNext();
			}
			case 106:
				break;
			case 41: {
				final String origTxt = yytext();
				String txt = origTxt;
				if (normalizeSpace) {
					txt = txt.replace(' ', '\u00A0'); // change space to non-breaking space
				}
				return getNext(txt, origTxt);
			}
			case 107:
				break;
			case 42: {
				final String origTxt = yytext();
				String txt = origTxt;
				if (normalizeSpace) {
					txt = SINGLE_SPACE_PATTERN.matcher(txt).replaceAll("\u00A0"); // change to non-breaking space
				}
				return getNext(txt, origTxt);
			}
			case 108:
				break;
			case 43:
			// general lookahead, find correct zzMarkedPos
			{
				int zzFState = 5;
				int zzFPos = zzStartRead;
				if (zzFin.length <= zzBufferL.length) {
					zzFin = new boolean[zzBufferL.length + 1];
				}
				boolean zzFinL[] = zzFin;
				while (zzFState != -1 && zzFPos < zzMarkedPos) {
					zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
					zzInput = zzBufferL[zzFPos++];
					zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
				}
				if (zzFState != -1) {
					zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
				}
				while (zzFPos <= zzMarkedPos) {
					zzFinL[zzFPos++] = false;
				}

				zzFState = 6;
				zzFPos = zzMarkedPos;
				while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
					zzInput = zzBufferL[--zzFPos];
					zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
				}
				;
				zzMarkedPos = zzFPos;
			} {
				final String txt = yytext();
				return getNext(removeSoftHyphens(txt), txt);
			}
			case 109:
				break;
			case 44: {
				if (splitAssimilations) {
					yypushback(2);
					return getNext();
				} else {
					return getNext();
				}
			}
			case 110:
				break;
			case 45:
			// general lookahead, find correct zzMarkedPos
			{
				int zzFState = 17;
				int zzFPos = zzStartRead;
				if (zzFin.length <= zzBufferL.length) {
					zzFin = new boolean[zzBufferL.length + 1];
				}
				boolean zzFinL[] = zzFin;
				while (zzFState != -1 && zzFPos < zzMarkedPos) {
					zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
					zzInput = zzBufferL[zzFPos++];
					zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
				}
				if (zzFState != -1) {
					zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
				}
				while (zzFPos <= zzMarkedPos) {
					zzFinL[zzFPos++] = false;
				}

				zzFState = 16;
				zzFPos = zzMarkedPos;
				while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
					zzInput = zzBufferL[--zzFPos];
					zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
				}
				;
				zzMarkedPos = zzFPos;
			} {
				return getNext();
			}
			case 111:
				break;
			case 46:
				// lookahead expression with fixed base length
				zzMarkedPos = zzStartRead + 3; {
				if (splitAssimilations) {
					yypushback(2);
					return getNext();
				} else {
					return getNext();
				}
			}
			case 112:
				break;
			case 47:
			// general lookahead, find correct zzMarkedPos
			{
				int zzFState = 10;
				int zzFPos = zzStartRead;
				if (zzFin.length <= zzBufferL.length) {
					zzFin = new boolean[zzBufferL.length + 1];
				}
				boolean zzFinL[] = zzFin;
				while (zzFState != -1 && zzFPos < zzMarkedPos) {
					zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
					zzInput = zzBufferL[zzFPos++];
					zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
				}
				if (zzFState != -1) {
					zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
				}
				while (zzFPos <= zzMarkedPos) {
					zzFinL[zzFPos++] = false;
				}

				zzFState = 11;
				zzFPos = zzMarkedPos;
				while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
					zzInput = zzBufferL[--zzFPos];
					zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
				}
				;
				zzMarkedPos = zzFPos;
			} {
				return processAbbrev3();
			}
			case 113:
				break;
			case 48:
			// general lookahead, find correct zzMarkedPos
			{
				int zzFState = 20;
				int zzFPos = zzStartRead;
				if (zzFin.length <= zzBufferL.length) {
					zzFin = new boolean[zzBufferL.length + 1];
				}
				boolean zzFinL[] = zzFin;
				while (zzFState != -1 && zzFPos < zzMarkedPos) {
					zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
					zzInput = zzBufferL[zzFPos++];
					zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
				}
				if (zzFState != -1) {
					zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
				}
				while (zzFPos <= zzMarkedPos) {
					zzFinL[zzFPos++] = false;
				}

				zzFState = 22;
				zzFPos = zzMarkedPos;
				while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
					zzInput = zzBufferL[--zzFPos];
					zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
				}
				;
				zzMarkedPos = zzFPos;
			} { /*
				 * attempt to treat fourth ellipsis as period if followed by
				 * space and letter.
				 */
				return handleEllipsis(yytext());
			}
			case 114:
				break;
			case 49:
			// general lookahead, find correct zzMarkedPos
			{
				int zzFState = 18;
				int zzFPos = zzStartRead;
				if (zzFin.length <= zzBufferL.length) {
					zzFin = new boolean[zzBufferL.length + 1];
				}
				boolean zzFinL[] = zzFin;
				while (zzFState != -1 && zzFPos < zzMarkedPos) {
					zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
					zzInput = zzBufferL[zzFPos++];
					zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
				}
				if (zzFState != -1) {
					zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
				}
				while (zzFPos <= zzMarkedPos) {
					zzFinL[zzFPos++] = false;
				}

				zzFState = 19;
				zzFPos = zzMarkedPos;
				while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
					zzInput = zzBufferL[--zzFPos];
					zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
				}
				;
				zzMarkedPos = zzFPos;
			} {
				return getNext();
			}
			case 115:
				break;
			case 50:
			// general lookahead, find correct zzMarkedPos
			{
				int zzFState = 10;
				int zzFPos = zzStartRead;
				if (zzFin.length <= zzBufferL.length) {
					zzFin = new boolean[zzBufferL.length + 1];
				}
				boolean zzFinL[] = zzFin;
				while (zzFState != -1 && zzFPos < zzMarkedPos) {
					zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
					zzInput = zzBufferL[zzFPos++];
					zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
				}
				if (zzFState != -1) {
					zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
				}
				while (zzFPos <= zzMarkedPos) {
					zzFinL[zzFPos++] = false;
				}

				zzFState = 11;
				zzFPos = zzMarkedPos;
				while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
					zzInput = zzBufferL[--zzFPos];
					zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
				}
				;
				zzMarkedPos = zzFPos;
			} {
				return processAbbrev3();
			}
			case 116:
				break;
			case 51:
			// general lookahead, find correct zzMarkedPos
			{
				int zzFState = 20;
				int zzFPos = zzStartRead;
				if (zzFin.length <= zzBufferL.length) {
					zzFin = new boolean[zzBufferL.length + 1];
				}
				boolean zzFinL[] = zzFin;
				while (zzFState != -1 && zzFPos < zzMarkedPos) {
					zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
					zzInput = zzBufferL[zzFPos++];
					zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
				}
				if (zzFState != -1) {
					zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
				}
				while (zzFPos <= zzMarkedPos) {
					zzFinL[zzFPos++] = false;
				}

				zzFState = 21;
				zzFPos = zzMarkedPos;
				while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
					zzInput = zzBufferL[--zzFPos];
					zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
				}
				;
				zzMarkedPos = zzFPos;
			} { /*
				 * attempt to treat fourth ellipsis as period if followed by
				 * space and letter.
				 */
				return handleEllipsis(yytext());
			}
			case 117:
				break;
			case 52: {
				String txt = yytext();
				if (escapeForwardSlashAsterisk) {
					txt = delimit(txt, '/');
					txt = delimit(txt, '*');
				}
				return getNext(txt, yytext());
			}
			case 118:
				break;
			case 53:
				// lookahead expression with fixed lookahead length
				yypushback(1); {
				breakByHyphens(yytext());
				return getNext(removeSoftHyphens(yytext()), yytext());
			}
			case 119:
				break;
			case 54: {
				if (splitAssimilations) {
					yypushback(3);
					return getNext();
				} else {
					return getNext();
				}
			}
			case 120:
				break;
			case 55:
				// lookahead expression with fixed lookahead length
				yypushback(1); {
				return getNormalizedAmpNext();
			}
			case 121:
				break;
			case 56:
			// general lookahead, find correct zzMarkedPos
			{
				int zzFState = 7;
				int zzFPos = zzStartRead;
				if (zzFin.length <= zzBufferL.length) {
					zzFin = new boolean[zzBufferL.length + 1];
				}
				boolean zzFinL[] = zzFin;
				while (zzFState != -1 && zzFPos < zzMarkedPos) {
					zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
					zzInput = zzBufferL[zzFPos++];
					zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
				}
				if (zzFState != -1) {
					zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
				}
				while (zzFPos <= zzMarkedPos) {
					zzFinL[zzFPos++] = false;
				}

				zzFState = 9;
				zzFPos = zzMarkedPos;
				while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
					zzInput = zzBufferL[--zzFPos];
					zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
				}
				;
				zzMarkedPos = zzFPos;
			} {
				return processAcronym();
			}
			case 122:
				break;
			case 57:
				// lookahead expression with fixed lookahead length
				yypushback(2); {
				return getNext();
			}
			case 123:
				break;
			case 58:
			// general lookahead, find correct zzMarkedPos
			{
				int zzFState = 12;
				int zzFPos = zzStartRead;
				if (zzFin.length <= zzBufferL.length) {
					zzFin = new boolean[zzBufferL.length + 1];
				}
				boolean zzFinL[] = zzFin;
				while (zzFState != -1 && zzFPos < zzMarkedPos) {
					zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
					zzInput = zzBufferL[zzFPos++];
					zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
				}
				if (zzFState != -1) {
					zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
				}
				while (zzFPos <= zzMarkedPos) {
					zzFinL[zzFPos++] = false;
				}

				zzFState = 14;
				zzFPos = zzMarkedPos;
				while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
					zzInput = zzBufferL[--zzFPos];
					zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
				}
				;
				zzMarkedPos = zzFPos;
			} {
				return processAbbrev1();
			}
			case 124:
				break;
			case 59:
			// general lookahead, find correct zzMarkedPos
			{
				int zzFState = 7;
				int zzFPos = zzStartRead;
				if (zzFin.length <= zzBufferL.length) {
					zzFin = new boolean[zzBufferL.length + 1];
				}
				boolean zzFinL[] = zzFin;
				while (zzFState != -1 && zzFPos < zzMarkedPos) {
					zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
					zzInput = zzBufferL[zzFPos++];
					zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
				}
				if (zzFState != -1) {
					zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
				}
				while (zzFPos <= zzMarkedPos) {
					zzFinL[zzFPos++] = false;
				}

				zzFState = 8;
				zzFPos = zzMarkedPos;
				while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
					zzInput = zzBufferL[--zzFPos];
					zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
				}
				;
				zzMarkedPos = zzFPos;
			} {
				return processAcronym();
			}
			case 125:
				break;
			case 60:
			// general lookahead, find correct zzMarkedPos
			{
				int zzFState = 12;
				int zzFPos = zzStartRead;
				if (zzFin.length <= zzBufferL.length) {
					zzFin = new boolean[zzBufferL.length + 1];
				}
				boolean zzFinL[] = zzFin;
				while (zzFState != -1 && zzFPos < zzMarkedPos) {
					zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
					zzInput = zzBufferL[zzFPos++];
					zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
				}
				if (zzFState != -1) {
					zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
				}
				while (zzFPos <= zzMarkedPos) {
					zzFinL[zzFPos++] = false;
				}

				zzFState = 13;
				zzFPos = zzMarkedPos;
				while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
					zzInput = zzBufferL[--zzFPos];
					zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
				}
				;
				zzMarkedPos = zzFPos;
			} {
				return processAbbrev1();
			}
			case 126:
				break;
			case 61: {
				String txt = yytext();
				if (escapeForwardSlashAsterisk) {
					txt = delimit(txt, '/');
				}
				return getNext(txt, yytext());
			}
			case 127:
				break;
			case 62:
				// lookahead expression with fixed lookahead length
				yypushback(4); {
				return getNext();
			}
			case 128:
				break;
			case 63:
				// lookahead expression with fixed base length
				zzMarkedPos = zzStartRead + 3; {
				return getNext();
			}
			case 129:
				break;
			case 64: {
				String txt = yytext();
				if (normalizeSpace) {
					txt = txt.replace(' ', '\u00A0'); // change space to non-breaking space
				}
				if (normalizeParentheses) {
					txt = LEFT_PAREN_PATTERN.matcher(txt).replaceAll(openparen);
					txt = RIGHT_PAREN_PATTERN.matcher(txt).replaceAll(closeparen);
				}
				return getNext(txt, yytext());
			}
			case 130:
				break;
			case 65:
			// general lookahead, find correct zzMarkedPos
			{
				int zzFState = 23;
				int zzFPos = zzStartRead;
				if (zzFin.length <= zzBufferL.length) {
					zzFin = new boolean[zzBufferL.length + 1];
				}
				boolean zzFinL[] = zzFin;
				while (zzFState != -1 && zzFPos < zzMarkedPos) {
					zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
					zzInput = zzBufferL[zzFPos++];
					zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
				}
				if (zzFState != -1) {
					zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
				}
				while (zzFPos <= zzMarkedPos) {
					zzFinL[zzFPos++] = false;
				}

				zzFState = 25;
				zzFPos = zzMarkedPos;
				while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
					zzInput = zzBufferL[--zzFPos];
					zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
				}
				;
				zzMarkedPos = zzFPos;
			} { /*
				 * attempt to treat fourth ellipsis as period if followed by
				 * space and letter.
				 */
				return handleEllipsis(yytext());
			}
			case 131:
				break;
			case 66:
			// general lookahead, find correct zzMarkedPos
			{
				int zzFState = 23;
				int zzFPos = zzStartRead;
				if (zzFin.length <= zzBufferL.length) {
					zzFin = new boolean[zzBufferL.length + 1];
				}
				boolean zzFinL[] = zzFin;
				while (zzFState != -1 && zzFPos < zzMarkedPos) {
					zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
					zzInput = zzBufferL[zzFPos++];
					zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
				}
				if (zzFState != -1) {
					zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
				}
				while (zzFPos <= zzMarkedPos) {
					zzFinL[zzFPos++] = false;
				}

				zzFState = 24;
				zzFPos = zzMarkedPos;
				while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
					zzInput = zzBufferL[--zzFPos];
					zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
				}
				;
				zzMarkedPos = zzFPos;
			} { /*
				 * attempt to treat fourth ellipsis as period if followed by
				 * space and letter.
				 */
				return handleEllipsis(yytext());
			}
			case 132:
				break;
			default:
				if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
					zzAtEOF = true;
					{
						if (invertible) {
							prevWordAfter.append(yytext());
							String str = prevWordAfter.toString();
							prevWordAfter.setLength(0);
							prevWord.set(CoreAnnotations.AfterAnnotation.class, str);
						}
						return null;
					}
				} else {
					zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}

	public static void main(String[] args) throws IOException, ClassNotFoundException {
		System.out.println();
	}
}
